// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/emaillog"
	"github.com/boshangad/v1/ent/predicate"
)

// EmailLogUpdate is the builder for updating EmailLog entities.
type EmailLogUpdate struct {
	config
	hooks    []Hook
	mutation *EmailLogMutation
}

// Where appends a list predicates to the EmailLogUpdate builder.
func (elu *EmailLogUpdate) Where(ps ...predicate.EmailLog) *EmailLogUpdate {
	elu.mutation.Where(ps...)
	return elu
}

// SetUpdateTime sets the "update_time" field.
func (elu *EmailLogUpdate) SetUpdateTime(i int64) *EmailLogUpdate {
	elu.mutation.ResetUpdateTime()
	elu.mutation.SetUpdateTime(i)
	return elu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableUpdateTime(i *int64) *EmailLogUpdate {
	if i != nil {
		elu.SetUpdateTime(*i)
	}
	return elu
}

// AddUpdateTime adds i to the "update_time" field.
func (elu *EmailLogUpdate) AddUpdateTime(i int64) *EmailLogUpdate {
	elu.mutation.AddUpdateTime(i)
	return elu
}

// SetUpdateBy sets the "update_by" field.
func (elu *EmailLogUpdate) SetUpdateBy(u uint64) *EmailLogUpdate {
	elu.mutation.ResetUpdateBy()
	elu.mutation.SetUpdateBy(u)
	return elu
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableUpdateBy(u *uint64) *EmailLogUpdate {
	if u != nil {
		elu.SetUpdateBy(*u)
	}
	return elu
}

// AddUpdateBy adds u to the "update_by" field.
func (elu *EmailLogUpdate) AddUpdateBy(u uint64) *EmailLogUpdate {
	elu.mutation.AddUpdateBy(u)
	return elu
}

// SetAppID sets the "app_id" field.
func (elu *EmailLogUpdate) SetAppID(u uint64) *EmailLogUpdate {
	elu.mutation.SetAppID(u)
	return elu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableAppID(u *uint64) *EmailLogUpdate {
	if u != nil {
		elu.SetAppID(*u)
	}
	return elu
}

// SetEmail sets the "email" field.
func (elu *EmailLogUpdate) SetEmail(s string) *EmailLogUpdate {
	elu.mutation.SetEmail(s)
	return elu
}

// SetScope sets the "scope" field.
func (elu *EmailLogUpdate) SetScope(s string) *EmailLogUpdate {
	elu.mutation.SetScope(s)
	return elu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableScope(s *string) *EmailLogUpdate {
	if s != nil {
		elu.SetScope(*s)
	}
	return elu
}

// SetTypeID sets the "type_id" field.
func (elu *EmailLogUpdate) SetTypeID(u uint64) *EmailLogUpdate {
	elu.mutation.ResetTypeID()
	elu.mutation.SetTypeID(u)
	return elu
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableTypeID(u *uint64) *EmailLogUpdate {
	if u != nil {
		elu.SetTypeID(*u)
	}
	return elu
}

// AddTypeID adds u to the "type_id" field.
func (elu *EmailLogUpdate) AddTypeID(u uint64) *EmailLogUpdate {
	elu.mutation.AddTypeID(u)
	return elu
}

// SetGateway sets the "gateway" field.
func (elu *EmailLogUpdate) SetGateway(s string) *EmailLogUpdate {
	elu.mutation.SetGateway(s)
	return elu
}

// SetNillableGateway sets the "gateway" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableGateway(s *string) *EmailLogUpdate {
	if s != nil {
		elu.SetGateway(*s)
	}
	return elu
}

// SetIP sets the "ip" field.
func (elu *EmailLogUpdate) SetIP(s string) *EmailLogUpdate {
	elu.mutation.SetIP(s)
	return elu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableIP(s *string) *EmailLogUpdate {
	if s != nil {
		elu.SetIP(*s)
	}
	return elu
}

// SetFromName sets the "from_name" field.
func (elu *EmailLogUpdate) SetFromName(s string) *EmailLogUpdate {
	elu.mutation.SetFromName(s)
	return elu
}

// SetNillableFromName sets the "from_name" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableFromName(s *string) *EmailLogUpdate {
	if s != nil {
		elu.SetFromName(*s)
	}
	return elu
}

// SetFromAddress sets the "from_address" field.
func (elu *EmailLogUpdate) SetFromAddress(s string) *EmailLogUpdate {
	elu.mutation.SetFromAddress(s)
	return elu
}

// SetNillableFromAddress sets the "from_address" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableFromAddress(s *string) *EmailLogUpdate {
	if s != nil {
		elu.SetFromAddress(*s)
	}
	return elu
}

// SetTitle sets the "title" field.
func (elu *EmailLogUpdate) SetTitle(s string) *EmailLogUpdate {
	elu.mutation.SetTitle(s)
	return elu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableTitle(s *string) *EmailLogUpdate {
	if s != nil {
		elu.SetTitle(*s)
	}
	return elu
}

// SetContent sets the "content" field.
func (elu *EmailLogUpdate) SetContent(s string) *EmailLogUpdate {
	elu.mutation.SetContent(s)
	return elu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableContent(s *string) *EmailLogUpdate {
	if s != nil {
		elu.SetContent(*s)
	}
	return elu
}

// SetData sets the "data" field.
func (elu *EmailLogUpdate) SetData(s string) *EmailLogUpdate {
	elu.mutation.SetData(s)
	return elu
}

// SetNillableData sets the "data" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableData(s *string) *EmailLogUpdate {
	if s != nil {
		elu.SetData(*s)
	}
	return elu
}

// SetCheckCount sets the "check_count" field.
func (elu *EmailLogUpdate) SetCheckCount(u uint8) *EmailLogUpdate {
	elu.mutation.ResetCheckCount()
	elu.mutation.SetCheckCount(u)
	return elu
}

// SetNillableCheckCount sets the "check_count" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableCheckCount(u *uint8) *EmailLogUpdate {
	if u != nil {
		elu.SetCheckCount(*u)
	}
	return elu
}

// AddCheckCount adds u to the "check_count" field.
func (elu *EmailLogUpdate) AddCheckCount(u uint8) *EmailLogUpdate {
	elu.mutation.AddCheckCount(u)
	return elu
}

// SetStatus sets the "status" field.
func (elu *EmailLogUpdate) SetStatus(u uint) *EmailLogUpdate {
	elu.mutation.ResetStatus()
	elu.mutation.SetStatus(u)
	return elu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableStatus(u *uint) *EmailLogUpdate {
	if u != nil {
		elu.SetStatus(*u)
	}
	return elu
}

// AddStatus adds u to the "status" field.
func (elu *EmailLogUpdate) AddStatus(u uint) *EmailLogUpdate {
	elu.mutation.AddStatus(u)
	return elu
}

// SetReturnMsg sets the "return_msg" field.
func (elu *EmailLogUpdate) SetReturnMsg(s string) *EmailLogUpdate {
	elu.mutation.SetReturnMsg(s)
	return elu
}

// SetNillableReturnMsg sets the "return_msg" field if the given value is not nil.
func (elu *EmailLogUpdate) SetNillableReturnMsg(s *string) *EmailLogUpdate {
	if s != nil {
		elu.SetReturnMsg(*s)
	}
	return elu
}

// SetApp sets the "app" edge to the App entity.
func (elu *EmailLogUpdate) SetApp(a *App) *EmailLogUpdate {
	return elu.SetAppID(a.ID)
}

// Mutation returns the EmailLogMutation object of the builder.
func (elu *EmailLogUpdate) Mutation() *EmailLogMutation {
	return elu.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (elu *EmailLogUpdate) ClearApp() *EmailLogUpdate {
	elu.mutation.ClearApp()
	return elu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (elu *EmailLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(elu.hooks) == 0 {
		if err = elu.check(); err != nil {
			return 0, err
		}
		affected, err = elu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = elu.check(); err != nil {
				return 0, err
			}
			elu.mutation = mutation
			affected, err = elu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(elu.hooks) - 1; i >= 0; i-- {
			if elu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = elu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, elu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (elu *EmailLogUpdate) SaveX(ctx context.Context) int {
	affected, err := elu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (elu *EmailLogUpdate) Exec(ctx context.Context) error {
	_, err := elu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elu *EmailLogUpdate) ExecX(ctx context.Context) {
	if err := elu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elu *EmailLogUpdate) check() error {
	if v, ok := elu.mutation.Email(); ok {
		if err := emaillog.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := elu.mutation.Scope(); ok {
		if err := emaillog.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf("ent: validator failed for field \"scope\": %w", err)}
		}
	}
	if v, ok := elu.mutation.Gateway(); ok {
		if err := emaillog.GatewayValidator(v); err != nil {
			return &ValidationError{Name: "gateway", err: fmt.Errorf("ent: validator failed for field \"gateway\": %w", err)}
		}
	}
	if v, ok := elu.mutation.IP(); ok {
		if err := emaillog.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf("ent: validator failed for field \"ip\": %w", err)}
		}
	}
	if v, ok := elu.mutation.FromName(); ok {
		if err := emaillog.FromNameValidator(v); err != nil {
			return &ValidationError{Name: "from_name", err: fmt.Errorf("ent: validator failed for field \"from_name\": %w", err)}
		}
	}
	if v, ok := elu.mutation.FromAddress(); ok {
		if err := emaillog.FromAddressValidator(v); err != nil {
			return &ValidationError{Name: "from_address", err: fmt.Errorf("ent: validator failed for field \"from_address\": %w", err)}
		}
	}
	if v, ok := elu.mutation.Title(); ok {
		if err := emaillog.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := elu.mutation.Data(); ok {
		if err := emaillog.DataValidator(v); err != nil {
			return &ValidationError{Name: "data", err: fmt.Errorf("ent: validator failed for field \"data\": %w", err)}
		}
	}
	if v, ok := elu.mutation.ReturnMsg(); ok {
		if err := emaillog.ReturnMsgValidator(v); err != nil {
			return &ValidationError{Name: "return_msg", err: fmt.Errorf("ent: validator failed for field \"return_msg\": %w", err)}
		}
	}
	if _, ok := elu.mutation.AppID(); elu.mutation.AppCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"app\"")
	}
	return nil
}

func (elu *EmailLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emaillog.Table,
			Columns: emaillog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: emaillog.FieldID,
			},
		},
	}
	if ps := elu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: emaillog.FieldUpdateTime,
		})
	}
	if value, ok := elu.mutation.AddedUpdateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: emaillog.FieldUpdateTime,
		})
	}
	if value, ok := elu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: emaillog.FieldUpdateBy,
		})
	}
	if value, ok := elu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: emaillog.FieldUpdateBy,
		})
	}
	if value, ok := elu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldEmail,
		})
	}
	if value, ok := elu.mutation.Scope(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldScope,
		})
	}
	if value, ok := elu.mutation.TypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: emaillog.FieldTypeID,
		})
	}
	if value, ok := elu.mutation.AddedTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: emaillog.FieldTypeID,
		})
	}
	if value, ok := elu.mutation.Gateway(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldGateway,
		})
	}
	if value, ok := elu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldIP,
		})
	}
	if value, ok := elu.mutation.FromName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldFromName,
		})
	}
	if value, ok := elu.mutation.FromAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldFromAddress,
		})
	}
	if value, ok := elu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldTitle,
		})
	}
	if value, ok := elu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldContent,
		})
	}
	if value, ok := elu.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldData,
		})
	}
	if value, ok := elu.mutation.CheckCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: emaillog.FieldCheckCount,
		})
	}
	if value, ok := elu.mutation.AddedCheckCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: emaillog.FieldCheckCount,
		})
	}
	if value, ok := elu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: emaillog.FieldStatus,
		})
	}
	if value, ok := elu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: emaillog.FieldStatus,
		})
	}
	if value, ok := elu.mutation.ReturnMsg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldReturnMsg,
		})
	}
	if elu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emaillog.AppTable,
			Columns: []string{emaillog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emaillog.AppTable,
			Columns: []string{emaillog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, elu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emaillog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EmailLogUpdateOne is the builder for updating a single EmailLog entity.
type EmailLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailLogMutation
}

// SetUpdateTime sets the "update_time" field.
func (eluo *EmailLogUpdateOne) SetUpdateTime(i int64) *EmailLogUpdateOne {
	eluo.mutation.ResetUpdateTime()
	eluo.mutation.SetUpdateTime(i)
	return eluo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableUpdateTime(i *int64) *EmailLogUpdateOne {
	if i != nil {
		eluo.SetUpdateTime(*i)
	}
	return eluo
}

// AddUpdateTime adds i to the "update_time" field.
func (eluo *EmailLogUpdateOne) AddUpdateTime(i int64) *EmailLogUpdateOne {
	eluo.mutation.AddUpdateTime(i)
	return eluo
}

// SetUpdateBy sets the "update_by" field.
func (eluo *EmailLogUpdateOne) SetUpdateBy(u uint64) *EmailLogUpdateOne {
	eluo.mutation.ResetUpdateBy()
	eluo.mutation.SetUpdateBy(u)
	return eluo
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableUpdateBy(u *uint64) *EmailLogUpdateOne {
	if u != nil {
		eluo.SetUpdateBy(*u)
	}
	return eluo
}

// AddUpdateBy adds u to the "update_by" field.
func (eluo *EmailLogUpdateOne) AddUpdateBy(u uint64) *EmailLogUpdateOne {
	eluo.mutation.AddUpdateBy(u)
	return eluo
}

// SetAppID sets the "app_id" field.
func (eluo *EmailLogUpdateOne) SetAppID(u uint64) *EmailLogUpdateOne {
	eluo.mutation.SetAppID(u)
	return eluo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableAppID(u *uint64) *EmailLogUpdateOne {
	if u != nil {
		eluo.SetAppID(*u)
	}
	return eluo
}

// SetEmail sets the "email" field.
func (eluo *EmailLogUpdateOne) SetEmail(s string) *EmailLogUpdateOne {
	eluo.mutation.SetEmail(s)
	return eluo
}

// SetScope sets the "scope" field.
func (eluo *EmailLogUpdateOne) SetScope(s string) *EmailLogUpdateOne {
	eluo.mutation.SetScope(s)
	return eluo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableScope(s *string) *EmailLogUpdateOne {
	if s != nil {
		eluo.SetScope(*s)
	}
	return eluo
}

// SetTypeID sets the "type_id" field.
func (eluo *EmailLogUpdateOne) SetTypeID(u uint64) *EmailLogUpdateOne {
	eluo.mutation.ResetTypeID()
	eluo.mutation.SetTypeID(u)
	return eluo
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableTypeID(u *uint64) *EmailLogUpdateOne {
	if u != nil {
		eluo.SetTypeID(*u)
	}
	return eluo
}

// AddTypeID adds u to the "type_id" field.
func (eluo *EmailLogUpdateOne) AddTypeID(u uint64) *EmailLogUpdateOne {
	eluo.mutation.AddTypeID(u)
	return eluo
}

// SetGateway sets the "gateway" field.
func (eluo *EmailLogUpdateOne) SetGateway(s string) *EmailLogUpdateOne {
	eluo.mutation.SetGateway(s)
	return eluo
}

// SetNillableGateway sets the "gateway" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableGateway(s *string) *EmailLogUpdateOne {
	if s != nil {
		eluo.SetGateway(*s)
	}
	return eluo
}

// SetIP sets the "ip" field.
func (eluo *EmailLogUpdateOne) SetIP(s string) *EmailLogUpdateOne {
	eluo.mutation.SetIP(s)
	return eluo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableIP(s *string) *EmailLogUpdateOne {
	if s != nil {
		eluo.SetIP(*s)
	}
	return eluo
}

// SetFromName sets the "from_name" field.
func (eluo *EmailLogUpdateOne) SetFromName(s string) *EmailLogUpdateOne {
	eluo.mutation.SetFromName(s)
	return eluo
}

// SetNillableFromName sets the "from_name" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableFromName(s *string) *EmailLogUpdateOne {
	if s != nil {
		eluo.SetFromName(*s)
	}
	return eluo
}

// SetFromAddress sets the "from_address" field.
func (eluo *EmailLogUpdateOne) SetFromAddress(s string) *EmailLogUpdateOne {
	eluo.mutation.SetFromAddress(s)
	return eluo
}

// SetNillableFromAddress sets the "from_address" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableFromAddress(s *string) *EmailLogUpdateOne {
	if s != nil {
		eluo.SetFromAddress(*s)
	}
	return eluo
}

// SetTitle sets the "title" field.
func (eluo *EmailLogUpdateOne) SetTitle(s string) *EmailLogUpdateOne {
	eluo.mutation.SetTitle(s)
	return eluo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableTitle(s *string) *EmailLogUpdateOne {
	if s != nil {
		eluo.SetTitle(*s)
	}
	return eluo
}

// SetContent sets the "content" field.
func (eluo *EmailLogUpdateOne) SetContent(s string) *EmailLogUpdateOne {
	eluo.mutation.SetContent(s)
	return eluo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableContent(s *string) *EmailLogUpdateOne {
	if s != nil {
		eluo.SetContent(*s)
	}
	return eluo
}

// SetData sets the "data" field.
func (eluo *EmailLogUpdateOne) SetData(s string) *EmailLogUpdateOne {
	eluo.mutation.SetData(s)
	return eluo
}

// SetNillableData sets the "data" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableData(s *string) *EmailLogUpdateOne {
	if s != nil {
		eluo.SetData(*s)
	}
	return eluo
}

// SetCheckCount sets the "check_count" field.
func (eluo *EmailLogUpdateOne) SetCheckCount(u uint8) *EmailLogUpdateOne {
	eluo.mutation.ResetCheckCount()
	eluo.mutation.SetCheckCount(u)
	return eluo
}

// SetNillableCheckCount sets the "check_count" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableCheckCount(u *uint8) *EmailLogUpdateOne {
	if u != nil {
		eluo.SetCheckCount(*u)
	}
	return eluo
}

// AddCheckCount adds u to the "check_count" field.
func (eluo *EmailLogUpdateOne) AddCheckCount(u uint8) *EmailLogUpdateOne {
	eluo.mutation.AddCheckCount(u)
	return eluo
}

// SetStatus sets the "status" field.
func (eluo *EmailLogUpdateOne) SetStatus(u uint) *EmailLogUpdateOne {
	eluo.mutation.ResetStatus()
	eluo.mutation.SetStatus(u)
	return eluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableStatus(u *uint) *EmailLogUpdateOne {
	if u != nil {
		eluo.SetStatus(*u)
	}
	return eluo
}

// AddStatus adds u to the "status" field.
func (eluo *EmailLogUpdateOne) AddStatus(u uint) *EmailLogUpdateOne {
	eluo.mutation.AddStatus(u)
	return eluo
}

// SetReturnMsg sets the "return_msg" field.
func (eluo *EmailLogUpdateOne) SetReturnMsg(s string) *EmailLogUpdateOne {
	eluo.mutation.SetReturnMsg(s)
	return eluo
}

// SetNillableReturnMsg sets the "return_msg" field if the given value is not nil.
func (eluo *EmailLogUpdateOne) SetNillableReturnMsg(s *string) *EmailLogUpdateOne {
	if s != nil {
		eluo.SetReturnMsg(*s)
	}
	return eluo
}

// SetApp sets the "app" edge to the App entity.
func (eluo *EmailLogUpdateOne) SetApp(a *App) *EmailLogUpdateOne {
	return eluo.SetAppID(a.ID)
}

// Mutation returns the EmailLogMutation object of the builder.
func (eluo *EmailLogUpdateOne) Mutation() *EmailLogMutation {
	return eluo.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (eluo *EmailLogUpdateOne) ClearApp() *EmailLogUpdateOne {
	eluo.mutation.ClearApp()
	return eluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eluo *EmailLogUpdateOne) Select(field string, fields ...string) *EmailLogUpdateOne {
	eluo.fields = append([]string{field}, fields...)
	return eluo
}

// Save executes the query and returns the updated EmailLog entity.
func (eluo *EmailLogUpdateOne) Save(ctx context.Context) (*EmailLog, error) {
	var (
		err  error
		node *EmailLog
	)
	if len(eluo.hooks) == 0 {
		if err = eluo.check(); err != nil {
			return nil, err
		}
		node, err = eluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eluo.check(); err != nil {
				return nil, err
			}
			eluo.mutation = mutation
			node, err = eluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eluo.hooks) - 1; i >= 0; i-- {
			if eluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (eluo *EmailLogUpdateOne) SaveX(ctx context.Context) *EmailLog {
	node, err := eluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eluo *EmailLogUpdateOne) Exec(ctx context.Context) error {
	_, err := eluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eluo *EmailLogUpdateOne) ExecX(ctx context.Context) {
	if err := eluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eluo *EmailLogUpdateOne) check() error {
	if v, ok := eluo.mutation.Email(); ok {
		if err := emaillog.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := eluo.mutation.Scope(); ok {
		if err := emaillog.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf("ent: validator failed for field \"scope\": %w", err)}
		}
	}
	if v, ok := eluo.mutation.Gateway(); ok {
		if err := emaillog.GatewayValidator(v); err != nil {
			return &ValidationError{Name: "gateway", err: fmt.Errorf("ent: validator failed for field \"gateway\": %w", err)}
		}
	}
	if v, ok := eluo.mutation.IP(); ok {
		if err := emaillog.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf("ent: validator failed for field \"ip\": %w", err)}
		}
	}
	if v, ok := eluo.mutation.FromName(); ok {
		if err := emaillog.FromNameValidator(v); err != nil {
			return &ValidationError{Name: "from_name", err: fmt.Errorf("ent: validator failed for field \"from_name\": %w", err)}
		}
	}
	if v, ok := eluo.mutation.FromAddress(); ok {
		if err := emaillog.FromAddressValidator(v); err != nil {
			return &ValidationError{Name: "from_address", err: fmt.Errorf("ent: validator failed for field \"from_address\": %w", err)}
		}
	}
	if v, ok := eluo.mutation.Title(); ok {
		if err := emaillog.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := eluo.mutation.Data(); ok {
		if err := emaillog.DataValidator(v); err != nil {
			return &ValidationError{Name: "data", err: fmt.Errorf("ent: validator failed for field \"data\": %w", err)}
		}
	}
	if v, ok := eluo.mutation.ReturnMsg(); ok {
		if err := emaillog.ReturnMsgValidator(v); err != nil {
			return &ValidationError{Name: "return_msg", err: fmt.Errorf("ent: validator failed for field \"return_msg\": %w", err)}
		}
	}
	if _, ok := eluo.mutation.AppID(); eluo.mutation.AppCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"app\"")
	}
	return nil
}

func (eluo *EmailLogUpdateOne) sqlSave(ctx context.Context) (_node *EmailLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emaillog.Table,
			Columns: emaillog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: emaillog.FieldID,
			},
		},
	}
	id, ok := eluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing EmailLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := eluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emaillog.FieldID)
		for _, f := range fields {
			if !emaillog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emaillog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eluo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: emaillog.FieldUpdateTime,
		})
	}
	if value, ok := eluo.mutation.AddedUpdateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: emaillog.FieldUpdateTime,
		})
	}
	if value, ok := eluo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: emaillog.FieldUpdateBy,
		})
	}
	if value, ok := eluo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: emaillog.FieldUpdateBy,
		})
	}
	if value, ok := eluo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldEmail,
		})
	}
	if value, ok := eluo.mutation.Scope(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldScope,
		})
	}
	if value, ok := eluo.mutation.TypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: emaillog.FieldTypeID,
		})
	}
	if value, ok := eluo.mutation.AddedTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: emaillog.FieldTypeID,
		})
	}
	if value, ok := eluo.mutation.Gateway(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldGateway,
		})
	}
	if value, ok := eluo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldIP,
		})
	}
	if value, ok := eluo.mutation.FromName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldFromName,
		})
	}
	if value, ok := eluo.mutation.FromAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldFromAddress,
		})
	}
	if value, ok := eluo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldTitle,
		})
	}
	if value, ok := eluo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldContent,
		})
	}
	if value, ok := eluo.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldData,
		})
	}
	if value, ok := eluo.mutation.CheckCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: emaillog.FieldCheckCount,
		})
	}
	if value, ok := eluo.mutation.AddedCheckCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: emaillog.FieldCheckCount,
		})
	}
	if value, ok := eluo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: emaillog.FieldStatus,
		})
	}
	if value, ok := eluo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: emaillog.FieldStatus,
		})
	}
	if value, ok := eluo.mutation.ReturnMsg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldReturnMsg,
		})
	}
	if eluo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emaillog.AppTable,
			Columns: []string{emaillog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eluo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emaillog.AppTable,
			Columns: []string{emaillog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmailLog{config: eluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emaillog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
