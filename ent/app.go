// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/boshangad/v1/ent/app"
)

// App is the model entity for the App schema.
type App struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID uint64 `json:"id,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	// 删除时间
	DeleteTime int64 `json:"delete_time,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime int64 `json:"create_time,omitempty"`
	// CreateBy holds the value of the "create_by" field.
	// 创建人
	CreateBy uint64 `json:"create_by,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime int64 `json:"update_time,omitempty"`
	// UpdateBy holds the value of the "update_by" field.
	// 更新人
	UpdateBy uint64 `json:"update_by,omitempty"`
	// Alias holds the value of the "alias" field.
	// 别名
	Alias string `json:"alias,omitempty"`
	// TypeID holds the value of the "type_id" field.
	// 类型
	TypeID uint64 `json:"type_id,omitempty"`
	// Title holds the value of the "title" field.
	// 标题
	Title string `json:"title,omitempty"`
	// Intro holds the value of the "intro" field.
	// 简介
	Intro string `json:"intro,omitempty"`
	// MpOriginID holds the value of the "mp_origin_id" field.
	// 原始ID
	MpOriginID string `json:"mp_origin_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	// 应用ID
	AppID string `json:"app_id,omitempty"`
	// AppSecret holds the value of the "app_secret" field.
	// 应用密钥
	AppSecret string `json:"app_secret,omitempty"`
	// HasPaymentAuth holds the value of the "has_payment_auth" field.
	// 是否有支付权限
	HasPaymentAuth bool `json:"has_payment_auth,omitempty"`
	// RegisterUserNumber holds the value of the "register_user_number" field.
	// 注册用户数量
	RegisterUserNumber uint64 `json:"register_user_number,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status uint `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppQuery when eager-loading is set.
	Edges AppEdges `json:"edges"`
}

// AppEdges holds the relations/edges for other nodes in the graph.
type AppEdges struct {
	// AppOptions holds the value of the appOptions edge.
	AppOptions []*AppOption `json:"appOptions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppOptionsOrErr returns the AppOptions value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) AppOptionsOrErr() ([]*AppOption, error) {
	if e.loadedTypes[0] {
		return e.AppOptions, nil
	}
	return nil, &NotLoadedError{edge: "appOptions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*App) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case app.FieldHasPaymentAuth:
			values[i] = new(sql.NullBool)
		case app.FieldID, app.FieldDeleteTime, app.FieldCreateTime, app.FieldCreateBy, app.FieldUpdateTime, app.FieldUpdateBy, app.FieldTypeID, app.FieldRegisterUserNumber, app.FieldStatus:
			values[i] = new(sql.NullInt64)
		case app.FieldAlias, app.FieldTitle, app.FieldIntro, app.FieldMpOriginID, app.FieldAppID, app.FieldAppSecret:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type App", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the App fields.
func (a *App) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case app.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint64(value.Int64)
		case app.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				a.DeleteTime = value.Int64
			}
		case app.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = value.Int64
			}
		case app.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				a.CreateBy = uint64(value.Int64)
			}
		case app.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				a.UpdateTime = value.Int64
			}
		case app.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				a.UpdateBy = uint64(value.Int64)
			}
		case app.FieldAlias:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alias", values[i])
			} else if value.Valid {
				a.Alias = value.String
			}
		case app.FieldTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type_id", values[i])
			} else if value.Valid {
				a.TypeID = uint64(value.Int64)
			}
		case app.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case app.FieldIntro:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field intro", values[i])
			} else if value.Valid {
				a.Intro = value.String
			}
		case app.FieldMpOriginID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mp_origin_id", values[i])
			} else if value.Valid {
				a.MpOriginID = value.String
			}
		case app.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				a.AppID = value.String
			}
		case app.FieldAppSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_secret", values[i])
			} else if value.Valid {
				a.AppSecret = value.String
			}
		case app.FieldHasPaymentAuth:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_payment_auth", values[i])
			} else if value.Valid {
				a.HasPaymentAuth = value.Bool
			}
		case app.FieldRegisterUserNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field register_user_number", values[i])
			} else if value.Valid {
				a.RegisterUserNumber = uint64(value.Int64)
			}
		case app.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = uint(value.Int64)
			}
		}
	}
	return nil
}

// QueryAppOptions queries the "appOptions" edge of the App entity.
func (a *App) QueryAppOptions() *AppOptionQuery {
	return (&AppClient{config: a.config}).QueryAppOptions(a)
}

// Update returns a builder for updating this App.
// Note that you need to call App.Unwrap() before calling this method if this App
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *App) Update() *AppUpdateOne {
	return (&AppClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the App entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *App) Unwrap() *App {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: App is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *App) String() string {
	var builder strings.Builder
	builder.WriteString("App(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", delete_time=")
	builder.WriteString(fmt.Sprintf("%v", a.DeleteTime))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", a.CreateTime))
	builder.WriteString(", create_by=")
	builder.WriteString(fmt.Sprintf("%v", a.CreateBy))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdateTime))
	builder.WriteString(", update_by=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdateBy))
	builder.WriteString(", alias=")
	builder.WriteString(a.Alias)
	builder.WriteString(", type_id=")
	builder.WriteString(fmt.Sprintf("%v", a.TypeID))
	builder.WriteString(", title=")
	builder.WriteString(a.Title)
	builder.WriteString(", intro=")
	builder.WriteString(a.Intro)
	builder.WriteString(", mp_origin_id=")
	builder.WriteString(a.MpOriginID)
	builder.WriteString(", app_id=")
	builder.WriteString(a.AppID)
	builder.WriteString(", app_secret=")
	builder.WriteString(a.AppSecret)
	builder.WriteString(", has_payment_auth=")
	builder.WriteString(fmt.Sprintf("%v", a.HasPaymentAuth))
	builder.WriteString(", register_user_number=")
	builder.WriteString(fmt.Sprintf("%v", a.RegisterUserNumber))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Apps is a parsable slice of App.
type Apps []*App

func (a Apps) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
