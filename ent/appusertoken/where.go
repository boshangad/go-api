// Code generated by entc, DO NOT EDIT.

package appusertoken

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/boshangad/v1/ent/internal"
	"github.com/boshangad/v1/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v int64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppUserID applies equality check predicate on the "app_user_id" field. It's identical to AppUserIDEQ.
func AppUserID(v uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppUserID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserAgent), v))
	})
}

// ClientVersion applies equality check predicate on the "client_version" field. It's identical to ClientVersionEQ.
func ClientVersion(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientVersion), v))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v *uuid.UUID) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// ExpireTime applies equality check predicate on the "expire_time" field. It's identical to ExpireTimeEQ.
func ExpireTime(v int64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpireTime), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v int64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v int64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...int64) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...int64) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v int64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v int64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v int64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v int64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uint64) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uint64) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppUserIDEQ applies the EQ predicate on the "app_user_id" field.
func AppUserIDEQ(v uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppUserID), v))
	})
}

// AppUserIDNEQ applies the NEQ predicate on the "app_user_id" field.
func AppUserIDNEQ(v uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppUserID), v))
	})
}

// AppUserIDIn applies the In predicate on the "app_user_id" field.
func AppUserIDIn(vs ...uint64) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppUserID), v...))
	})
}

// AppUserIDNotIn applies the NotIn predicate on the "app_user_id" field.
func AppUserIDNotIn(vs ...uint64) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppUserID), v...))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserAgent), v))
	})
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserAgent), v))
	})
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserAgent), v...))
	})
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserAgent), v...))
	})
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserAgent), v))
	})
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserAgent), v))
	})
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserAgent), v))
	})
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserAgent), v))
	})
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserAgent), v))
	})
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserAgent), v))
	})
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserAgent), v))
	})
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserAgent), v))
	})
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserAgent), v))
	})
}

// ClientVersionEQ applies the EQ predicate on the "client_version" field.
func ClientVersionEQ(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientVersion), v))
	})
}

// ClientVersionNEQ applies the NEQ predicate on the "client_version" field.
func ClientVersionNEQ(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClientVersion), v))
	})
}

// ClientVersionIn applies the In predicate on the "client_version" field.
func ClientVersionIn(vs ...string) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClientVersion), v...))
	})
}

// ClientVersionNotIn applies the NotIn predicate on the "client_version" field.
func ClientVersionNotIn(vs ...string) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClientVersion), v...))
	})
}

// ClientVersionGT applies the GT predicate on the "client_version" field.
func ClientVersionGT(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClientVersion), v))
	})
}

// ClientVersionGTE applies the GTE predicate on the "client_version" field.
func ClientVersionGTE(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClientVersion), v))
	})
}

// ClientVersionLT applies the LT predicate on the "client_version" field.
func ClientVersionLT(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClientVersion), v))
	})
}

// ClientVersionLTE applies the LTE predicate on the "client_version" field.
func ClientVersionLTE(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClientVersion), v))
	})
}

// ClientVersionContains applies the Contains predicate on the "client_version" field.
func ClientVersionContains(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClientVersion), v))
	})
}

// ClientVersionHasPrefix applies the HasPrefix predicate on the "client_version" field.
func ClientVersionHasPrefix(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClientVersion), v))
	})
}

// ClientVersionHasSuffix applies the HasSuffix predicate on the "client_version" field.
func ClientVersionHasSuffix(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClientVersion), v))
	})
}

// ClientVersionEqualFold applies the EqualFold predicate on the "client_version" field.
func ClientVersionEqualFold(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClientVersion), v))
	})
}

// ClientVersionContainsFold applies the ContainsFold predicate on the "client_version" field.
func ClientVersionContainsFold(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClientVersion), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v *uuid.UUID) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v *uuid.UUID) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...*uuid.UUID) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...*uuid.UUID) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v *uuid.UUID) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v *uuid.UUID) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v *uuid.UUID) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v *uuid.UUID) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIP), v))
	})
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIP), v...))
	})
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIP), v...))
	})
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIP), v))
	})
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIP), v))
	})
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIP), v))
	})
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIP), v))
	})
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIP), v))
	})
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIP), v))
	})
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIP), v))
	})
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIP), v))
	})
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIP), v))
	})
}

// ExpireTimeEQ applies the EQ predicate on the "expire_time" field.
func ExpireTimeEQ(v int64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpireTime), v))
	})
}

// ExpireTimeNEQ applies the NEQ predicate on the "expire_time" field.
func ExpireTimeNEQ(v int64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpireTime), v))
	})
}

// ExpireTimeIn applies the In predicate on the "expire_time" field.
func ExpireTimeIn(vs ...int64) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpireTime), v...))
	})
}

// ExpireTimeNotIn applies the NotIn predicate on the "expire_time" field.
func ExpireTimeNotIn(vs ...int64) predicate.AppUserToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpireTime), v...))
	})
}

// ExpireTimeGT applies the GT predicate on the "expire_time" field.
func ExpireTimeGT(v int64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpireTime), v))
	})
}

// ExpireTimeGTE applies the GTE predicate on the "expire_time" field.
func ExpireTimeGTE(v int64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpireTime), v))
	})
}

// ExpireTimeLT applies the LT predicate on the "expire_time" field.
func ExpireTimeLT(v int64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpireTime), v))
	})
}

// ExpireTimeLTE applies the LTE predicate on the "expire_time" field.
func ExpireTimeLTE(v int64) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpireTime), v))
	})
}

// HasApp applies the HasEdge predicate on the "app" edge.
func HasApp() predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppTable, AppColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.App
		step.Edge.Schema = schemaConfig.AppUserToken
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppWith applies the HasEdge predicate on the "app" edge with a given conditions (other predicates).
func HasAppWith(preds ...predicate.App) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppTable, AppColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.App
		step.Edge.Schema = schemaConfig.AppUserToken
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppUser applies the HasEdge predicate on the "appUser" edge.
func HasAppUser() predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppUserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppUserTable, AppUserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.AppUser
		step.Edge.Schema = schemaConfig.AppUserToken
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppUserWith applies the HasEdge predicate on the "appUser" edge with a given conditions (other predicates).
func HasAppUserWith(preds ...predicate.AppUser) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppUserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppUserTable, AppUserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.AppUser
		step.Edge.Schema = schemaConfig.AppUserToken
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.AppUserToken
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.AppUserToken
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppUserToken) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppUserToken) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppUserToken) predicate.AppUserToken {
	return predicate.AppUserToken(func(s *sql.Selector) {
		p(s.Not())
	})
}
