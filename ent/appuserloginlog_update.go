// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/appuser"
	"github.com/boshangad/v1/ent/appuserloginlog"
	"github.com/boshangad/v1/ent/internal"
	"github.com/boshangad/v1/ent/predicate"
	"github.com/boshangad/v1/ent/user"
)

// AppUserLoginLogUpdate is the builder for updating AppUserLoginLog entities.
type AppUserLoginLogUpdate struct {
	config
	hooks    []Hook
	mutation *AppUserLoginLogMutation
}

// Where appends a list predicates to the AppUserLoginLogUpdate builder.
func (aullu *AppUserLoginLogUpdate) Where(ps ...predicate.AppUserLoginLog) *AppUserLoginLogUpdate {
	aullu.mutation.Where(ps...)
	return aullu
}

// SetAppID sets the "app_id" field.
func (aullu *AppUserLoginLogUpdate) SetAppID(u uint64) *AppUserLoginLogUpdate {
	aullu.mutation.SetAppID(u)
	return aullu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aullu *AppUserLoginLogUpdate) SetNillableAppID(u *uint64) *AppUserLoginLogUpdate {
	if u != nil {
		aullu.SetAppID(*u)
	}
	return aullu
}

// SetAppUserID sets the "app_user_id" field.
func (aullu *AppUserLoginLogUpdate) SetAppUserID(u uint64) *AppUserLoginLogUpdate {
	aullu.mutation.SetAppUserID(u)
	return aullu
}

// SetNillableAppUserID sets the "app_user_id" field if the given value is not nil.
func (aullu *AppUserLoginLogUpdate) SetNillableAppUserID(u *uint64) *AppUserLoginLogUpdate {
	if u != nil {
		aullu.SetAppUserID(*u)
	}
	return aullu
}

// SetUserID sets the "user_id" field.
func (aullu *AppUserLoginLogUpdate) SetUserID(u uint64) *AppUserLoginLogUpdate {
	aullu.mutation.SetUserID(u)
	return aullu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aullu *AppUserLoginLogUpdate) SetNillableUserID(u *uint64) *AppUserLoginLogUpdate {
	if u != nil {
		aullu.SetUserID(*u)
	}
	return aullu
}

// SetLoginTypeID sets the "login_type_id" field.
func (aullu *AppUserLoginLogUpdate) SetLoginTypeID(u uint) *AppUserLoginLogUpdate {
	aullu.mutation.ResetLoginTypeID()
	aullu.mutation.SetLoginTypeID(u)
	return aullu
}

// SetNillableLoginTypeID sets the "login_type_id" field if the given value is not nil.
func (aullu *AppUserLoginLogUpdate) SetNillableLoginTypeID(u *uint) *AppUserLoginLogUpdate {
	if u != nil {
		aullu.SetLoginTypeID(*u)
	}
	return aullu
}

// AddLoginTypeID adds u to the "login_type_id" field.
func (aullu *AppUserLoginLogUpdate) AddLoginTypeID(u uint) *AppUserLoginLogUpdate {
	aullu.mutation.AddLoginTypeID(u)
	return aullu
}

// SetIP sets the "ip" field.
func (aullu *AppUserLoginLogUpdate) SetIP(s string) *AppUserLoginLogUpdate {
	aullu.mutation.SetIP(s)
	return aullu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (aullu *AppUserLoginLogUpdate) SetNillableIP(s *string) *AppUserLoginLogUpdate {
	if s != nil {
		aullu.SetIP(*s)
	}
	return aullu
}

// SetContent sets the "content" field.
func (aullu *AppUserLoginLogUpdate) SetContent(s string) *AppUserLoginLogUpdate {
	aullu.mutation.SetContent(s)
	return aullu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (aullu *AppUserLoginLogUpdate) SetNillableContent(s *string) *AppUserLoginLogUpdate {
	if s != nil {
		aullu.SetContent(*s)
	}
	return aullu
}

// ClearContent clears the value of the "content" field.
func (aullu *AppUserLoginLogUpdate) ClearContent() *AppUserLoginLogUpdate {
	aullu.mutation.ClearContent()
	return aullu
}

// SetStatus sets the "status" field.
func (aullu *AppUserLoginLogUpdate) SetStatus(u uint) *AppUserLoginLogUpdate {
	aullu.mutation.ResetStatus()
	aullu.mutation.SetStatus(u)
	return aullu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aullu *AppUserLoginLogUpdate) SetNillableStatus(u *uint) *AppUserLoginLogUpdate {
	if u != nil {
		aullu.SetStatus(*u)
	}
	return aullu
}

// AddStatus adds u to the "status" field.
func (aullu *AppUserLoginLogUpdate) AddStatus(u uint) *AppUserLoginLogUpdate {
	aullu.mutation.AddStatus(u)
	return aullu
}

// SetApp sets the "app" edge to the App entity.
func (aullu *AppUserLoginLogUpdate) SetApp(a *App) *AppUserLoginLogUpdate {
	return aullu.SetAppID(a.ID)
}

// SetAppUser sets the "appUser" edge to the AppUser entity.
func (aullu *AppUserLoginLogUpdate) SetAppUser(a *AppUser) *AppUserLoginLogUpdate {
	return aullu.SetAppUserID(a.ID)
}

// SetUser sets the "user" edge to the User entity.
func (aullu *AppUserLoginLogUpdate) SetUser(u *User) *AppUserLoginLogUpdate {
	return aullu.SetUserID(u.ID)
}

// Mutation returns the AppUserLoginLogMutation object of the builder.
func (aullu *AppUserLoginLogUpdate) Mutation() *AppUserLoginLogMutation {
	return aullu.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (aullu *AppUserLoginLogUpdate) ClearApp() *AppUserLoginLogUpdate {
	aullu.mutation.ClearApp()
	return aullu
}

// ClearAppUser clears the "appUser" edge to the AppUser entity.
func (aullu *AppUserLoginLogUpdate) ClearAppUser() *AppUserLoginLogUpdate {
	aullu.mutation.ClearAppUser()
	return aullu
}

// ClearUser clears the "user" edge to the User entity.
func (aullu *AppUserLoginLogUpdate) ClearUser() *AppUserLoginLogUpdate {
	aullu.mutation.ClearUser()
	return aullu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aullu *AppUserLoginLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aullu.hooks) == 0 {
		if err = aullu.check(); err != nil {
			return 0, err
		}
		affected, err = aullu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserLoginLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aullu.check(); err != nil {
				return 0, err
			}
			aullu.mutation = mutation
			affected, err = aullu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aullu.hooks) - 1; i >= 0; i-- {
			if aullu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aullu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aullu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aullu *AppUserLoginLogUpdate) SaveX(ctx context.Context) int {
	affected, err := aullu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aullu *AppUserLoginLogUpdate) Exec(ctx context.Context) error {
	_, err := aullu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aullu *AppUserLoginLogUpdate) ExecX(ctx context.Context) {
	if err := aullu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aullu *AppUserLoginLogUpdate) check() error {
	if v, ok := aullu.mutation.IP(); ok {
		if err := appuserloginlog.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf("ent: validator failed for field \"ip\": %w", err)}
		}
	}
	if _, ok := aullu.mutation.AppID(); aullu.mutation.AppCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"app\"")
	}
	if _, ok := aullu.mutation.AppUserID(); aullu.mutation.AppUserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"appUser\"")
	}
	if _, ok := aullu.mutation.UserID(); aullu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (aullu *AppUserLoginLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appuserloginlog.Table,
			Columns: appuserloginlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: appuserloginlog.FieldID,
			},
		},
	}
	if ps := aullu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aullu.mutation.LoginTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuserloginlog.FieldLoginTypeID,
		})
	}
	if value, ok := aullu.mutation.AddedLoginTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuserloginlog.FieldLoginTypeID,
		})
	}
	if value, ok := aullu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserloginlog.FieldIP,
		})
	}
	if value, ok := aullu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserloginlog.FieldContent,
		})
	}
	if aullu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appuserloginlog.FieldContent,
		})
	}
	if value, ok := aullu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuserloginlog.FieldStatus,
		})
	}
	if value, ok := aullu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuserloginlog.FieldStatus,
		})
	}
	if aullu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.AppTable,
			Columns: []string{appuserloginlog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = aullu.schemaConfig.AppUserLoginLog
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aullu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.AppTable,
			Columns: []string{appuserloginlog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = aullu.schemaConfig.AppUserLoginLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aullu.mutation.AppUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.AppUserTable,
			Columns: []string{appuserloginlog.AppUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appuser.FieldID,
				},
			},
		}
		edge.Schema = aullu.schemaConfig.AppUserLoginLog
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aullu.mutation.AppUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.AppUserTable,
			Columns: []string{appuserloginlog.AppUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appuser.FieldID,
				},
			},
		}
		edge.Schema = aullu.schemaConfig.AppUserLoginLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aullu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.UserTable,
			Columns: []string{appuserloginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = aullu.schemaConfig.AppUserLoginLog
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aullu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.UserTable,
			Columns: []string{appuserloginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = aullu.schemaConfig.AppUserLoginLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = aullu.schemaConfig.AppUserLoginLog
	ctx = internal.NewSchemaConfigContext(ctx, aullu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, aullu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuserloginlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppUserLoginLogUpdateOne is the builder for updating a single AppUserLoginLog entity.
type AppUserLoginLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppUserLoginLogMutation
}

// SetAppID sets the "app_id" field.
func (aulluo *AppUserLoginLogUpdateOne) SetAppID(u uint64) *AppUserLoginLogUpdateOne {
	aulluo.mutation.SetAppID(u)
	return aulluo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aulluo *AppUserLoginLogUpdateOne) SetNillableAppID(u *uint64) *AppUserLoginLogUpdateOne {
	if u != nil {
		aulluo.SetAppID(*u)
	}
	return aulluo
}

// SetAppUserID sets the "app_user_id" field.
func (aulluo *AppUserLoginLogUpdateOne) SetAppUserID(u uint64) *AppUserLoginLogUpdateOne {
	aulluo.mutation.SetAppUserID(u)
	return aulluo
}

// SetNillableAppUserID sets the "app_user_id" field if the given value is not nil.
func (aulluo *AppUserLoginLogUpdateOne) SetNillableAppUserID(u *uint64) *AppUserLoginLogUpdateOne {
	if u != nil {
		aulluo.SetAppUserID(*u)
	}
	return aulluo
}

// SetUserID sets the "user_id" field.
func (aulluo *AppUserLoginLogUpdateOne) SetUserID(u uint64) *AppUserLoginLogUpdateOne {
	aulluo.mutation.SetUserID(u)
	return aulluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aulluo *AppUserLoginLogUpdateOne) SetNillableUserID(u *uint64) *AppUserLoginLogUpdateOne {
	if u != nil {
		aulluo.SetUserID(*u)
	}
	return aulluo
}

// SetLoginTypeID sets the "login_type_id" field.
func (aulluo *AppUserLoginLogUpdateOne) SetLoginTypeID(u uint) *AppUserLoginLogUpdateOne {
	aulluo.mutation.ResetLoginTypeID()
	aulluo.mutation.SetLoginTypeID(u)
	return aulluo
}

// SetNillableLoginTypeID sets the "login_type_id" field if the given value is not nil.
func (aulluo *AppUserLoginLogUpdateOne) SetNillableLoginTypeID(u *uint) *AppUserLoginLogUpdateOne {
	if u != nil {
		aulluo.SetLoginTypeID(*u)
	}
	return aulluo
}

// AddLoginTypeID adds u to the "login_type_id" field.
func (aulluo *AppUserLoginLogUpdateOne) AddLoginTypeID(u uint) *AppUserLoginLogUpdateOne {
	aulluo.mutation.AddLoginTypeID(u)
	return aulluo
}

// SetIP sets the "ip" field.
func (aulluo *AppUserLoginLogUpdateOne) SetIP(s string) *AppUserLoginLogUpdateOne {
	aulluo.mutation.SetIP(s)
	return aulluo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (aulluo *AppUserLoginLogUpdateOne) SetNillableIP(s *string) *AppUserLoginLogUpdateOne {
	if s != nil {
		aulluo.SetIP(*s)
	}
	return aulluo
}

// SetContent sets the "content" field.
func (aulluo *AppUserLoginLogUpdateOne) SetContent(s string) *AppUserLoginLogUpdateOne {
	aulluo.mutation.SetContent(s)
	return aulluo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (aulluo *AppUserLoginLogUpdateOne) SetNillableContent(s *string) *AppUserLoginLogUpdateOne {
	if s != nil {
		aulluo.SetContent(*s)
	}
	return aulluo
}

// ClearContent clears the value of the "content" field.
func (aulluo *AppUserLoginLogUpdateOne) ClearContent() *AppUserLoginLogUpdateOne {
	aulluo.mutation.ClearContent()
	return aulluo
}

// SetStatus sets the "status" field.
func (aulluo *AppUserLoginLogUpdateOne) SetStatus(u uint) *AppUserLoginLogUpdateOne {
	aulluo.mutation.ResetStatus()
	aulluo.mutation.SetStatus(u)
	return aulluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aulluo *AppUserLoginLogUpdateOne) SetNillableStatus(u *uint) *AppUserLoginLogUpdateOne {
	if u != nil {
		aulluo.SetStatus(*u)
	}
	return aulluo
}

// AddStatus adds u to the "status" field.
func (aulluo *AppUserLoginLogUpdateOne) AddStatus(u uint) *AppUserLoginLogUpdateOne {
	aulluo.mutation.AddStatus(u)
	return aulluo
}

// SetApp sets the "app" edge to the App entity.
func (aulluo *AppUserLoginLogUpdateOne) SetApp(a *App) *AppUserLoginLogUpdateOne {
	return aulluo.SetAppID(a.ID)
}

// SetAppUser sets the "appUser" edge to the AppUser entity.
func (aulluo *AppUserLoginLogUpdateOne) SetAppUser(a *AppUser) *AppUserLoginLogUpdateOne {
	return aulluo.SetAppUserID(a.ID)
}

// SetUser sets the "user" edge to the User entity.
func (aulluo *AppUserLoginLogUpdateOne) SetUser(u *User) *AppUserLoginLogUpdateOne {
	return aulluo.SetUserID(u.ID)
}

// Mutation returns the AppUserLoginLogMutation object of the builder.
func (aulluo *AppUserLoginLogUpdateOne) Mutation() *AppUserLoginLogMutation {
	return aulluo.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (aulluo *AppUserLoginLogUpdateOne) ClearApp() *AppUserLoginLogUpdateOne {
	aulluo.mutation.ClearApp()
	return aulluo
}

// ClearAppUser clears the "appUser" edge to the AppUser entity.
func (aulluo *AppUserLoginLogUpdateOne) ClearAppUser() *AppUserLoginLogUpdateOne {
	aulluo.mutation.ClearAppUser()
	return aulluo
}

// ClearUser clears the "user" edge to the User entity.
func (aulluo *AppUserLoginLogUpdateOne) ClearUser() *AppUserLoginLogUpdateOne {
	aulluo.mutation.ClearUser()
	return aulluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aulluo *AppUserLoginLogUpdateOne) Select(field string, fields ...string) *AppUserLoginLogUpdateOne {
	aulluo.fields = append([]string{field}, fields...)
	return aulluo
}

// Save executes the query and returns the updated AppUserLoginLog entity.
func (aulluo *AppUserLoginLogUpdateOne) Save(ctx context.Context) (*AppUserLoginLog, error) {
	var (
		err  error
		node *AppUserLoginLog
	)
	if len(aulluo.hooks) == 0 {
		if err = aulluo.check(); err != nil {
			return nil, err
		}
		node, err = aulluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserLoginLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aulluo.check(); err != nil {
				return nil, err
			}
			aulluo.mutation = mutation
			node, err = aulluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aulluo.hooks) - 1; i >= 0; i-- {
			if aulluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aulluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aulluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aulluo *AppUserLoginLogUpdateOne) SaveX(ctx context.Context) *AppUserLoginLog {
	node, err := aulluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aulluo *AppUserLoginLogUpdateOne) Exec(ctx context.Context) error {
	_, err := aulluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aulluo *AppUserLoginLogUpdateOne) ExecX(ctx context.Context) {
	if err := aulluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aulluo *AppUserLoginLogUpdateOne) check() error {
	if v, ok := aulluo.mutation.IP(); ok {
		if err := appuserloginlog.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf("ent: validator failed for field \"ip\": %w", err)}
		}
	}
	if _, ok := aulluo.mutation.AppID(); aulluo.mutation.AppCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"app\"")
	}
	if _, ok := aulluo.mutation.AppUserID(); aulluo.mutation.AppUserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"appUser\"")
	}
	if _, ok := aulluo.mutation.UserID(); aulluo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (aulluo *AppUserLoginLogUpdateOne) sqlSave(ctx context.Context) (_node *AppUserLoginLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appuserloginlog.Table,
			Columns: appuserloginlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: appuserloginlog.FieldID,
			},
		},
	}
	id, ok := aulluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AppUserLoginLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aulluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appuserloginlog.FieldID)
		for _, f := range fields {
			if !appuserloginlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appuserloginlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aulluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aulluo.mutation.LoginTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuserloginlog.FieldLoginTypeID,
		})
	}
	if value, ok := aulluo.mutation.AddedLoginTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuserloginlog.FieldLoginTypeID,
		})
	}
	if value, ok := aulluo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserloginlog.FieldIP,
		})
	}
	if value, ok := aulluo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserloginlog.FieldContent,
		})
	}
	if aulluo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appuserloginlog.FieldContent,
		})
	}
	if value, ok := aulluo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuserloginlog.FieldStatus,
		})
	}
	if value, ok := aulluo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuserloginlog.FieldStatus,
		})
	}
	if aulluo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.AppTable,
			Columns: []string{appuserloginlog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = aulluo.schemaConfig.AppUserLoginLog
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aulluo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.AppTable,
			Columns: []string{appuserloginlog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = aulluo.schemaConfig.AppUserLoginLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aulluo.mutation.AppUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.AppUserTable,
			Columns: []string{appuserloginlog.AppUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appuser.FieldID,
				},
			},
		}
		edge.Schema = aulluo.schemaConfig.AppUserLoginLog
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aulluo.mutation.AppUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.AppUserTable,
			Columns: []string{appuserloginlog.AppUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appuser.FieldID,
				},
			},
		}
		edge.Schema = aulluo.schemaConfig.AppUserLoginLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aulluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.UserTable,
			Columns: []string{appuserloginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = aulluo.schemaConfig.AppUserLoginLog
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aulluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.UserTable,
			Columns: []string{appuserloginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = aulluo.schemaConfig.AppUserLoginLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = aulluo.schemaConfig.AppUserLoginLog
	ctx = internal.NewSchemaConfigContext(ctx, aulluo.schemaConfig)
	_node = &AppUserLoginLog{config: aulluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aulluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuserloginlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
