// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/appuser"
	"github.com/boshangad/v1/ent/appuserloginlog"
	"github.com/boshangad/v1/ent/user"
)

// AppUserLoginLogCreate is the builder for creating a AppUserLoginLog entity.
type AppUserLoginLogCreate struct {
	config
	mutation *AppUserLoginLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (aullc *AppUserLoginLogCreate) SetCreateTime(i int64) *AppUserLoginLogCreate {
	aullc.mutation.SetCreateTime(i)
	return aullc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (aullc *AppUserLoginLogCreate) SetNillableCreateTime(i *int64) *AppUserLoginLogCreate {
	if i != nil {
		aullc.SetCreateTime(*i)
	}
	return aullc
}

// SetAppID sets the "app_id" field.
func (aullc *AppUserLoginLogCreate) SetAppID(u uint64) *AppUserLoginLogCreate {
	aullc.mutation.SetAppID(u)
	return aullc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aullc *AppUserLoginLogCreate) SetNillableAppID(u *uint64) *AppUserLoginLogCreate {
	if u != nil {
		aullc.SetAppID(*u)
	}
	return aullc
}

// SetAppUserID sets the "app_user_id" field.
func (aullc *AppUserLoginLogCreate) SetAppUserID(u uint64) *AppUserLoginLogCreate {
	aullc.mutation.SetAppUserID(u)
	return aullc
}

// SetNillableAppUserID sets the "app_user_id" field if the given value is not nil.
func (aullc *AppUserLoginLogCreate) SetNillableAppUserID(u *uint64) *AppUserLoginLogCreate {
	if u != nil {
		aullc.SetAppUserID(*u)
	}
	return aullc
}

// SetUserID sets the "user_id" field.
func (aullc *AppUserLoginLogCreate) SetUserID(u uint64) *AppUserLoginLogCreate {
	aullc.mutation.SetUserID(u)
	return aullc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aullc *AppUserLoginLogCreate) SetNillableUserID(u *uint64) *AppUserLoginLogCreate {
	if u != nil {
		aullc.SetUserID(*u)
	}
	return aullc
}

// SetLoginTypeID sets the "login_type_id" field.
func (aullc *AppUserLoginLogCreate) SetLoginTypeID(u uint) *AppUserLoginLogCreate {
	aullc.mutation.SetLoginTypeID(u)
	return aullc
}

// SetNillableLoginTypeID sets the "login_type_id" field if the given value is not nil.
func (aullc *AppUserLoginLogCreate) SetNillableLoginTypeID(u *uint) *AppUserLoginLogCreate {
	if u != nil {
		aullc.SetLoginTypeID(*u)
	}
	return aullc
}

// SetIP sets the "ip" field.
func (aullc *AppUserLoginLogCreate) SetIP(s string) *AppUserLoginLogCreate {
	aullc.mutation.SetIP(s)
	return aullc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (aullc *AppUserLoginLogCreate) SetNillableIP(s *string) *AppUserLoginLogCreate {
	if s != nil {
		aullc.SetIP(*s)
	}
	return aullc
}

// SetContent sets the "content" field.
func (aullc *AppUserLoginLogCreate) SetContent(s string) *AppUserLoginLogCreate {
	aullc.mutation.SetContent(s)
	return aullc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (aullc *AppUserLoginLogCreate) SetNillableContent(s *string) *AppUserLoginLogCreate {
	if s != nil {
		aullc.SetContent(*s)
	}
	return aullc
}

// SetStatus sets the "status" field.
func (aullc *AppUserLoginLogCreate) SetStatus(u uint) *AppUserLoginLogCreate {
	aullc.mutation.SetStatus(u)
	return aullc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aullc *AppUserLoginLogCreate) SetNillableStatus(u *uint) *AppUserLoginLogCreate {
	if u != nil {
		aullc.SetStatus(*u)
	}
	return aullc
}

// SetID sets the "id" field.
func (aullc *AppUserLoginLogCreate) SetID(u uint64) *AppUserLoginLogCreate {
	aullc.mutation.SetID(u)
	return aullc
}

// SetApp sets the "app" edge to the App entity.
func (aullc *AppUserLoginLogCreate) SetApp(a *App) *AppUserLoginLogCreate {
	return aullc.SetAppID(a.ID)
}

// SetAppUser sets the "appUser" edge to the AppUser entity.
func (aullc *AppUserLoginLogCreate) SetAppUser(a *AppUser) *AppUserLoginLogCreate {
	return aullc.SetAppUserID(a.ID)
}

// SetUser sets the "user" edge to the User entity.
func (aullc *AppUserLoginLogCreate) SetUser(u *User) *AppUserLoginLogCreate {
	return aullc.SetUserID(u.ID)
}

// Mutation returns the AppUserLoginLogMutation object of the builder.
func (aullc *AppUserLoginLogCreate) Mutation() *AppUserLoginLogMutation {
	return aullc.mutation
}

// Save creates the AppUserLoginLog in the database.
func (aullc *AppUserLoginLogCreate) Save(ctx context.Context) (*AppUserLoginLog, error) {
	var (
		err  error
		node *AppUserLoginLog
	)
	aullc.defaults()
	if len(aullc.hooks) == 0 {
		if err = aullc.check(); err != nil {
			return nil, err
		}
		node, err = aullc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserLoginLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aullc.check(); err != nil {
				return nil, err
			}
			aullc.mutation = mutation
			if node, err = aullc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(aullc.hooks) - 1; i >= 0; i-- {
			if aullc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aullc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aullc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aullc *AppUserLoginLogCreate) SaveX(ctx context.Context) *AppUserLoginLog {
	v, err := aullc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aullc *AppUserLoginLogCreate) Exec(ctx context.Context) error {
	_, err := aullc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aullc *AppUserLoginLogCreate) ExecX(ctx context.Context) {
	if err := aullc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aullc *AppUserLoginLogCreate) defaults() {
	if _, ok := aullc.mutation.CreateTime(); !ok {
		v := appuserloginlog.DefaultCreateTime
		aullc.mutation.SetCreateTime(v)
	}
	if _, ok := aullc.mutation.AppID(); !ok {
		v := appuserloginlog.DefaultAppID
		aullc.mutation.SetAppID(v)
	}
	if _, ok := aullc.mutation.AppUserID(); !ok {
		v := appuserloginlog.DefaultAppUserID
		aullc.mutation.SetAppUserID(v)
	}
	if _, ok := aullc.mutation.UserID(); !ok {
		v := appuserloginlog.DefaultUserID
		aullc.mutation.SetUserID(v)
	}
	if _, ok := aullc.mutation.LoginTypeID(); !ok {
		v := appuserloginlog.DefaultLoginTypeID
		aullc.mutation.SetLoginTypeID(v)
	}
	if _, ok := aullc.mutation.IP(); !ok {
		v := appuserloginlog.DefaultIP
		aullc.mutation.SetIP(v)
	}
	if _, ok := aullc.mutation.Status(); !ok {
		v := appuserloginlog.DefaultStatus
		aullc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aullc *AppUserLoginLogCreate) check() error {
	if _, ok := aullc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := aullc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	if _, ok := aullc.mutation.AppUserID(); !ok {
		return &ValidationError{Name: "app_user_id", err: errors.New(`ent: missing required field "app_user_id"`)}
	}
	if _, ok := aullc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := aullc.mutation.LoginTypeID(); !ok {
		return &ValidationError{Name: "login_type_id", err: errors.New(`ent: missing required field "login_type_id"`)}
	}
	if _, ok := aullc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "ip"`)}
	}
	if v, ok := aullc.mutation.IP(); ok {
		if err := appuserloginlog.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "ip": %w`, err)}
		}
	}
	if _, ok := aullc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if _, ok := aullc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app", err: errors.New("ent: missing required edge \"app\"")}
	}
	if _, ok := aullc.mutation.AppUserID(); !ok {
		return &ValidationError{Name: "appUser", err: errors.New("ent: missing required edge \"appUser\"")}
	}
	if _, ok := aullc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (aullc *AppUserLoginLogCreate) sqlSave(ctx context.Context) (*AppUserLoginLog, error) {
	_node, _spec := aullc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aullc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (aullc *AppUserLoginLogCreate) createSpec() (*AppUserLoginLog, *sqlgraph.CreateSpec) {
	var (
		_node = &AppUserLoginLog{config: aullc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appuserloginlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: appuserloginlog.FieldID,
			},
		}
	)
	_spec.Schema = aullc.schemaConfig.AppUserLoginLog
	_spec.OnConflict = aullc.conflict
	if id, ok := aullc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aullc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appuserloginlog.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := aullc.mutation.LoginTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuserloginlog.FieldLoginTypeID,
		})
		_node.LoginTypeID = value
	}
	if value, ok := aullc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserloginlog.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := aullc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserloginlog.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := aullc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuserloginlog.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := aullc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.AppTable,
			Columns: []string{appuserloginlog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = aullc.schemaConfig.AppUserLoginLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aullc.mutation.AppUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.AppUserTable,
			Columns: []string{appuserloginlog.AppUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appuser.FieldID,
				},
			},
		}
		edge.Schema = aullc.schemaConfig.AppUserLoginLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aullc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuserloginlog.UserTable,
			Columns: []string{appuserloginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = aullc.schemaConfig.AppUserLoginLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppUserLoginLog.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUserLoginLogUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (aullc *AppUserLoginLogCreate) OnConflict(opts ...sql.ConflictOption) *AppUserLoginLogUpsertOne {
	aullc.conflict = opts
	return &AppUserLoginLogUpsertOne{
		create: aullc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppUserLoginLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (aullc *AppUserLoginLogCreate) OnConflictColumns(columns ...string) *AppUserLoginLogUpsertOne {
	aullc.conflict = append(aullc.conflict, sql.ConflictColumns(columns...))
	return &AppUserLoginLogUpsertOne{
		create: aullc,
	}
}

type (
	// AppUserLoginLogUpsertOne is the builder for "upsert"-ing
	//  one AppUserLoginLog node.
	AppUserLoginLogUpsertOne struct {
		create *AppUserLoginLogCreate
	}

	// AppUserLoginLogUpsert is the "OnConflict" setter.
	AppUserLoginLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *AppUserLoginLogUpsert) SetCreateTime(v int64) *AppUserLoginLogUpsert {
	u.Set(appuserloginlog.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AppUserLoginLogUpsert) UpdateCreateTime() *AppUserLoginLogUpsert {
	u.SetExcluded(appuserloginlog.FieldCreateTime)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppUserLoginLogUpsert) SetAppID(v uint64) *AppUserLoginLogUpsert {
	u.Set(appuserloginlog.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserLoginLogUpsert) UpdateAppID() *AppUserLoginLogUpsert {
	u.SetExcluded(appuserloginlog.FieldAppID)
	return u
}

// SetAppUserID sets the "app_user_id" field.
func (u *AppUserLoginLogUpsert) SetAppUserID(v uint64) *AppUserLoginLogUpsert {
	u.Set(appuserloginlog.FieldAppUserID, v)
	return u
}

// UpdateAppUserID sets the "app_user_id" field to the value that was provided on create.
func (u *AppUserLoginLogUpsert) UpdateAppUserID() *AppUserLoginLogUpsert {
	u.SetExcluded(appuserloginlog.FieldAppUserID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *AppUserLoginLogUpsert) SetUserID(v uint64) *AppUserLoginLogUpsert {
	u.Set(appuserloginlog.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserLoginLogUpsert) UpdateUserID() *AppUserLoginLogUpsert {
	u.SetExcluded(appuserloginlog.FieldUserID)
	return u
}

// SetLoginTypeID sets the "login_type_id" field.
func (u *AppUserLoginLogUpsert) SetLoginTypeID(v uint) *AppUserLoginLogUpsert {
	u.Set(appuserloginlog.FieldLoginTypeID, v)
	return u
}

// UpdateLoginTypeID sets the "login_type_id" field to the value that was provided on create.
func (u *AppUserLoginLogUpsert) UpdateLoginTypeID() *AppUserLoginLogUpsert {
	u.SetExcluded(appuserloginlog.FieldLoginTypeID)
	return u
}

// SetIP sets the "ip" field.
func (u *AppUserLoginLogUpsert) SetIP(v string) *AppUserLoginLogUpsert {
	u.Set(appuserloginlog.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AppUserLoginLogUpsert) UpdateIP() *AppUserLoginLogUpsert {
	u.SetExcluded(appuserloginlog.FieldIP)
	return u
}

// SetContent sets the "content" field.
func (u *AppUserLoginLogUpsert) SetContent(v string) *AppUserLoginLogUpsert {
	u.Set(appuserloginlog.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AppUserLoginLogUpsert) UpdateContent() *AppUserLoginLogUpsert {
	u.SetExcluded(appuserloginlog.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *AppUserLoginLogUpsert) ClearContent() *AppUserLoginLogUpsert {
	u.SetNull(appuserloginlog.FieldContent)
	return u
}

// SetStatus sets the "status" field.
func (u *AppUserLoginLogUpsert) SetStatus(v uint) *AppUserLoginLogUpsert {
	u.Set(appuserloginlog.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AppUserLoginLogUpsert) UpdateStatus() *AppUserLoginLogUpsert {
	u.SetExcluded(appuserloginlog.FieldStatus)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppUserLoginLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appuserloginlog.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppUserLoginLogUpsertOne) UpdateNewValues() *AppUserLoginLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appuserloginlog.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppUserLoginLog.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppUserLoginLogUpsertOne) Ignore() *AppUserLoginLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUserLoginLogUpsertOne) DoNothing() *AppUserLoginLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppUserLoginLogCreate.OnConflict
// documentation for more info.
func (u *AppUserLoginLogUpsertOne) Update(set func(*AppUserLoginLogUpsert)) *AppUserLoginLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUserLoginLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *AppUserLoginLogUpsertOne) SetCreateTime(v int64) *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertOne) UpdateCreateTime() *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateCreateTime()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppUserLoginLogUpsertOne) SetAppID(v uint64) *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertOne) UpdateAppID() *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateAppID()
	})
}

// SetAppUserID sets the "app_user_id" field.
func (u *AppUserLoginLogUpsertOne) SetAppUserID(v uint64) *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetAppUserID(v)
	})
}

// UpdateAppUserID sets the "app_user_id" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertOne) UpdateAppUserID() *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateAppUserID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AppUserLoginLogUpsertOne) SetUserID(v uint64) *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertOne) UpdateUserID() *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateUserID()
	})
}

// SetLoginTypeID sets the "login_type_id" field.
func (u *AppUserLoginLogUpsertOne) SetLoginTypeID(v uint) *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetLoginTypeID(v)
	})
}

// UpdateLoginTypeID sets the "login_type_id" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertOne) UpdateLoginTypeID() *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateLoginTypeID()
	})
}

// SetIP sets the "ip" field.
func (u *AppUserLoginLogUpsertOne) SetIP(v string) *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertOne) UpdateIP() *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateIP()
	})
}

// SetContent sets the "content" field.
func (u *AppUserLoginLogUpsertOne) SetContent(v string) *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertOne) UpdateContent() *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *AppUserLoginLogUpsertOne) ClearContent() *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.ClearContent()
	})
}

// SetStatus sets the "status" field.
func (u *AppUserLoginLogUpsertOne) SetStatus(v uint) *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertOne) UpdateStatus() *AppUserLoginLogUpsertOne {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *AppUserLoginLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppUserLoginLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUserLoginLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppUserLoginLogUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppUserLoginLogUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppUserLoginLogCreateBulk is the builder for creating many AppUserLoginLog entities in bulk.
type AppUserLoginLogCreateBulk struct {
	config
	builders []*AppUserLoginLogCreate
	conflict []sql.ConflictOption
}

// Save creates the AppUserLoginLog entities in the database.
func (aullcb *AppUserLoginLogCreateBulk) Save(ctx context.Context) ([]*AppUserLoginLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aullcb.builders))
	nodes := make([]*AppUserLoginLog, len(aullcb.builders))
	mutators := make([]Mutator, len(aullcb.builders))
	for i := range aullcb.builders {
		func(i int, root context.Context) {
			builder := aullcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppUserLoginLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aullcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aullcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aullcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aullcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aullcb *AppUserLoginLogCreateBulk) SaveX(ctx context.Context) []*AppUserLoginLog {
	v, err := aullcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aullcb *AppUserLoginLogCreateBulk) Exec(ctx context.Context) error {
	_, err := aullcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aullcb *AppUserLoginLogCreateBulk) ExecX(ctx context.Context) {
	if err := aullcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppUserLoginLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUserLoginLogUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (aullcb *AppUserLoginLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppUserLoginLogUpsertBulk {
	aullcb.conflict = opts
	return &AppUserLoginLogUpsertBulk{
		create: aullcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppUserLoginLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (aullcb *AppUserLoginLogCreateBulk) OnConflictColumns(columns ...string) *AppUserLoginLogUpsertBulk {
	aullcb.conflict = append(aullcb.conflict, sql.ConflictColumns(columns...))
	return &AppUserLoginLogUpsertBulk{
		create: aullcb,
	}
}

// AppUserLoginLogUpsertBulk is the builder for "upsert"-ing
// a bulk of AppUserLoginLog nodes.
type AppUserLoginLogUpsertBulk struct {
	create *AppUserLoginLogCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppUserLoginLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appuserloginlog.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppUserLoginLogUpsertBulk) UpdateNewValues() *AppUserLoginLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appuserloginlog.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppUserLoginLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppUserLoginLogUpsertBulk) Ignore() *AppUserLoginLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUserLoginLogUpsertBulk) DoNothing() *AppUserLoginLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppUserLoginLogCreateBulk.OnConflict
// documentation for more info.
func (u *AppUserLoginLogUpsertBulk) Update(set func(*AppUserLoginLogUpsert)) *AppUserLoginLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUserLoginLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *AppUserLoginLogUpsertBulk) SetCreateTime(v int64) *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertBulk) UpdateCreateTime() *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateCreateTime()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppUserLoginLogUpsertBulk) SetAppID(v uint64) *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertBulk) UpdateAppID() *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateAppID()
	})
}

// SetAppUserID sets the "app_user_id" field.
func (u *AppUserLoginLogUpsertBulk) SetAppUserID(v uint64) *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetAppUserID(v)
	})
}

// UpdateAppUserID sets the "app_user_id" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertBulk) UpdateAppUserID() *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateAppUserID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AppUserLoginLogUpsertBulk) SetUserID(v uint64) *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertBulk) UpdateUserID() *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateUserID()
	})
}

// SetLoginTypeID sets the "login_type_id" field.
func (u *AppUserLoginLogUpsertBulk) SetLoginTypeID(v uint) *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetLoginTypeID(v)
	})
}

// UpdateLoginTypeID sets the "login_type_id" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertBulk) UpdateLoginTypeID() *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateLoginTypeID()
	})
}

// SetIP sets the "ip" field.
func (u *AppUserLoginLogUpsertBulk) SetIP(v string) *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertBulk) UpdateIP() *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateIP()
	})
}

// SetContent sets the "content" field.
func (u *AppUserLoginLogUpsertBulk) SetContent(v string) *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertBulk) UpdateContent() *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *AppUserLoginLogUpsertBulk) ClearContent() *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.ClearContent()
	})
}

// SetStatus sets the "status" field.
func (u *AppUserLoginLogUpsertBulk) SetStatus(v uint) *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AppUserLoginLogUpsertBulk) UpdateStatus() *AppUserLoginLogUpsertBulk {
	return u.Update(func(s *AppUserLoginLogUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *AppUserLoginLogUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppUserLoginLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppUserLoginLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUserLoginLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
