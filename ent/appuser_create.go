// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/appuser"
	"github.com/boshangad/v1/ent/user"
)

// AppUserCreate is the builder for creating a AppUser entity.
type AppUserCreate struct {
	config
	mutation *AppUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (auc *AppUserCreate) SetCreateTime(i int64) *AppUserCreate {
	auc.mutation.SetCreateTime(i)
	return auc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableCreateTime(i *int64) *AppUserCreate {
	if i != nil {
		auc.SetCreateTime(*i)
	}
	return auc
}

// SetUpdateTime sets the "update_time" field.
func (auc *AppUserCreate) SetUpdateTime(i int64) *AppUserCreate {
	auc.mutation.SetUpdateTime(i)
	return auc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableUpdateTime(i *int64) *AppUserCreate {
	if i != nil {
		auc.SetUpdateTime(*i)
	}
	return auc
}

// SetAppID sets the "app_id" field.
func (auc *AppUserCreate) SetAppID(u uint64) *AppUserCreate {
	auc.mutation.SetAppID(u)
	return auc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableAppID(u *uint64) *AppUserCreate {
	if u != nil {
		auc.SetAppID(*u)
	}
	return auc
}

// SetUserID sets the "user_id" field.
func (auc *AppUserCreate) SetUserID(u uint64) *AppUserCreate {
	auc.mutation.SetUserID(u)
	return auc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableUserID(u *uint64) *AppUserCreate {
	if u != nil {
		auc.SetUserID(*u)
	}
	return auc
}

// SetOpenID sets the "open_id" field.
func (auc *AppUserCreate) SetOpenID(s string) *AppUserCreate {
	auc.mutation.SetOpenID(s)
	return auc
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableOpenID(s *string) *AppUserCreate {
	if s != nil {
		auc.SetOpenID(*s)
	}
	return auc
}

// SetUnionid sets the "unionid" field.
func (auc *AppUserCreate) SetUnionid(s string) *AppUserCreate {
	auc.mutation.SetUnionid(s)
	return auc
}

// SetNillableUnionid sets the "unionid" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableUnionid(s *string) *AppUserCreate {
	if s != nil {
		auc.SetUnionid(*s)
	}
	return auc
}

// SetSessionKey sets the "session_key" field.
func (auc *AppUserCreate) SetSessionKey(s string) *AppUserCreate {
	auc.mutation.SetSessionKey(s)
	return auc
}

// SetNillableSessionKey sets the "session_key" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableSessionKey(s *string) *AppUserCreate {
	if s != nil {
		auc.SetSessionKey(*s)
	}
	return auc
}

// SetIsLoadUserProfile sets the "is_load_user_profile" field.
func (auc *AppUserCreate) SetIsLoadUserProfile(b bool) *AppUserCreate {
	auc.mutation.SetIsLoadUserProfile(b)
	return auc
}

// SetNillableIsLoadUserProfile sets the "is_load_user_profile" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableIsLoadUserProfile(b *bool) *AppUserCreate {
	if b != nil {
		auc.SetIsLoadUserProfile(*b)
	}
	return auc
}

// SetNickname sets the "nickname" field.
func (auc *AppUserCreate) SetNickname(s string) *AppUserCreate {
	auc.mutation.SetNickname(s)
	return auc
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableNickname(s *string) *AppUserCreate {
	if s != nil {
		auc.SetNickname(*s)
	}
	return auc
}

// SetAvatar sets the "avatar" field.
func (auc *AppUserCreate) SetAvatar(s string) *AppUserCreate {
	auc.mutation.SetAvatar(s)
	return auc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableAvatar(s *string) *AppUserCreate {
	if s != nil {
		auc.SetAvatar(*s)
	}
	return auc
}

// SetAvatarURL sets the "avatar_url" field.
func (auc *AppUserCreate) SetAvatarURL(s string) *AppUserCreate {
	auc.mutation.SetAvatarURL(s)
	return auc
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableAvatarURL(s *string) *AppUserCreate {
	if s != nil {
		auc.SetAvatarURL(*s)
	}
	return auc
}

// SetGender sets the "gender" field.
func (auc *AppUserCreate) SetGender(u uint) *AppUserCreate {
	auc.mutation.SetGender(u)
	return auc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableGender(u *uint) *AppUserCreate {
	if u != nil {
		auc.SetGender(*u)
	}
	return auc
}

// SetCounty sets the "county" field.
func (auc *AppUserCreate) SetCounty(s string) *AppUserCreate {
	auc.mutation.SetCounty(s)
	return auc
}

// SetNillableCounty sets the "county" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableCounty(s *string) *AppUserCreate {
	if s != nil {
		auc.SetCounty(*s)
	}
	return auc
}

// SetCountryCode sets the "country_code" field.
func (auc *AppUserCreate) SetCountryCode(s string) *AppUserCreate {
	auc.mutation.SetCountryCode(s)
	return auc
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableCountryCode(s *string) *AppUserCreate {
	if s != nil {
		auc.SetCountryCode(*s)
	}
	return auc
}

// SetProvince sets the "province" field.
func (auc *AppUserCreate) SetProvince(s string) *AppUserCreate {
	auc.mutation.SetProvince(s)
	return auc
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableProvince(s *string) *AppUserCreate {
	if s != nil {
		auc.SetProvince(*s)
	}
	return auc
}

// SetCity sets the "city" field.
func (auc *AppUserCreate) SetCity(s string) *AppUserCreate {
	auc.mutation.SetCity(s)
	return auc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableCity(s *string) *AppUserCreate {
	if s != nil {
		auc.SetCity(*s)
	}
	return auc
}

// SetLanguage sets the "language" field.
func (auc *AppUserCreate) SetLanguage(s string) *AppUserCreate {
	auc.mutation.SetLanguage(s)
	return auc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableLanguage(s *string) *AppUserCreate {
	if s != nil {
		auc.SetLanguage(*s)
	}
	return auc
}

// SetPhoneNumber sets the "phone_number" field.
func (auc *AppUserCreate) SetPhoneNumber(s string) *AppUserCreate {
	auc.mutation.SetPhoneNumber(s)
	return auc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (auc *AppUserCreate) SetNillablePhoneNumber(s *string) *AppUserCreate {
	if s != nil {
		auc.SetPhoneNumber(*s)
	}
	return auc
}

// SetPurePhoneNumber sets the "pure_phone_number" field.
func (auc *AppUserCreate) SetPurePhoneNumber(s string) *AppUserCreate {
	auc.mutation.SetPurePhoneNumber(s)
	return auc
}

// SetNillablePurePhoneNumber sets the "pure_phone_number" field if the given value is not nil.
func (auc *AppUserCreate) SetNillablePurePhoneNumber(s *string) *AppUserCreate {
	if s != nil {
		auc.SetPurePhoneNumber(*s)
	}
	return auc
}

// SetWatermark sets the "watermark" field.
func (auc *AppUserCreate) SetWatermark(s string) *AppUserCreate {
	auc.mutation.SetWatermark(s)
	return auc
}

// SetNillableWatermark sets the "watermark" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableWatermark(s *string) *AppUserCreate {
	if s != nil {
		auc.SetWatermark(*s)
	}
	return auc
}

// SetLoadUserProfileTime sets the "load_user_profile_time" field.
func (auc *AppUserCreate) SetLoadUserProfileTime(u uint64) *AppUserCreate {
	auc.mutation.SetLoadUserProfileTime(u)
	return auc
}

// SetNillableLoadUserProfileTime sets the "load_user_profile_time" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableLoadUserProfileTime(u *uint64) *AppUserCreate {
	if u != nil {
		auc.SetLoadUserProfileTime(*u)
	}
	return auc
}

// SetLastLoginTime sets the "last_login_time" field.
func (auc *AppUserCreate) SetLastLoginTime(u uint64) *AppUserCreate {
	auc.mutation.SetLastLoginTime(u)
	return auc
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableLastLoginTime(u *uint64) *AppUserCreate {
	if u != nil {
		auc.SetLastLoginTime(*u)
	}
	return auc
}

// SetID sets the "id" field.
func (auc *AppUserCreate) SetID(u uint64) *AppUserCreate {
	auc.mutation.SetID(u)
	return auc
}

// SetApp sets the "app" edge to the App entity.
func (auc *AppUserCreate) SetApp(a *App) *AppUserCreate {
	return auc.SetAppID(a.ID)
}

// SetUser sets the "user" edge to the User entity.
func (auc *AppUserCreate) SetUser(u *User) *AppUserCreate {
	return auc.SetUserID(u.ID)
}

// Mutation returns the AppUserMutation object of the builder.
func (auc *AppUserCreate) Mutation() *AppUserMutation {
	return auc.mutation
}

// Save creates the AppUser in the database.
func (auc *AppUserCreate) Save(ctx context.Context) (*AppUser, error) {
	var (
		err  error
		node *AppUser
	)
	auc.defaults()
	if len(auc.hooks) == 0 {
		if err = auc.check(); err != nil {
			return nil, err
		}
		node, err = auc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auc.check(); err != nil {
				return nil, err
			}
			auc.mutation = mutation
			if node, err = auc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(auc.hooks) - 1; i >= 0; i-- {
			if auc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (auc *AppUserCreate) SaveX(ctx context.Context) *AppUser {
	v, err := auc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (auc *AppUserCreate) Exec(ctx context.Context) error {
	_, err := auc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auc *AppUserCreate) ExecX(ctx context.Context) {
	if err := auc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auc *AppUserCreate) defaults() {
	if _, ok := auc.mutation.CreateTime(); !ok {
		v := appuser.DefaultCreateTime
		auc.mutation.SetCreateTime(v)
	}
	if _, ok := auc.mutation.UpdateTime(); !ok {
		v := appuser.DefaultUpdateTime
		auc.mutation.SetUpdateTime(v)
	}
	if _, ok := auc.mutation.AppID(); !ok {
		v := appuser.DefaultAppID
		auc.mutation.SetAppID(v)
	}
	if _, ok := auc.mutation.UserID(); !ok {
		v := appuser.DefaultUserID
		auc.mutation.SetUserID(v)
	}
	if _, ok := auc.mutation.OpenID(); !ok {
		v := appuser.DefaultOpenID
		auc.mutation.SetOpenID(v)
	}
	if _, ok := auc.mutation.Unionid(); !ok {
		v := appuser.DefaultUnionid
		auc.mutation.SetUnionid(v)
	}
	if _, ok := auc.mutation.SessionKey(); !ok {
		v := appuser.DefaultSessionKey
		auc.mutation.SetSessionKey(v)
	}
	if _, ok := auc.mutation.IsLoadUserProfile(); !ok {
		v := appuser.DefaultIsLoadUserProfile
		auc.mutation.SetIsLoadUserProfile(v)
	}
	if _, ok := auc.mutation.Nickname(); !ok {
		v := appuser.DefaultNickname
		auc.mutation.SetNickname(v)
	}
	if _, ok := auc.mutation.Avatar(); !ok {
		v := appuser.DefaultAvatar
		auc.mutation.SetAvatar(v)
	}
	if _, ok := auc.mutation.AvatarURL(); !ok {
		v := appuser.DefaultAvatarURL
		auc.mutation.SetAvatarURL(v)
	}
	if _, ok := auc.mutation.Gender(); !ok {
		v := appuser.DefaultGender
		auc.mutation.SetGender(v)
	}
	if _, ok := auc.mutation.County(); !ok {
		v := appuser.DefaultCounty
		auc.mutation.SetCounty(v)
	}
	if _, ok := auc.mutation.CountryCode(); !ok {
		v := appuser.DefaultCountryCode
		auc.mutation.SetCountryCode(v)
	}
	if _, ok := auc.mutation.Province(); !ok {
		v := appuser.DefaultProvince
		auc.mutation.SetProvince(v)
	}
	if _, ok := auc.mutation.City(); !ok {
		v := appuser.DefaultCity
		auc.mutation.SetCity(v)
	}
	if _, ok := auc.mutation.Language(); !ok {
		v := appuser.DefaultLanguage
		auc.mutation.SetLanguage(v)
	}
	if _, ok := auc.mutation.PhoneNumber(); !ok {
		v := appuser.DefaultPhoneNumber
		auc.mutation.SetPhoneNumber(v)
	}
	if _, ok := auc.mutation.PurePhoneNumber(); !ok {
		v := appuser.DefaultPurePhoneNumber
		auc.mutation.SetPurePhoneNumber(v)
	}
	if _, ok := auc.mutation.Watermark(); !ok {
		v := appuser.DefaultWatermark
		auc.mutation.SetWatermark(v)
	}
	if _, ok := auc.mutation.LoadUserProfileTime(); !ok {
		v := appuser.DefaultLoadUserProfileTime
		auc.mutation.SetLoadUserProfileTime(v)
	}
	if _, ok := auc.mutation.LastLoginTime(); !ok {
		v := appuser.DefaultLastLoginTime
		auc.mutation.SetLastLoginTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auc *AppUserCreate) check() error {
	if _, ok := auc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := auc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "update_time"`)}
	}
	if _, ok := auc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	if _, ok := auc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := auc.mutation.OpenID(); !ok {
		return &ValidationError{Name: "open_id", err: errors.New(`ent: missing required field "open_id"`)}
	}
	if v, ok := auc.mutation.OpenID(); ok {
		if err := appuser.OpenIDValidator(v); err != nil {
			return &ValidationError{Name: "open_id", err: fmt.Errorf(`ent: validator failed for field "open_id": %w`, err)}
		}
	}
	if _, ok := auc.mutation.Unionid(); !ok {
		return &ValidationError{Name: "unionid", err: errors.New(`ent: missing required field "unionid"`)}
	}
	if v, ok := auc.mutation.Unionid(); ok {
		if err := appuser.UnionidValidator(v); err != nil {
			return &ValidationError{Name: "unionid", err: fmt.Errorf(`ent: validator failed for field "unionid": %w`, err)}
		}
	}
	if _, ok := auc.mutation.SessionKey(); !ok {
		return &ValidationError{Name: "session_key", err: errors.New(`ent: missing required field "session_key"`)}
	}
	if v, ok := auc.mutation.SessionKey(); ok {
		if err := appuser.SessionKeyValidator(v); err != nil {
			return &ValidationError{Name: "session_key", err: fmt.Errorf(`ent: validator failed for field "session_key": %w`, err)}
		}
	}
	if _, ok := auc.mutation.IsLoadUserProfile(); !ok {
		return &ValidationError{Name: "is_load_user_profile", err: errors.New(`ent: missing required field "is_load_user_profile"`)}
	}
	if _, ok := auc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "nickname"`)}
	}
	if v, ok := auc.mutation.Nickname(); ok {
		if err := appuser.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "nickname": %w`, err)}
		}
	}
	if _, ok := auc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "avatar"`)}
	}
	if v, ok := auc.mutation.Avatar(); ok {
		if err := appuser.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`ent: validator failed for field "avatar": %w`, err)}
		}
	}
	if _, ok := auc.mutation.AvatarURL(); !ok {
		return &ValidationError{Name: "avatar_url", err: errors.New(`ent: missing required field "avatar_url"`)}
	}
	if v, ok := auc.mutation.AvatarURL(); ok {
		if err := appuser.AvatarURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_url", err: fmt.Errorf(`ent: validator failed for field "avatar_url": %w`, err)}
		}
	}
	if _, ok := auc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "gender"`)}
	}
	if v, ok := auc.mutation.Gender(); ok {
		if err := appuser.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "gender": %w`, err)}
		}
	}
	if _, ok := auc.mutation.County(); !ok {
		return &ValidationError{Name: "county", err: errors.New(`ent: missing required field "county"`)}
	}
	if v, ok := auc.mutation.County(); ok {
		if err := appuser.CountyValidator(v); err != nil {
			return &ValidationError{Name: "county", err: fmt.Errorf(`ent: validator failed for field "county": %w`, err)}
		}
	}
	if _, ok := auc.mutation.CountryCode(); !ok {
		return &ValidationError{Name: "country_code", err: errors.New(`ent: missing required field "country_code"`)}
	}
	if v, ok := auc.mutation.CountryCode(); ok {
		if err := appuser.CountryCodeValidator(v); err != nil {
			return &ValidationError{Name: "country_code", err: fmt.Errorf(`ent: validator failed for field "country_code": %w`, err)}
		}
	}
	if _, ok := auc.mutation.Province(); !ok {
		return &ValidationError{Name: "province", err: errors.New(`ent: missing required field "province"`)}
	}
	if v, ok := auc.mutation.Province(); ok {
		if err := appuser.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "province", err: fmt.Errorf(`ent: validator failed for field "province": %w`, err)}
		}
	}
	if _, ok := auc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "city"`)}
	}
	if v, ok := auc.mutation.City(); ok {
		if err := appuser.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "city": %w`, err)}
		}
	}
	if _, ok := auc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "language"`)}
	}
	if v, ok := auc.mutation.Language(); ok {
		if err := appuser.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "language": %w`, err)}
		}
	}
	if _, ok := auc.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "phone_number"`)}
	}
	if v, ok := auc.mutation.PhoneNumber(); ok {
		if err := appuser.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "phone_number": %w`, err)}
		}
	}
	if _, ok := auc.mutation.PurePhoneNumber(); !ok {
		return &ValidationError{Name: "pure_phone_number", err: errors.New(`ent: missing required field "pure_phone_number"`)}
	}
	if v, ok := auc.mutation.PurePhoneNumber(); ok {
		if err := appuser.PurePhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "pure_phone_number", err: fmt.Errorf(`ent: validator failed for field "pure_phone_number": %w`, err)}
		}
	}
	if _, ok := auc.mutation.Watermark(); !ok {
		return &ValidationError{Name: "watermark", err: errors.New(`ent: missing required field "watermark"`)}
	}
	if v, ok := auc.mutation.Watermark(); ok {
		if err := appuser.WatermarkValidator(v); err != nil {
			return &ValidationError{Name: "watermark", err: fmt.Errorf(`ent: validator failed for field "watermark": %w`, err)}
		}
	}
	if _, ok := auc.mutation.LoadUserProfileTime(); !ok {
		return &ValidationError{Name: "load_user_profile_time", err: errors.New(`ent: missing required field "load_user_profile_time"`)}
	}
	if _, ok := auc.mutation.LastLoginTime(); !ok {
		return &ValidationError{Name: "last_login_time", err: errors.New(`ent: missing required field "last_login_time"`)}
	}
	if _, ok := auc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app", err: errors.New("ent: missing required edge \"app\"")}
	}
	if _, ok := auc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (auc *AppUserCreate) sqlSave(ctx context.Context) (*AppUser, error) {
	_node, _spec := auc.createSpec()
	if err := sqlgraph.CreateNode(ctx, auc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (auc *AppUserCreate) createSpec() (*AppUser, *sqlgraph.CreateSpec) {
	var (
		_node = &AppUser{config: auc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: appuser.FieldID,
			},
		}
	)
	_spec.Schema = auc.schemaConfig.AppUser
	_spec.OnConflict = auc.conflict
	if id, ok := auc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := auc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appuser.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := auc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appuser.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := auc.mutation.OpenID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldOpenID,
		})
		_node.OpenID = value
	}
	if value, ok := auc.mutation.Unionid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldUnionid,
		})
		_node.Unionid = value
	}
	if value, ok := auc.mutation.SessionKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldSessionKey,
		})
		_node.SessionKey = value
	}
	if value, ok := auc.mutation.IsLoadUserProfile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appuser.FieldIsLoadUserProfile,
		})
		_node.IsLoadUserProfile = value
	}
	if value, ok := auc.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldNickname,
		})
		_node.Nickname = value
	}
	if value, ok := auc.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := auc.mutation.AvatarURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldAvatarURL,
		})
		_node.AvatarURL = value
	}
	if value, ok := auc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuser.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := auc.mutation.County(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldCounty,
		})
		_node.County = value
	}
	if value, ok := auc.mutation.CountryCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldCountryCode,
		})
		_node.CountryCode = value
	}
	if value, ok := auc.mutation.Province(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldProvince,
		})
		_node.Province = value
	}
	if value, ok := auc.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldCity,
		})
		_node.City = value
	}
	if value, ok := auc.mutation.Language(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldLanguage,
		})
		_node.Language = value
	}
	if value, ok := auc.mutation.PhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldPhoneNumber,
		})
		_node.PhoneNumber = value
	}
	if value, ok := auc.mutation.PurePhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldPurePhoneNumber,
		})
		_node.PurePhoneNumber = value
	}
	if value, ok := auc.mutation.Watermark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldWatermark,
		})
		_node.Watermark = value
	}
	if value, ok := auc.mutation.LoadUserProfileTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuser.FieldLoadUserProfileTime,
		})
		_node.LoadUserProfileTime = value
	}
	if value, ok := auc.mutation.LastLoginTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuser.FieldLastLoginTime,
		})
		_node.LastLoginTime = value
	}
	if nodes := auc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppTable,
			Columns: []string{appuser.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = auc.schemaConfig.AppUser
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.UserTable,
			Columns: []string{appuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = auc.schemaConfig.AppUser
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppUser.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUserUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (auc *AppUserCreate) OnConflict(opts ...sql.ConflictOption) *AppUserUpsertOne {
	auc.conflict = opts
	return &AppUserUpsertOne{
		create: auc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (auc *AppUserCreate) OnConflictColumns(columns ...string) *AppUserUpsertOne {
	auc.conflict = append(auc.conflict, sql.ConflictColumns(columns...))
	return &AppUserUpsertOne{
		create: auc,
	}
}

type (
	// AppUserUpsertOne is the builder for "upsert"-ing
	//  one AppUser node.
	AppUserUpsertOne struct {
		create *AppUserCreate
	}

	// AppUserUpsert is the "OnConflict" setter.
	AppUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *AppUserUpsert) SetCreateTime(v int64) *AppUserUpsert {
	u.Set(appuser.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateCreateTime() *AppUserUpsert {
	u.SetExcluded(appuser.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AppUserUpsert) SetUpdateTime(v int64) *AppUserUpsert {
	u.Set(appuser.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateUpdateTime() *AppUserUpsert {
	u.SetExcluded(appuser.FieldUpdateTime)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppUserUpsert) SetAppID(v uint64) *AppUserUpsert {
	u.Set(appuser.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateAppID() *AppUserUpsert {
	u.SetExcluded(appuser.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *AppUserUpsert) SetUserID(v uint64) *AppUserUpsert {
	u.Set(appuser.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateUserID() *AppUserUpsert {
	u.SetExcluded(appuser.FieldUserID)
	return u
}

// SetOpenID sets the "open_id" field.
func (u *AppUserUpsert) SetOpenID(v string) *AppUserUpsert {
	u.Set(appuser.FieldOpenID, v)
	return u
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateOpenID() *AppUserUpsert {
	u.SetExcluded(appuser.FieldOpenID)
	return u
}

// SetUnionid sets the "unionid" field.
func (u *AppUserUpsert) SetUnionid(v string) *AppUserUpsert {
	u.Set(appuser.FieldUnionid, v)
	return u
}

// UpdateUnionid sets the "unionid" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateUnionid() *AppUserUpsert {
	u.SetExcluded(appuser.FieldUnionid)
	return u
}

// SetSessionKey sets the "session_key" field.
func (u *AppUserUpsert) SetSessionKey(v string) *AppUserUpsert {
	u.Set(appuser.FieldSessionKey, v)
	return u
}

// UpdateSessionKey sets the "session_key" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateSessionKey() *AppUserUpsert {
	u.SetExcluded(appuser.FieldSessionKey)
	return u
}

// SetIsLoadUserProfile sets the "is_load_user_profile" field.
func (u *AppUserUpsert) SetIsLoadUserProfile(v bool) *AppUserUpsert {
	u.Set(appuser.FieldIsLoadUserProfile, v)
	return u
}

// UpdateIsLoadUserProfile sets the "is_load_user_profile" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateIsLoadUserProfile() *AppUserUpsert {
	u.SetExcluded(appuser.FieldIsLoadUserProfile)
	return u
}

// SetNickname sets the "nickname" field.
func (u *AppUserUpsert) SetNickname(v string) *AppUserUpsert {
	u.Set(appuser.FieldNickname, v)
	return u
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateNickname() *AppUserUpsert {
	u.SetExcluded(appuser.FieldNickname)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *AppUserUpsert) SetAvatar(v string) *AppUserUpsert {
	u.Set(appuser.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateAvatar() *AppUserUpsert {
	u.SetExcluded(appuser.FieldAvatar)
	return u
}

// SetAvatarURL sets the "avatar_url" field.
func (u *AppUserUpsert) SetAvatarURL(v string) *AppUserUpsert {
	u.Set(appuser.FieldAvatarURL, v)
	return u
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateAvatarURL() *AppUserUpsert {
	u.SetExcluded(appuser.FieldAvatarURL)
	return u
}

// SetGender sets the "gender" field.
func (u *AppUserUpsert) SetGender(v uint) *AppUserUpsert {
	u.Set(appuser.FieldGender, v)
	return u
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateGender() *AppUserUpsert {
	u.SetExcluded(appuser.FieldGender)
	return u
}

// SetCounty sets the "county" field.
func (u *AppUserUpsert) SetCounty(v string) *AppUserUpsert {
	u.Set(appuser.FieldCounty, v)
	return u
}

// UpdateCounty sets the "county" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateCounty() *AppUserUpsert {
	u.SetExcluded(appuser.FieldCounty)
	return u
}

// SetCountryCode sets the "country_code" field.
func (u *AppUserUpsert) SetCountryCode(v string) *AppUserUpsert {
	u.Set(appuser.FieldCountryCode, v)
	return u
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateCountryCode() *AppUserUpsert {
	u.SetExcluded(appuser.FieldCountryCode)
	return u
}

// SetProvince sets the "province" field.
func (u *AppUserUpsert) SetProvince(v string) *AppUserUpsert {
	u.Set(appuser.FieldProvince, v)
	return u
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateProvince() *AppUserUpsert {
	u.SetExcluded(appuser.FieldProvince)
	return u
}

// SetCity sets the "city" field.
func (u *AppUserUpsert) SetCity(v string) *AppUserUpsert {
	u.Set(appuser.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateCity() *AppUserUpsert {
	u.SetExcluded(appuser.FieldCity)
	return u
}

// SetLanguage sets the "language" field.
func (u *AppUserUpsert) SetLanguage(v string) *AppUserUpsert {
	u.Set(appuser.FieldLanguage, v)
	return u
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateLanguage() *AppUserUpsert {
	u.SetExcluded(appuser.FieldLanguage)
	return u
}

// SetPhoneNumber sets the "phone_number" field.
func (u *AppUserUpsert) SetPhoneNumber(v string) *AppUserUpsert {
	u.Set(appuser.FieldPhoneNumber, v)
	return u
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *AppUserUpsert) UpdatePhoneNumber() *AppUserUpsert {
	u.SetExcluded(appuser.FieldPhoneNumber)
	return u
}

// SetPurePhoneNumber sets the "pure_phone_number" field.
func (u *AppUserUpsert) SetPurePhoneNumber(v string) *AppUserUpsert {
	u.Set(appuser.FieldPurePhoneNumber, v)
	return u
}

// UpdatePurePhoneNumber sets the "pure_phone_number" field to the value that was provided on create.
func (u *AppUserUpsert) UpdatePurePhoneNumber() *AppUserUpsert {
	u.SetExcluded(appuser.FieldPurePhoneNumber)
	return u
}

// SetWatermark sets the "watermark" field.
func (u *AppUserUpsert) SetWatermark(v string) *AppUserUpsert {
	u.Set(appuser.FieldWatermark, v)
	return u
}

// UpdateWatermark sets the "watermark" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateWatermark() *AppUserUpsert {
	u.SetExcluded(appuser.FieldWatermark)
	return u
}

// SetLoadUserProfileTime sets the "load_user_profile_time" field.
func (u *AppUserUpsert) SetLoadUserProfileTime(v uint64) *AppUserUpsert {
	u.Set(appuser.FieldLoadUserProfileTime, v)
	return u
}

// UpdateLoadUserProfileTime sets the "load_user_profile_time" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateLoadUserProfileTime() *AppUserUpsert {
	u.SetExcluded(appuser.FieldLoadUserProfileTime)
	return u
}

// SetLastLoginTime sets the "last_login_time" field.
func (u *AppUserUpsert) SetLastLoginTime(v uint64) *AppUserUpsert {
	u.Set(appuser.FieldLastLoginTime, v)
	return u
}

// UpdateLastLoginTime sets the "last_login_time" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateLastLoginTime() *AppUserUpsert {
	u.SetExcluded(appuser.FieldLastLoginTime)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appuser.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppUserUpsertOne) UpdateNewValues() *AppUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appuser.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppUser.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppUserUpsertOne) Ignore() *AppUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUserUpsertOne) DoNothing() *AppUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppUserCreate.OnConflict
// documentation for more info.
func (u *AppUserUpsertOne) Update(set func(*AppUserUpsert)) *AppUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *AppUserUpsertOne) SetCreateTime(v int64) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateCreateTime() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *AppUserUpsertOne) SetUpdateTime(v int64) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateUpdateTime() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppUserUpsertOne) SetAppID(v uint64) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateAppID() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AppUserUpsertOne) SetUserID(v uint64) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateUserID() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateUserID()
	})
}

// SetOpenID sets the "open_id" field.
func (u *AppUserUpsertOne) SetOpenID(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetOpenID(v)
	})
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateOpenID() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateOpenID()
	})
}

// SetUnionid sets the "unionid" field.
func (u *AppUserUpsertOne) SetUnionid(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetUnionid(v)
	})
}

// UpdateUnionid sets the "unionid" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateUnionid() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateUnionid()
	})
}

// SetSessionKey sets the "session_key" field.
func (u *AppUserUpsertOne) SetSessionKey(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetSessionKey(v)
	})
}

// UpdateSessionKey sets the "session_key" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateSessionKey() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateSessionKey()
	})
}

// SetIsLoadUserProfile sets the "is_load_user_profile" field.
func (u *AppUserUpsertOne) SetIsLoadUserProfile(v bool) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetIsLoadUserProfile(v)
	})
}

// UpdateIsLoadUserProfile sets the "is_load_user_profile" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateIsLoadUserProfile() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateIsLoadUserProfile()
	})
}

// SetNickname sets the "nickname" field.
func (u *AppUserUpsertOne) SetNickname(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateNickname() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateNickname()
	})
}

// SetAvatar sets the "avatar" field.
func (u *AppUserUpsertOne) SetAvatar(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateAvatar() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateAvatar()
	})
}

// SetAvatarURL sets the "avatar_url" field.
func (u *AppUserUpsertOne) SetAvatarURL(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetAvatarURL(v)
	})
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateAvatarURL() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateAvatarURL()
	})
}

// SetGender sets the "gender" field.
func (u *AppUserUpsertOne) SetGender(v uint) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateGender() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateGender()
	})
}

// SetCounty sets the "county" field.
func (u *AppUserUpsertOne) SetCounty(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetCounty(v)
	})
}

// UpdateCounty sets the "county" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateCounty() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateCounty()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *AppUserUpsertOne) SetCountryCode(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateCountryCode() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateCountryCode()
	})
}

// SetProvince sets the "province" field.
func (u *AppUserUpsertOne) SetProvince(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetProvince(v)
	})
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateProvince() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateProvince()
	})
}

// SetCity sets the "city" field.
func (u *AppUserUpsertOne) SetCity(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateCity() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateCity()
	})
}

// SetLanguage sets the "language" field.
func (u *AppUserUpsertOne) SetLanguage(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateLanguage() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateLanguage()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *AppUserUpsertOne) SetPhoneNumber(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdatePhoneNumber() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdatePhoneNumber()
	})
}

// SetPurePhoneNumber sets the "pure_phone_number" field.
func (u *AppUserUpsertOne) SetPurePhoneNumber(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetPurePhoneNumber(v)
	})
}

// UpdatePurePhoneNumber sets the "pure_phone_number" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdatePurePhoneNumber() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdatePurePhoneNumber()
	})
}

// SetWatermark sets the "watermark" field.
func (u *AppUserUpsertOne) SetWatermark(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetWatermark(v)
	})
}

// UpdateWatermark sets the "watermark" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateWatermark() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateWatermark()
	})
}

// SetLoadUserProfileTime sets the "load_user_profile_time" field.
func (u *AppUserUpsertOne) SetLoadUserProfileTime(v uint64) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetLoadUserProfileTime(v)
	})
}

// UpdateLoadUserProfileTime sets the "load_user_profile_time" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateLoadUserProfileTime() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateLoadUserProfileTime()
	})
}

// SetLastLoginTime sets the "last_login_time" field.
func (u *AppUserUpsertOne) SetLastLoginTime(v uint64) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetLastLoginTime(v)
	})
}

// UpdateLastLoginTime sets the "last_login_time" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateLastLoginTime() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateLastLoginTime()
	})
}

// Exec executes the query.
func (u *AppUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppUserUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppUserUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppUserCreateBulk is the builder for creating many AppUser entities in bulk.
type AppUserCreateBulk struct {
	config
	builders []*AppUserCreate
	conflict []sql.ConflictOption
}

// Save creates the AppUser entities in the database.
func (aucb *AppUserCreateBulk) Save(ctx context.Context) ([]*AppUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aucb.builders))
	nodes := make([]*AppUser, len(aucb.builders))
	mutators := make([]Mutator, len(aucb.builders))
	for i := range aucb.builders {
		func(i int, root context.Context) {
			builder := aucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aucb *AppUserCreateBulk) SaveX(ctx context.Context) []*AppUser {
	v, err := aucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aucb *AppUserCreateBulk) Exec(ctx context.Context) error {
	_, err := aucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aucb *AppUserCreateBulk) ExecX(ctx context.Context) {
	if err := aucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUserUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (aucb *AppUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppUserUpsertBulk {
	aucb.conflict = opts
	return &AppUserUpsertBulk{
		create: aucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (aucb *AppUserCreateBulk) OnConflictColumns(columns ...string) *AppUserUpsertBulk {
	aucb.conflict = append(aucb.conflict, sql.ConflictColumns(columns...))
	return &AppUserUpsertBulk{
		create: aucb,
	}
}

// AppUserUpsertBulk is the builder for "upsert"-ing
// a bulk of AppUser nodes.
type AppUserUpsertBulk struct {
	create *AppUserCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appuser.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppUserUpsertBulk) UpdateNewValues() *AppUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appuser.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppUserUpsertBulk) Ignore() *AppUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUserUpsertBulk) DoNothing() *AppUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppUserCreateBulk.OnConflict
// documentation for more info.
func (u *AppUserUpsertBulk) Update(set func(*AppUserUpsert)) *AppUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *AppUserUpsertBulk) SetCreateTime(v int64) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateCreateTime() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *AppUserUpsertBulk) SetUpdateTime(v int64) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateUpdateTime() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppUserUpsertBulk) SetAppID(v uint64) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateAppID() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AppUserUpsertBulk) SetUserID(v uint64) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateUserID() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateUserID()
	})
}

// SetOpenID sets the "open_id" field.
func (u *AppUserUpsertBulk) SetOpenID(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetOpenID(v)
	})
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateOpenID() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateOpenID()
	})
}

// SetUnionid sets the "unionid" field.
func (u *AppUserUpsertBulk) SetUnionid(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetUnionid(v)
	})
}

// UpdateUnionid sets the "unionid" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateUnionid() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateUnionid()
	})
}

// SetSessionKey sets the "session_key" field.
func (u *AppUserUpsertBulk) SetSessionKey(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetSessionKey(v)
	})
}

// UpdateSessionKey sets the "session_key" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateSessionKey() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateSessionKey()
	})
}

// SetIsLoadUserProfile sets the "is_load_user_profile" field.
func (u *AppUserUpsertBulk) SetIsLoadUserProfile(v bool) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetIsLoadUserProfile(v)
	})
}

// UpdateIsLoadUserProfile sets the "is_load_user_profile" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateIsLoadUserProfile() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateIsLoadUserProfile()
	})
}

// SetNickname sets the "nickname" field.
func (u *AppUserUpsertBulk) SetNickname(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateNickname() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateNickname()
	})
}

// SetAvatar sets the "avatar" field.
func (u *AppUserUpsertBulk) SetAvatar(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateAvatar() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateAvatar()
	})
}

// SetAvatarURL sets the "avatar_url" field.
func (u *AppUserUpsertBulk) SetAvatarURL(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetAvatarURL(v)
	})
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateAvatarURL() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateAvatarURL()
	})
}

// SetGender sets the "gender" field.
func (u *AppUserUpsertBulk) SetGender(v uint) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateGender() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateGender()
	})
}

// SetCounty sets the "county" field.
func (u *AppUserUpsertBulk) SetCounty(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetCounty(v)
	})
}

// UpdateCounty sets the "county" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateCounty() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateCounty()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *AppUserUpsertBulk) SetCountryCode(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateCountryCode() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateCountryCode()
	})
}

// SetProvince sets the "province" field.
func (u *AppUserUpsertBulk) SetProvince(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetProvince(v)
	})
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateProvince() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateProvince()
	})
}

// SetCity sets the "city" field.
func (u *AppUserUpsertBulk) SetCity(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateCity() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateCity()
	})
}

// SetLanguage sets the "language" field.
func (u *AppUserUpsertBulk) SetLanguage(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateLanguage() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateLanguage()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *AppUserUpsertBulk) SetPhoneNumber(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdatePhoneNumber() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdatePhoneNumber()
	})
}

// SetPurePhoneNumber sets the "pure_phone_number" field.
func (u *AppUserUpsertBulk) SetPurePhoneNumber(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetPurePhoneNumber(v)
	})
}

// UpdatePurePhoneNumber sets the "pure_phone_number" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdatePurePhoneNumber() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdatePurePhoneNumber()
	})
}

// SetWatermark sets the "watermark" field.
func (u *AppUserUpsertBulk) SetWatermark(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetWatermark(v)
	})
}

// UpdateWatermark sets the "watermark" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateWatermark() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateWatermark()
	})
}

// SetLoadUserProfileTime sets the "load_user_profile_time" field.
func (u *AppUserUpsertBulk) SetLoadUserProfileTime(v uint64) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetLoadUserProfileTime(v)
	})
}

// UpdateLoadUserProfileTime sets the "load_user_profile_time" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateLoadUserProfileTime() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateLoadUserProfileTime()
	})
}

// SetLastLoginTime sets the "last_login_time" field.
func (u *AppUserUpsertBulk) SetLastLoginTime(v uint64) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetLastLoginTime(v)
	})
}

// UpdateLastLoginTime sets the "last_login_time" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateLastLoginTime() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateLastLoginTime()
	})
}

// Exec executes the query.
func (u *AppUserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
