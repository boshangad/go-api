// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/internal"
	"github.com/boshangad/v1/ent/predicate"
	"github.com/boshangad/v1/ent/smslog"
)

// SmsLogUpdate is the builder for updating SmsLog entities.
type SmsLogUpdate struct {
	config
	hooks    []Hook
	mutation *SmsLogMutation
}

// Where appends a list predicates to the SmsLogUpdate builder.
func (slu *SmsLogUpdate) Where(ps ...predicate.SmsLog) *SmsLogUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetUpdateTime sets the "update_time" field.
func (slu *SmsLogUpdate) SetUpdateTime(i int64) *SmsLogUpdate {
	slu.mutation.ResetUpdateTime()
	slu.mutation.SetUpdateTime(i)
	return slu
}

// AddUpdateTime adds i to the "update_time" field.
func (slu *SmsLogUpdate) AddUpdateTime(i int64) *SmsLogUpdate {
	slu.mutation.AddUpdateTime(i)
	return slu
}

// SetUpdateBy sets the "update_by" field.
func (slu *SmsLogUpdate) SetUpdateBy(u uint64) *SmsLogUpdate {
	slu.mutation.ResetUpdateBy()
	slu.mutation.SetUpdateBy(u)
	return slu
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableUpdateBy(u *uint64) *SmsLogUpdate {
	if u != nil {
		slu.SetUpdateBy(*u)
	}
	return slu
}

// AddUpdateBy adds u to the "update_by" field.
func (slu *SmsLogUpdate) AddUpdateBy(u uint64) *SmsLogUpdate {
	slu.mutation.AddUpdateBy(u)
	return slu
}

// SetAppID sets the "app_id" field.
func (slu *SmsLogUpdate) SetAppID(u uint64) *SmsLogUpdate {
	slu.mutation.SetAppID(u)
	return slu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableAppID(u *uint64) *SmsLogUpdate {
	if u != nil {
		slu.SetAppID(*u)
	}
	return slu
}

// SetDialCode sets the "dial_code" field.
func (slu *SmsLogUpdate) SetDialCode(s string) *SmsLogUpdate {
	slu.mutation.SetDialCode(s)
	return slu
}

// SetNillableDialCode sets the "dial_code" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableDialCode(s *string) *SmsLogUpdate {
	if s != nil {
		slu.SetDialCode(*s)
	}
	return slu
}

// SetMobile sets the "mobile" field.
func (slu *SmsLogUpdate) SetMobile(s string) *SmsLogUpdate {
	slu.mutation.SetMobile(s)
	return slu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableMobile(s *string) *SmsLogUpdate {
	if s != nil {
		slu.SetMobile(*s)
	}
	return slu
}

// SetScope sets the "scope" field.
func (slu *SmsLogUpdate) SetScope(s string) *SmsLogUpdate {
	slu.mutation.SetScope(s)
	return slu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableScope(s *string) *SmsLogUpdate {
	if s != nil {
		slu.SetScope(*s)
	}
	return slu
}

// SetTypeID sets the "type_id" field.
func (slu *SmsLogUpdate) SetTypeID(u uint64) *SmsLogUpdate {
	slu.mutation.ResetTypeID()
	slu.mutation.SetTypeID(u)
	return slu
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableTypeID(u *uint64) *SmsLogUpdate {
	if u != nil {
		slu.SetTypeID(*u)
	}
	return slu
}

// AddTypeID adds u to the "type_id" field.
func (slu *SmsLogUpdate) AddTypeID(u uint64) *SmsLogUpdate {
	slu.mutation.AddTypeID(u)
	return slu
}

// SetGateway sets the "gateway" field.
func (slu *SmsLogUpdate) SetGateway(s string) *SmsLogUpdate {
	slu.mutation.SetGateway(s)
	return slu
}

// SetNillableGateway sets the "gateway" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableGateway(s *string) *SmsLogUpdate {
	if s != nil {
		slu.SetGateway(*s)
	}
	return slu
}

// SetIP sets the "ip" field.
func (slu *SmsLogUpdate) SetIP(s string) *SmsLogUpdate {
	slu.mutation.SetIP(s)
	return slu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableIP(s *string) *SmsLogUpdate {
	if s != nil {
		slu.SetIP(*s)
	}
	return slu
}

// SetTemplateID sets the "template_id" field.
func (slu *SmsLogUpdate) SetTemplateID(s string) *SmsLogUpdate {
	slu.mutation.SetTemplateID(s)
	return slu
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableTemplateID(s *string) *SmsLogUpdate {
	if s != nil {
		slu.SetTemplateID(*s)
	}
	return slu
}

// SetTemplateText sets the "template_text" field.
func (slu *SmsLogUpdate) SetTemplateText(s string) *SmsLogUpdate {
	slu.mutation.SetTemplateText(s)
	return slu
}

// SetNillableTemplateText sets the "template_text" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableTemplateText(s *string) *SmsLogUpdate {
	if s != nil {
		slu.SetTemplateText(*s)
	}
	return slu
}

// SetContent sets the "content" field.
func (slu *SmsLogUpdate) SetContent(s string) *SmsLogUpdate {
	slu.mutation.SetContent(s)
	return slu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableContent(s *string) *SmsLogUpdate {
	if s != nil {
		slu.SetContent(*s)
	}
	return slu
}

// SetCheckCount sets the "check_count" field.
func (slu *SmsLogUpdate) SetCheckCount(u uint8) *SmsLogUpdate {
	slu.mutation.ResetCheckCount()
	slu.mutation.SetCheckCount(u)
	return slu
}

// SetNillableCheckCount sets the "check_count" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableCheckCount(u *uint8) *SmsLogUpdate {
	if u != nil {
		slu.SetCheckCount(*u)
	}
	return slu
}

// AddCheckCount adds u to the "check_count" field.
func (slu *SmsLogUpdate) AddCheckCount(u uint8) *SmsLogUpdate {
	slu.mutation.AddCheckCount(u)
	return slu
}

// SetStatus sets the "status" field.
func (slu *SmsLogUpdate) SetStatus(u uint) *SmsLogUpdate {
	slu.mutation.ResetStatus()
	slu.mutation.SetStatus(u)
	return slu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableStatus(u *uint) *SmsLogUpdate {
	if u != nil {
		slu.SetStatus(*u)
	}
	return slu
}

// AddStatus adds u to the "status" field.
func (slu *SmsLogUpdate) AddStatus(u uint) *SmsLogUpdate {
	slu.mutation.AddStatus(u)
	return slu
}

// SetReturnMsg sets the "return_msg" field.
func (slu *SmsLogUpdate) SetReturnMsg(s string) *SmsLogUpdate {
	slu.mutation.SetReturnMsg(s)
	return slu
}

// SetNillableReturnMsg sets the "return_msg" field if the given value is not nil.
func (slu *SmsLogUpdate) SetNillableReturnMsg(s *string) *SmsLogUpdate {
	if s != nil {
		slu.SetReturnMsg(*s)
	}
	return slu
}

// SetApp sets the "app" edge to the App entity.
func (slu *SmsLogUpdate) SetApp(a *App) *SmsLogUpdate {
	return slu.SetAppID(a.ID)
}

// Mutation returns the SmsLogMutation object of the builder.
func (slu *SmsLogUpdate) Mutation() *SmsLogMutation {
	return slu.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (slu *SmsLogUpdate) ClearApp() *SmsLogUpdate {
	slu.mutation.ClearApp()
	return slu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *SmsLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	slu.defaults()
	if len(slu.hooks) == 0 {
		if err = slu.check(); err != nil {
			return 0, err
		}
		affected, err = slu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SmsLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = slu.check(); err != nil {
				return 0, err
			}
			slu.mutation = mutation
			affected, err = slu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(slu.hooks) - 1; i >= 0; i-- {
			if slu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = slu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, slu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (slu *SmsLogUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *SmsLogUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *SmsLogUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slu *SmsLogUpdate) defaults() {
	if _, ok := slu.mutation.UpdateTime(); !ok {
		v := smslog.UpdateDefaultUpdateTime()
		slu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slu *SmsLogUpdate) check() error {
	if v, ok := slu.mutation.DialCode(); ok {
		if err := smslog.DialCodeValidator(v); err != nil {
			return &ValidationError{Name: "dial_code", err: fmt.Errorf("ent: validator failed for field \"dial_code\": %w", err)}
		}
	}
	if v, ok := slu.mutation.Mobile(); ok {
		if err := smslog.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf("ent: validator failed for field \"mobile\": %w", err)}
		}
	}
	if v, ok := slu.mutation.Scope(); ok {
		if err := smslog.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf("ent: validator failed for field \"scope\": %w", err)}
		}
	}
	if v, ok := slu.mutation.Gateway(); ok {
		if err := smslog.GatewayValidator(v); err != nil {
			return &ValidationError{Name: "gateway", err: fmt.Errorf("ent: validator failed for field \"gateway\": %w", err)}
		}
	}
	if v, ok := slu.mutation.IP(); ok {
		if err := smslog.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf("ent: validator failed for field \"ip\": %w", err)}
		}
	}
	if v, ok := slu.mutation.TemplateID(); ok {
		if err := smslog.TemplateIDValidator(v); err != nil {
			return &ValidationError{Name: "template_id", err: fmt.Errorf("ent: validator failed for field \"template_id\": %w", err)}
		}
	}
	if v, ok := slu.mutation.TemplateText(); ok {
		if err := smslog.TemplateTextValidator(v); err != nil {
			return &ValidationError{Name: "template_text", err: fmt.Errorf("ent: validator failed for field \"template_text\": %w", err)}
		}
	}
	if v, ok := slu.mutation.Content(); ok {
		if err := smslog.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	if v, ok := slu.mutation.ReturnMsg(); ok {
		if err := smslog.ReturnMsgValidator(v); err != nil {
			return &ValidationError{Name: "return_msg", err: fmt.Errorf("ent: validator failed for field \"return_msg\": %w", err)}
		}
	}
	if _, ok := slu.mutation.AppID(); slu.mutation.AppCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"app\"")
	}
	return nil
}

func (slu *SmsLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   smslog.Table,
			Columns: smslog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: smslog.FieldID,
			},
		},
	}
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: smslog.FieldUpdateTime,
		})
	}
	if value, ok := slu.mutation.AddedUpdateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: smslog.FieldUpdateTime,
		})
	}
	if value, ok := slu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smslog.FieldUpdateBy,
		})
	}
	if value, ok := slu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smslog.FieldUpdateBy,
		})
	}
	if value, ok := slu.mutation.DialCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldDialCode,
		})
	}
	if value, ok := slu.mutation.Mobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldMobile,
		})
	}
	if value, ok := slu.mutation.Scope(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldScope,
		})
	}
	if value, ok := slu.mutation.TypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smslog.FieldTypeID,
		})
	}
	if value, ok := slu.mutation.AddedTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smslog.FieldTypeID,
		})
	}
	if value, ok := slu.mutation.Gateway(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldGateway,
		})
	}
	if value, ok := slu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldIP,
		})
	}
	if value, ok := slu.mutation.TemplateID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldTemplateID,
		})
	}
	if value, ok := slu.mutation.TemplateText(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldTemplateText,
		})
	}
	if value, ok := slu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldContent,
		})
	}
	if value, ok := slu.mutation.CheckCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: smslog.FieldCheckCount,
		})
	}
	if value, ok := slu.mutation.AddedCheckCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: smslog.FieldCheckCount,
		})
	}
	if value, ok := slu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: smslog.FieldStatus,
		})
	}
	if value, ok := slu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: smslog.FieldStatus,
		})
	}
	if value, ok := slu.mutation.ReturnMsg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldReturnMsg,
		})
	}
	if slu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   smslog.AppTable,
			Columns: []string{smslog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = slu.schemaConfig.SmsLog
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   smslog.AppTable,
			Columns: []string{smslog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = slu.schemaConfig.SmsLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = slu.schemaConfig.SmsLog
	ctx = internal.NewSchemaConfigContext(ctx, slu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smslog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SmsLogUpdateOne is the builder for updating a single SmsLog entity.
type SmsLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SmsLogMutation
}

// SetUpdateTime sets the "update_time" field.
func (sluo *SmsLogUpdateOne) SetUpdateTime(i int64) *SmsLogUpdateOne {
	sluo.mutation.ResetUpdateTime()
	sluo.mutation.SetUpdateTime(i)
	return sluo
}

// AddUpdateTime adds i to the "update_time" field.
func (sluo *SmsLogUpdateOne) AddUpdateTime(i int64) *SmsLogUpdateOne {
	sluo.mutation.AddUpdateTime(i)
	return sluo
}

// SetUpdateBy sets the "update_by" field.
func (sluo *SmsLogUpdateOne) SetUpdateBy(u uint64) *SmsLogUpdateOne {
	sluo.mutation.ResetUpdateBy()
	sluo.mutation.SetUpdateBy(u)
	return sluo
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableUpdateBy(u *uint64) *SmsLogUpdateOne {
	if u != nil {
		sluo.SetUpdateBy(*u)
	}
	return sluo
}

// AddUpdateBy adds u to the "update_by" field.
func (sluo *SmsLogUpdateOne) AddUpdateBy(u uint64) *SmsLogUpdateOne {
	sluo.mutation.AddUpdateBy(u)
	return sluo
}

// SetAppID sets the "app_id" field.
func (sluo *SmsLogUpdateOne) SetAppID(u uint64) *SmsLogUpdateOne {
	sluo.mutation.SetAppID(u)
	return sluo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableAppID(u *uint64) *SmsLogUpdateOne {
	if u != nil {
		sluo.SetAppID(*u)
	}
	return sluo
}

// SetDialCode sets the "dial_code" field.
func (sluo *SmsLogUpdateOne) SetDialCode(s string) *SmsLogUpdateOne {
	sluo.mutation.SetDialCode(s)
	return sluo
}

// SetNillableDialCode sets the "dial_code" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableDialCode(s *string) *SmsLogUpdateOne {
	if s != nil {
		sluo.SetDialCode(*s)
	}
	return sluo
}

// SetMobile sets the "mobile" field.
func (sluo *SmsLogUpdateOne) SetMobile(s string) *SmsLogUpdateOne {
	sluo.mutation.SetMobile(s)
	return sluo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableMobile(s *string) *SmsLogUpdateOne {
	if s != nil {
		sluo.SetMobile(*s)
	}
	return sluo
}

// SetScope sets the "scope" field.
func (sluo *SmsLogUpdateOne) SetScope(s string) *SmsLogUpdateOne {
	sluo.mutation.SetScope(s)
	return sluo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableScope(s *string) *SmsLogUpdateOne {
	if s != nil {
		sluo.SetScope(*s)
	}
	return sluo
}

// SetTypeID sets the "type_id" field.
func (sluo *SmsLogUpdateOne) SetTypeID(u uint64) *SmsLogUpdateOne {
	sluo.mutation.ResetTypeID()
	sluo.mutation.SetTypeID(u)
	return sluo
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableTypeID(u *uint64) *SmsLogUpdateOne {
	if u != nil {
		sluo.SetTypeID(*u)
	}
	return sluo
}

// AddTypeID adds u to the "type_id" field.
func (sluo *SmsLogUpdateOne) AddTypeID(u uint64) *SmsLogUpdateOne {
	sluo.mutation.AddTypeID(u)
	return sluo
}

// SetGateway sets the "gateway" field.
func (sluo *SmsLogUpdateOne) SetGateway(s string) *SmsLogUpdateOne {
	sluo.mutation.SetGateway(s)
	return sluo
}

// SetNillableGateway sets the "gateway" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableGateway(s *string) *SmsLogUpdateOne {
	if s != nil {
		sluo.SetGateway(*s)
	}
	return sluo
}

// SetIP sets the "ip" field.
func (sluo *SmsLogUpdateOne) SetIP(s string) *SmsLogUpdateOne {
	sluo.mutation.SetIP(s)
	return sluo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableIP(s *string) *SmsLogUpdateOne {
	if s != nil {
		sluo.SetIP(*s)
	}
	return sluo
}

// SetTemplateID sets the "template_id" field.
func (sluo *SmsLogUpdateOne) SetTemplateID(s string) *SmsLogUpdateOne {
	sluo.mutation.SetTemplateID(s)
	return sluo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableTemplateID(s *string) *SmsLogUpdateOne {
	if s != nil {
		sluo.SetTemplateID(*s)
	}
	return sluo
}

// SetTemplateText sets the "template_text" field.
func (sluo *SmsLogUpdateOne) SetTemplateText(s string) *SmsLogUpdateOne {
	sluo.mutation.SetTemplateText(s)
	return sluo
}

// SetNillableTemplateText sets the "template_text" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableTemplateText(s *string) *SmsLogUpdateOne {
	if s != nil {
		sluo.SetTemplateText(*s)
	}
	return sluo
}

// SetContent sets the "content" field.
func (sluo *SmsLogUpdateOne) SetContent(s string) *SmsLogUpdateOne {
	sluo.mutation.SetContent(s)
	return sluo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableContent(s *string) *SmsLogUpdateOne {
	if s != nil {
		sluo.SetContent(*s)
	}
	return sluo
}

// SetCheckCount sets the "check_count" field.
func (sluo *SmsLogUpdateOne) SetCheckCount(u uint8) *SmsLogUpdateOne {
	sluo.mutation.ResetCheckCount()
	sluo.mutation.SetCheckCount(u)
	return sluo
}

// SetNillableCheckCount sets the "check_count" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableCheckCount(u *uint8) *SmsLogUpdateOne {
	if u != nil {
		sluo.SetCheckCount(*u)
	}
	return sluo
}

// AddCheckCount adds u to the "check_count" field.
func (sluo *SmsLogUpdateOne) AddCheckCount(u uint8) *SmsLogUpdateOne {
	sluo.mutation.AddCheckCount(u)
	return sluo
}

// SetStatus sets the "status" field.
func (sluo *SmsLogUpdateOne) SetStatus(u uint) *SmsLogUpdateOne {
	sluo.mutation.ResetStatus()
	sluo.mutation.SetStatus(u)
	return sluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableStatus(u *uint) *SmsLogUpdateOne {
	if u != nil {
		sluo.SetStatus(*u)
	}
	return sluo
}

// AddStatus adds u to the "status" field.
func (sluo *SmsLogUpdateOne) AddStatus(u uint) *SmsLogUpdateOne {
	sluo.mutation.AddStatus(u)
	return sluo
}

// SetReturnMsg sets the "return_msg" field.
func (sluo *SmsLogUpdateOne) SetReturnMsg(s string) *SmsLogUpdateOne {
	sluo.mutation.SetReturnMsg(s)
	return sluo
}

// SetNillableReturnMsg sets the "return_msg" field if the given value is not nil.
func (sluo *SmsLogUpdateOne) SetNillableReturnMsg(s *string) *SmsLogUpdateOne {
	if s != nil {
		sluo.SetReturnMsg(*s)
	}
	return sluo
}

// SetApp sets the "app" edge to the App entity.
func (sluo *SmsLogUpdateOne) SetApp(a *App) *SmsLogUpdateOne {
	return sluo.SetAppID(a.ID)
}

// Mutation returns the SmsLogMutation object of the builder.
func (sluo *SmsLogUpdateOne) Mutation() *SmsLogMutation {
	return sluo.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (sluo *SmsLogUpdateOne) ClearApp() *SmsLogUpdateOne {
	sluo.mutation.ClearApp()
	return sluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *SmsLogUpdateOne) Select(field string, fields ...string) *SmsLogUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated SmsLog entity.
func (sluo *SmsLogUpdateOne) Save(ctx context.Context) (*SmsLog, error) {
	var (
		err  error
		node *SmsLog
	)
	sluo.defaults()
	if len(sluo.hooks) == 0 {
		if err = sluo.check(); err != nil {
			return nil, err
		}
		node, err = sluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SmsLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sluo.check(); err != nil {
				return nil, err
			}
			sluo.mutation = mutation
			node, err = sluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sluo.hooks) - 1; i >= 0; i-- {
			if sluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *SmsLogUpdateOne) SaveX(ctx context.Context) *SmsLog {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *SmsLogUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *SmsLogUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sluo *SmsLogUpdateOne) defaults() {
	if _, ok := sluo.mutation.UpdateTime(); !ok {
		v := smslog.UpdateDefaultUpdateTime()
		sluo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sluo *SmsLogUpdateOne) check() error {
	if v, ok := sluo.mutation.DialCode(); ok {
		if err := smslog.DialCodeValidator(v); err != nil {
			return &ValidationError{Name: "dial_code", err: fmt.Errorf("ent: validator failed for field \"dial_code\": %w", err)}
		}
	}
	if v, ok := sluo.mutation.Mobile(); ok {
		if err := smslog.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf("ent: validator failed for field \"mobile\": %w", err)}
		}
	}
	if v, ok := sluo.mutation.Scope(); ok {
		if err := smslog.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf("ent: validator failed for field \"scope\": %w", err)}
		}
	}
	if v, ok := sluo.mutation.Gateway(); ok {
		if err := smslog.GatewayValidator(v); err != nil {
			return &ValidationError{Name: "gateway", err: fmt.Errorf("ent: validator failed for field \"gateway\": %w", err)}
		}
	}
	if v, ok := sluo.mutation.IP(); ok {
		if err := smslog.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf("ent: validator failed for field \"ip\": %w", err)}
		}
	}
	if v, ok := sluo.mutation.TemplateID(); ok {
		if err := smslog.TemplateIDValidator(v); err != nil {
			return &ValidationError{Name: "template_id", err: fmt.Errorf("ent: validator failed for field \"template_id\": %w", err)}
		}
	}
	if v, ok := sluo.mutation.TemplateText(); ok {
		if err := smslog.TemplateTextValidator(v); err != nil {
			return &ValidationError{Name: "template_text", err: fmt.Errorf("ent: validator failed for field \"template_text\": %w", err)}
		}
	}
	if v, ok := sluo.mutation.Content(); ok {
		if err := smslog.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	if v, ok := sluo.mutation.ReturnMsg(); ok {
		if err := smslog.ReturnMsgValidator(v); err != nil {
			return &ValidationError{Name: "return_msg", err: fmt.Errorf("ent: validator failed for field \"return_msg\": %w", err)}
		}
	}
	if _, ok := sluo.mutation.AppID(); sluo.mutation.AppCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"app\"")
	}
	return nil
}

func (sluo *SmsLogUpdateOne) sqlSave(ctx context.Context) (_node *SmsLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   smslog.Table,
			Columns: smslog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: smslog.FieldID,
			},
		},
	}
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SmsLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, smslog.FieldID)
		for _, f := range fields {
			if !smslog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != smslog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: smslog.FieldUpdateTime,
		})
	}
	if value, ok := sluo.mutation.AddedUpdateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: smslog.FieldUpdateTime,
		})
	}
	if value, ok := sluo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smslog.FieldUpdateBy,
		})
	}
	if value, ok := sluo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smslog.FieldUpdateBy,
		})
	}
	if value, ok := sluo.mutation.DialCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldDialCode,
		})
	}
	if value, ok := sluo.mutation.Mobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldMobile,
		})
	}
	if value, ok := sluo.mutation.Scope(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldScope,
		})
	}
	if value, ok := sluo.mutation.TypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smslog.FieldTypeID,
		})
	}
	if value, ok := sluo.mutation.AddedTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smslog.FieldTypeID,
		})
	}
	if value, ok := sluo.mutation.Gateway(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldGateway,
		})
	}
	if value, ok := sluo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldIP,
		})
	}
	if value, ok := sluo.mutation.TemplateID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldTemplateID,
		})
	}
	if value, ok := sluo.mutation.TemplateText(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldTemplateText,
		})
	}
	if value, ok := sluo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldContent,
		})
	}
	if value, ok := sluo.mutation.CheckCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: smslog.FieldCheckCount,
		})
	}
	if value, ok := sluo.mutation.AddedCheckCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: smslog.FieldCheckCount,
		})
	}
	if value, ok := sluo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: smslog.FieldStatus,
		})
	}
	if value, ok := sluo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: smslog.FieldStatus,
		})
	}
	if value, ok := sluo.mutation.ReturnMsg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldReturnMsg,
		})
	}
	if sluo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   smslog.AppTable,
			Columns: []string{smslog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = sluo.schemaConfig.SmsLog
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   smslog.AppTable,
			Columns: []string{smslog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = sluo.schemaConfig.SmsLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = sluo.schemaConfig.SmsLog
	ctx = internal.NewSchemaConfigContext(ctx, sluo.schemaConfig)
	_node = &SmsLog{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smslog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
