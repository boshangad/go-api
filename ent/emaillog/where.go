// Code generated by entc, DO NOT EDIT.

package emaillog

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/boshangad/v1/ent/internal"
	"github.com/boshangad/v1/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v int64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v int64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// Scope applies equality check predicate on the "scope" field. It's identical to ScopeEQ.
func Scope(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScope), v))
	})
}

// TypeID applies equality check predicate on the "type_id" field. It's identical to TypeIDEQ.
func TypeID(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeID), v))
	})
}

// Gateway applies equality check predicate on the "gateway" field. It's identical to GatewayEQ.
func Gateway(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGateway), v))
	})
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// FromName applies equality check predicate on the "from_name" field. It's identical to FromNameEQ.
func FromName(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromName), v))
	})
}

// FromAddress applies equality check predicate on the "from_address" field. It's identical to FromAddressEQ.
func FromAddress(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromAddress), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// CheckCount applies equality check predicate on the "check_count" field. It's identical to CheckCountEQ.
func CheckCount(v uint8) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckCount), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// ReturnMsg applies equality check predicate on the "return_msg" field. It's identical to ReturnMsgEQ.
func ReturnMsg(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReturnMsg), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v int64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v int64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...int64) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...int64) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v int64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v int64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v int64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v int64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v int64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v int64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...int64) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...int64) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v int64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v int64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v int64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v int64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uint64) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uint64) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// ScopeEQ applies the EQ predicate on the "scope" field.
func ScopeEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScope), v))
	})
}

// ScopeNEQ applies the NEQ predicate on the "scope" field.
func ScopeNEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScope), v))
	})
}

// ScopeIn applies the In predicate on the "scope" field.
func ScopeIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScope), v...))
	})
}

// ScopeNotIn applies the NotIn predicate on the "scope" field.
func ScopeNotIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScope), v...))
	})
}

// ScopeGT applies the GT predicate on the "scope" field.
func ScopeGT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScope), v))
	})
}

// ScopeGTE applies the GTE predicate on the "scope" field.
func ScopeGTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScope), v))
	})
}

// ScopeLT applies the LT predicate on the "scope" field.
func ScopeLT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScope), v))
	})
}

// ScopeLTE applies the LTE predicate on the "scope" field.
func ScopeLTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScope), v))
	})
}

// ScopeContains applies the Contains predicate on the "scope" field.
func ScopeContains(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldScope), v))
	})
}

// ScopeHasPrefix applies the HasPrefix predicate on the "scope" field.
func ScopeHasPrefix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldScope), v))
	})
}

// ScopeHasSuffix applies the HasSuffix predicate on the "scope" field.
func ScopeHasSuffix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldScope), v))
	})
}

// ScopeEqualFold applies the EqualFold predicate on the "scope" field.
func ScopeEqualFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldScope), v))
	})
}

// ScopeContainsFold applies the ContainsFold predicate on the "scope" field.
func ScopeContainsFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldScope), v))
	})
}

// TypeIDEQ applies the EQ predicate on the "type_id" field.
func TypeIDEQ(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeID), v))
	})
}

// TypeIDNEQ applies the NEQ predicate on the "type_id" field.
func TypeIDNEQ(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeID), v))
	})
}

// TypeIDIn applies the In predicate on the "type_id" field.
func TypeIDIn(vs ...uint64) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypeID), v...))
	})
}

// TypeIDNotIn applies the NotIn predicate on the "type_id" field.
func TypeIDNotIn(vs ...uint64) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypeID), v...))
	})
}

// TypeIDGT applies the GT predicate on the "type_id" field.
func TypeIDGT(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypeID), v))
	})
}

// TypeIDGTE applies the GTE predicate on the "type_id" field.
func TypeIDGTE(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypeID), v))
	})
}

// TypeIDLT applies the LT predicate on the "type_id" field.
func TypeIDLT(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypeID), v))
	})
}

// TypeIDLTE applies the LTE predicate on the "type_id" field.
func TypeIDLTE(v uint64) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypeID), v))
	})
}

// GatewayEQ applies the EQ predicate on the "gateway" field.
func GatewayEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGateway), v))
	})
}

// GatewayNEQ applies the NEQ predicate on the "gateway" field.
func GatewayNEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGateway), v))
	})
}

// GatewayIn applies the In predicate on the "gateway" field.
func GatewayIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGateway), v...))
	})
}

// GatewayNotIn applies the NotIn predicate on the "gateway" field.
func GatewayNotIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGateway), v...))
	})
}

// GatewayGT applies the GT predicate on the "gateway" field.
func GatewayGT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGateway), v))
	})
}

// GatewayGTE applies the GTE predicate on the "gateway" field.
func GatewayGTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGateway), v))
	})
}

// GatewayLT applies the LT predicate on the "gateway" field.
func GatewayLT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGateway), v))
	})
}

// GatewayLTE applies the LTE predicate on the "gateway" field.
func GatewayLTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGateway), v))
	})
}

// GatewayContains applies the Contains predicate on the "gateway" field.
func GatewayContains(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGateway), v))
	})
}

// GatewayHasPrefix applies the HasPrefix predicate on the "gateway" field.
func GatewayHasPrefix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGateway), v))
	})
}

// GatewayHasSuffix applies the HasSuffix predicate on the "gateway" field.
func GatewayHasSuffix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGateway), v))
	})
}

// GatewayEqualFold applies the EqualFold predicate on the "gateway" field.
func GatewayEqualFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGateway), v))
	})
}

// GatewayContainsFold applies the ContainsFold predicate on the "gateway" field.
func GatewayContainsFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGateway), v))
	})
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIP), v))
	})
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIP), v...))
	})
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIP), v...))
	})
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIP), v))
	})
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIP), v))
	})
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIP), v))
	})
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIP), v))
	})
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIP), v))
	})
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIP), v))
	})
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIP), v))
	})
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIP), v))
	})
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIP), v))
	})
}

// FromNameEQ applies the EQ predicate on the "from_name" field.
func FromNameEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromName), v))
	})
}

// FromNameNEQ applies the NEQ predicate on the "from_name" field.
func FromNameNEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFromName), v))
	})
}

// FromNameIn applies the In predicate on the "from_name" field.
func FromNameIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFromName), v...))
	})
}

// FromNameNotIn applies the NotIn predicate on the "from_name" field.
func FromNameNotIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFromName), v...))
	})
}

// FromNameGT applies the GT predicate on the "from_name" field.
func FromNameGT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFromName), v))
	})
}

// FromNameGTE applies the GTE predicate on the "from_name" field.
func FromNameGTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFromName), v))
	})
}

// FromNameLT applies the LT predicate on the "from_name" field.
func FromNameLT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFromName), v))
	})
}

// FromNameLTE applies the LTE predicate on the "from_name" field.
func FromNameLTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFromName), v))
	})
}

// FromNameContains applies the Contains predicate on the "from_name" field.
func FromNameContains(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFromName), v))
	})
}

// FromNameHasPrefix applies the HasPrefix predicate on the "from_name" field.
func FromNameHasPrefix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFromName), v))
	})
}

// FromNameHasSuffix applies the HasSuffix predicate on the "from_name" field.
func FromNameHasSuffix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFromName), v))
	})
}

// FromNameEqualFold applies the EqualFold predicate on the "from_name" field.
func FromNameEqualFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFromName), v))
	})
}

// FromNameContainsFold applies the ContainsFold predicate on the "from_name" field.
func FromNameContainsFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFromName), v))
	})
}

// FromAddressEQ applies the EQ predicate on the "from_address" field.
func FromAddressEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromAddress), v))
	})
}

// FromAddressNEQ applies the NEQ predicate on the "from_address" field.
func FromAddressNEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFromAddress), v))
	})
}

// FromAddressIn applies the In predicate on the "from_address" field.
func FromAddressIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFromAddress), v...))
	})
}

// FromAddressNotIn applies the NotIn predicate on the "from_address" field.
func FromAddressNotIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFromAddress), v...))
	})
}

// FromAddressGT applies the GT predicate on the "from_address" field.
func FromAddressGT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFromAddress), v))
	})
}

// FromAddressGTE applies the GTE predicate on the "from_address" field.
func FromAddressGTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFromAddress), v))
	})
}

// FromAddressLT applies the LT predicate on the "from_address" field.
func FromAddressLT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFromAddress), v))
	})
}

// FromAddressLTE applies the LTE predicate on the "from_address" field.
func FromAddressLTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFromAddress), v))
	})
}

// FromAddressContains applies the Contains predicate on the "from_address" field.
func FromAddressContains(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFromAddress), v))
	})
}

// FromAddressHasPrefix applies the HasPrefix predicate on the "from_address" field.
func FromAddressHasPrefix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFromAddress), v))
	})
}

// FromAddressHasSuffix applies the HasSuffix predicate on the "from_address" field.
func FromAddressHasSuffix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFromAddress), v))
	})
}

// FromAddressEqualFold applies the EqualFold predicate on the "from_address" field.
func FromAddressEqualFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFromAddress), v))
	})
}

// FromAddressContainsFold applies the ContainsFold predicate on the "from_address" field.
func FromAddressContainsFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFromAddress), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldData), v))
	})
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldData), v...))
	})
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldData), v...))
	})
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldData), v))
	})
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldData), v))
	})
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldData), v))
	})
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldData), v))
	})
}

// DataContains applies the Contains predicate on the "data" field.
func DataContains(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldData), v))
	})
}

// DataHasPrefix applies the HasPrefix predicate on the "data" field.
func DataHasPrefix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldData), v))
	})
}

// DataHasSuffix applies the HasSuffix predicate on the "data" field.
func DataHasSuffix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldData), v))
	})
}

// DataEqualFold applies the EqualFold predicate on the "data" field.
func DataEqualFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldData), v))
	})
}

// DataContainsFold applies the ContainsFold predicate on the "data" field.
func DataContainsFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldData), v))
	})
}

// CheckCountEQ applies the EQ predicate on the "check_count" field.
func CheckCountEQ(v uint8) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckCount), v))
	})
}

// CheckCountNEQ applies the NEQ predicate on the "check_count" field.
func CheckCountNEQ(v uint8) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckCount), v))
	})
}

// CheckCountIn applies the In predicate on the "check_count" field.
func CheckCountIn(vs ...uint8) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCheckCount), v...))
	})
}

// CheckCountNotIn applies the NotIn predicate on the "check_count" field.
func CheckCountNotIn(vs ...uint8) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCheckCount), v...))
	})
}

// CheckCountGT applies the GT predicate on the "check_count" field.
func CheckCountGT(v uint8) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCheckCount), v))
	})
}

// CheckCountGTE applies the GTE predicate on the "check_count" field.
func CheckCountGTE(v uint8) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCheckCount), v))
	})
}

// CheckCountLT applies the LT predicate on the "check_count" field.
func CheckCountLT(v uint8) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCheckCount), v))
	})
}

// CheckCountLTE applies the LTE predicate on the "check_count" field.
func CheckCountLTE(v uint8) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCheckCount), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// ReturnMsgEQ applies the EQ predicate on the "return_msg" field.
func ReturnMsgEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgNEQ applies the NEQ predicate on the "return_msg" field.
func ReturnMsgNEQ(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgIn applies the In predicate on the "return_msg" field.
func ReturnMsgIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReturnMsg), v...))
	})
}

// ReturnMsgNotIn applies the NotIn predicate on the "return_msg" field.
func ReturnMsgNotIn(vs ...string) predicate.EmailLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReturnMsg), v...))
	})
}

// ReturnMsgGT applies the GT predicate on the "return_msg" field.
func ReturnMsgGT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgGTE applies the GTE predicate on the "return_msg" field.
func ReturnMsgGTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgLT applies the LT predicate on the "return_msg" field.
func ReturnMsgLT(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgLTE applies the LTE predicate on the "return_msg" field.
func ReturnMsgLTE(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgContains applies the Contains predicate on the "return_msg" field.
func ReturnMsgContains(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgHasPrefix applies the HasPrefix predicate on the "return_msg" field.
func ReturnMsgHasPrefix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgHasSuffix applies the HasSuffix predicate on the "return_msg" field.
func ReturnMsgHasSuffix(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgEqualFold applies the EqualFold predicate on the "return_msg" field.
func ReturnMsgEqualFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgContainsFold applies the ContainsFold predicate on the "return_msg" field.
func ReturnMsgContainsFold(v string) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReturnMsg), v))
	})
}

// HasApp applies the HasEdge predicate on the "app" edge.
func HasApp() predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppTable, AppColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.App
		step.Edge.Schema = schemaConfig.EmailLog
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppWith applies the HasEdge predicate on the "app" edge with a given conditions (other predicates).
func HasAppWith(preds ...predicate.App) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppTable, AppColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.App
		step.Edge.Schema = schemaConfig.EmailLog
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EmailLog) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EmailLog) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmailLog) predicate.EmailLog {
	return predicate.EmailLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
