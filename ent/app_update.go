// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/appoption"
	"github.com/boshangad/v1/ent/internal"
	"github.com/boshangad/v1/ent/predicate"
	"github.com/google/uuid"
)

// AppUpdate is the builder for updating App entities.
type AppUpdate struct {
	config
	hooks    []Hook
	mutation *AppMutation
}

// Where appends a list predicates to the AppUpdate builder.
func (au *AppUpdate) Where(ps ...predicate.App) *AppUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetDeleteTime sets the "delete_time" field.
func (au *AppUpdate) SetDeleteTime(i int64) *AppUpdate {
	au.mutation.ResetDeleteTime()
	au.mutation.SetDeleteTime(i)
	return au
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (au *AppUpdate) SetNillableDeleteTime(i *int64) *AppUpdate {
	if i != nil {
		au.SetDeleteTime(*i)
	}
	return au
}

// AddDeleteTime adds i to the "delete_time" field.
func (au *AppUpdate) AddDeleteTime(i int64) *AppUpdate {
	au.mutation.AddDeleteTime(i)
	return au
}

// SetUpdateTime sets the "update_time" field.
func (au *AppUpdate) SetUpdateTime(i int64) *AppUpdate {
	au.mutation.ResetUpdateTime()
	au.mutation.SetUpdateTime(i)
	return au
}

// AddUpdateTime adds i to the "update_time" field.
func (au *AppUpdate) AddUpdateTime(i int64) *AppUpdate {
	au.mutation.AddUpdateTime(i)
	return au
}

// SetUpdateBy sets the "update_by" field.
func (au *AppUpdate) SetUpdateBy(u uint64) *AppUpdate {
	au.mutation.ResetUpdateBy()
	au.mutation.SetUpdateBy(u)
	return au
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (au *AppUpdate) SetNillableUpdateBy(u *uint64) *AppUpdate {
	if u != nil {
		au.SetUpdateBy(*u)
	}
	return au
}

// AddUpdateBy adds u to the "update_by" field.
func (au *AppUpdate) AddUpdateBy(u uint64) *AppUpdate {
	au.mutation.AddUpdateBy(u)
	return au
}

// SetUUID sets the "uuid" field.
func (au *AppUpdate) SetUUID(u *uuid.UUID) *AppUpdate {
	au.mutation.SetUUID(u)
	return au
}

// SetTypeID sets the "type_id" field.
func (au *AppUpdate) SetTypeID(u uint64) *AppUpdate {
	au.mutation.ResetTypeID()
	au.mutation.SetTypeID(u)
	return au
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (au *AppUpdate) SetNillableTypeID(u *uint64) *AppUpdate {
	if u != nil {
		au.SetTypeID(*u)
	}
	return au
}

// AddTypeID adds u to the "type_id" field.
func (au *AppUpdate) AddTypeID(u uint64) *AppUpdate {
	au.mutation.AddTypeID(u)
	return au
}

// SetTitle sets the "title" field.
func (au *AppUpdate) SetTitle(s string) *AppUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *AppUpdate) SetNillableTitle(s *string) *AppUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// SetIntro sets the "intro" field.
func (au *AppUpdate) SetIntro(s string) *AppUpdate {
	au.mutation.SetIntro(s)
	return au
}

// SetNillableIntro sets the "intro" field if the given value is not nil.
func (au *AppUpdate) SetNillableIntro(s *string) *AppUpdate {
	if s != nil {
		au.SetIntro(*s)
	}
	return au
}

// SetMpOriginID sets the "mp_origin_id" field.
func (au *AppUpdate) SetMpOriginID(s string) *AppUpdate {
	au.mutation.SetMpOriginID(s)
	return au
}

// SetNillableMpOriginID sets the "mp_origin_id" field if the given value is not nil.
func (au *AppUpdate) SetNillableMpOriginID(s *string) *AppUpdate {
	if s != nil {
		au.SetMpOriginID(*s)
	}
	return au
}

// SetAppID sets the "app_id" field.
func (au *AppUpdate) SetAppID(s string) *AppUpdate {
	au.mutation.SetAppID(s)
	return au
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (au *AppUpdate) SetNillableAppID(s *string) *AppUpdate {
	if s != nil {
		au.SetAppID(*s)
	}
	return au
}

// SetAppSecret sets the "app_secret" field.
func (au *AppUpdate) SetAppSecret(s string) *AppUpdate {
	au.mutation.SetAppSecret(s)
	return au
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (au *AppUpdate) SetNillableAppSecret(s *string) *AppUpdate {
	if s != nil {
		au.SetAppSecret(*s)
	}
	return au
}

// SetHasPaymentAuth sets the "has_payment_auth" field.
func (au *AppUpdate) SetHasPaymentAuth(b bool) *AppUpdate {
	au.mutation.SetHasPaymentAuth(b)
	return au
}

// SetNillableHasPaymentAuth sets the "has_payment_auth" field if the given value is not nil.
func (au *AppUpdate) SetNillableHasPaymentAuth(b *bool) *AppUpdate {
	if b != nil {
		au.SetHasPaymentAuth(*b)
	}
	return au
}

// SetRegisterUserNumber sets the "register_user_number" field.
func (au *AppUpdate) SetRegisterUserNumber(u uint64) *AppUpdate {
	au.mutation.ResetRegisterUserNumber()
	au.mutation.SetRegisterUserNumber(u)
	return au
}

// SetNillableRegisterUserNumber sets the "register_user_number" field if the given value is not nil.
func (au *AppUpdate) SetNillableRegisterUserNumber(u *uint64) *AppUpdate {
	if u != nil {
		au.SetRegisterUserNumber(*u)
	}
	return au
}

// AddRegisterUserNumber adds u to the "register_user_number" field.
func (au *AppUpdate) AddRegisterUserNumber(u uint64) *AppUpdate {
	au.mutation.AddRegisterUserNumber(u)
	return au
}

// SetStatus sets the "status" field.
func (au *AppUpdate) SetStatus(u uint) *AppUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(u)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AppUpdate) SetNillableStatus(u *uint) *AppUpdate {
	if u != nil {
		au.SetStatus(*u)
	}
	return au
}

// AddStatus adds u to the "status" field.
func (au *AppUpdate) AddStatus(u uint) *AppUpdate {
	au.mutation.AddStatus(u)
	return au
}

// AddAppOptionIDs adds the "appOptions" edge to the AppOption entity by IDs.
func (au *AppUpdate) AddAppOptionIDs(ids ...uint64) *AppUpdate {
	au.mutation.AddAppOptionIDs(ids...)
	return au
}

// AddAppOptions adds the "appOptions" edges to the AppOption entity.
func (au *AppUpdate) AddAppOptions(a ...*AppOption) *AppUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAppOptionIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (au *AppUpdate) Mutation() *AppMutation {
	return au.mutation
}

// ClearAppOptions clears all "appOptions" edges to the AppOption entity.
func (au *AppUpdate) ClearAppOptions() *AppUpdate {
	au.mutation.ClearAppOptions()
	return au
}

// RemoveAppOptionIDs removes the "appOptions" edge to AppOption entities by IDs.
func (au *AppUpdate) RemoveAppOptionIDs(ids ...uint64) *AppUpdate {
	au.mutation.RemoveAppOptionIDs(ids...)
	return au
}

// RemoveAppOptions removes "appOptions" edges to AppOption entities.
func (au *AppUpdate) RemoveAppOptions(a ...*AppOption) *AppUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAppOptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AppUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok {
		v := app.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AppUpdate) check() error {
	if v, ok := au.mutation.Title(); ok {
		if err := app.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := au.mutation.Intro(); ok {
		if err := app.IntroValidator(v); err != nil {
			return &ValidationError{Name: "intro", err: fmt.Errorf("ent: validator failed for field \"intro\": %w", err)}
		}
	}
	if v, ok := au.mutation.MpOriginID(); ok {
		if err := app.MpOriginIDValidator(v); err != nil {
			return &ValidationError{Name: "mp_origin_id", err: fmt.Errorf("ent: validator failed for field \"mp_origin_id\": %w", err)}
		}
	}
	if v, ok := au.mutation.AppID(); ok {
		if err := app.AppIDValidator(v); err != nil {
			return &ValidationError{Name: "app_id", err: fmt.Errorf("ent: validator failed for field \"app_id\": %w", err)}
		}
	}
	if v, ok := au.mutation.AppSecret(); ok {
		if err := app.AppSecretValidator(v); err != nil {
			return &ValidationError{Name: "app_secret", err: fmt.Errorf("ent: validator failed for field \"app_secret\": %w", err)}
		}
	}
	if v, ok := au.mutation.Status(); ok {
		if err := app.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (au *AppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: app.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: app.FieldDeleteTime,
		})
	}
	if value, ok := au.mutation.AddedDeleteTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: app.FieldDeleteTime,
		})
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: app.FieldUpdateTime,
		})
	}
	if value, ok := au.mutation.AddedUpdateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: app.FieldUpdateTime,
		})
	}
	if value, ok := au.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldUpdateBy,
		})
	}
	if value, ok := au.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldUpdateBy,
		})
	}
	if value, ok := au.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: app.FieldUUID,
		})
	}
	if value, ok := au.mutation.TypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldTypeID,
		})
	}
	if value, ok := au.mutation.AddedTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldTypeID,
		})
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldTitle,
		})
	}
	if value, ok := au.mutation.Intro(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldIntro,
		})
	}
	if value, ok := au.mutation.MpOriginID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldMpOriginID,
		})
	}
	if value, ok := au.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppID,
		})
	}
	if value, ok := au.mutation.AppSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppSecret,
		})
	}
	if value, ok := au.mutation.HasPaymentAuth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: app.FieldHasPaymentAuth,
		})
	}
	if value, ok := au.mutation.RegisterUserNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldRegisterUserNumber,
		})
	}
	if value, ok := au.mutation.AddedRegisterUserNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldRegisterUserNumber,
		})
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: app.FieldStatus,
		})
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: app.FieldStatus,
		})
	}
	if au.mutation.AppOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.AppOptionsTable,
			Columns: []string{app.AppOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appoption.FieldID,
				},
			},
		}
		edge.Schema = au.schemaConfig.AppOption
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAppOptionsIDs(); len(nodes) > 0 && !au.mutation.AppOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.AppOptionsTable,
			Columns: []string{app.AppOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appoption.FieldID,
				},
			},
		}
		edge.Schema = au.schemaConfig.AppOption
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AppOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.AppOptionsTable,
			Columns: []string{app.AppOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appoption.FieldID,
				},
			},
		}
		edge.Schema = au.schemaConfig.AppOption
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = au.schemaConfig.App
	ctx = internal.NewSchemaConfigContext(ctx, au.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppUpdateOne is the builder for updating a single App entity.
type AppUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppMutation
}

// SetDeleteTime sets the "delete_time" field.
func (auo *AppUpdateOne) SetDeleteTime(i int64) *AppUpdateOne {
	auo.mutation.ResetDeleteTime()
	auo.mutation.SetDeleteTime(i)
	return auo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableDeleteTime(i *int64) *AppUpdateOne {
	if i != nil {
		auo.SetDeleteTime(*i)
	}
	return auo
}

// AddDeleteTime adds i to the "delete_time" field.
func (auo *AppUpdateOne) AddDeleteTime(i int64) *AppUpdateOne {
	auo.mutation.AddDeleteTime(i)
	return auo
}

// SetUpdateTime sets the "update_time" field.
func (auo *AppUpdateOne) SetUpdateTime(i int64) *AppUpdateOne {
	auo.mutation.ResetUpdateTime()
	auo.mutation.SetUpdateTime(i)
	return auo
}

// AddUpdateTime adds i to the "update_time" field.
func (auo *AppUpdateOne) AddUpdateTime(i int64) *AppUpdateOne {
	auo.mutation.AddUpdateTime(i)
	return auo
}

// SetUpdateBy sets the "update_by" field.
func (auo *AppUpdateOne) SetUpdateBy(u uint64) *AppUpdateOne {
	auo.mutation.ResetUpdateBy()
	auo.mutation.SetUpdateBy(u)
	return auo
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableUpdateBy(u *uint64) *AppUpdateOne {
	if u != nil {
		auo.SetUpdateBy(*u)
	}
	return auo
}

// AddUpdateBy adds u to the "update_by" field.
func (auo *AppUpdateOne) AddUpdateBy(u uint64) *AppUpdateOne {
	auo.mutation.AddUpdateBy(u)
	return auo
}

// SetUUID sets the "uuid" field.
func (auo *AppUpdateOne) SetUUID(u *uuid.UUID) *AppUpdateOne {
	auo.mutation.SetUUID(u)
	return auo
}

// SetTypeID sets the "type_id" field.
func (auo *AppUpdateOne) SetTypeID(u uint64) *AppUpdateOne {
	auo.mutation.ResetTypeID()
	auo.mutation.SetTypeID(u)
	return auo
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableTypeID(u *uint64) *AppUpdateOne {
	if u != nil {
		auo.SetTypeID(*u)
	}
	return auo
}

// AddTypeID adds u to the "type_id" field.
func (auo *AppUpdateOne) AddTypeID(u uint64) *AppUpdateOne {
	auo.mutation.AddTypeID(u)
	return auo
}

// SetTitle sets the "title" field.
func (auo *AppUpdateOne) SetTitle(s string) *AppUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableTitle(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// SetIntro sets the "intro" field.
func (auo *AppUpdateOne) SetIntro(s string) *AppUpdateOne {
	auo.mutation.SetIntro(s)
	return auo
}

// SetNillableIntro sets the "intro" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableIntro(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetIntro(*s)
	}
	return auo
}

// SetMpOriginID sets the "mp_origin_id" field.
func (auo *AppUpdateOne) SetMpOriginID(s string) *AppUpdateOne {
	auo.mutation.SetMpOriginID(s)
	return auo
}

// SetNillableMpOriginID sets the "mp_origin_id" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableMpOriginID(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetMpOriginID(*s)
	}
	return auo
}

// SetAppID sets the "app_id" field.
func (auo *AppUpdateOne) SetAppID(s string) *AppUpdateOne {
	auo.mutation.SetAppID(s)
	return auo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableAppID(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetAppID(*s)
	}
	return auo
}

// SetAppSecret sets the "app_secret" field.
func (auo *AppUpdateOne) SetAppSecret(s string) *AppUpdateOne {
	auo.mutation.SetAppSecret(s)
	return auo
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableAppSecret(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetAppSecret(*s)
	}
	return auo
}

// SetHasPaymentAuth sets the "has_payment_auth" field.
func (auo *AppUpdateOne) SetHasPaymentAuth(b bool) *AppUpdateOne {
	auo.mutation.SetHasPaymentAuth(b)
	return auo
}

// SetNillableHasPaymentAuth sets the "has_payment_auth" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableHasPaymentAuth(b *bool) *AppUpdateOne {
	if b != nil {
		auo.SetHasPaymentAuth(*b)
	}
	return auo
}

// SetRegisterUserNumber sets the "register_user_number" field.
func (auo *AppUpdateOne) SetRegisterUserNumber(u uint64) *AppUpdateOne {
	auo.mutation.ResetRegisterUserNumber()
	auo.mutation.SetRegisterUserNumber(u)
	return auo
}

// SetNillableRegisterUserNumber sets the "register_user_number" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableRegisterUserNumber(u *uint64) *AppUpdateOne {
	if u != nil {
		auo.SetRegisterUserNumber(*u)
	}
	return auo
}

// AddRegisterUserNumber adds u to the "register_user_number" field.
func (auo *AppUpdateOne) AddRegisterUserNumber(u uint64) *AppUpdateOne {
	auo.mutation.AddRegisterUserNumber(u)
	return auo
}

// SetStatus sets the "status" field.
func (auo *AppUpdateOne) SetStatus(u uint) *AppUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(u)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableStatus(u *uint) *AppUpdateOne {
	if u != nil {
		auo.SetStatus(*u)
	}
	return auo
}

// AddStatus adds u to the "status" field.
func (auo *AppUpdateOne) AddStatus(u uint) *AppUpdateOne {
	auo.mutation.AddStatus(u)
	return auo
}

// AddAppOptionIDs adds the "appOptions" edge to the AppOption entity by IDs.
func (auo *AppUpdateOne) AddAppOptionIDs(ids ...uint64) *AppUpdateOne {
	auo.mutation.AddAppOptionIDs(ids...)
	return auo
}

// AddAppOptions adds the "appOptions" edges to the AppOption entity.
func (auo *AppUpdateOne) AddAppOptions(a ...*AppOption) *AppUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAppOptionIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (auo *AppUpdateOne) Mutation() *AppMutation {
	return auo.mutation
}

// ClearAppOptions clears all "appOptions" edges to the AppOption entity.
func (auo *AppUpdateOne) ClearAppOptions() *AppUpdateOne {
	auo.mutation.ClearAppOptions()
	return auo
}

// RemoveAppOptionIDs removes the "appOptions" edge to AppOption entities by IDs.
func (auo *AppUpdateOne) RemoveAppOptionIDs(ids ...uint64) *AppUpdateOne {
	auo.mutation.RemoveAppOptionIDs(ids...)
	return auo
}

// RemoveAppOptions removes "appOptions" edges to AppOption entities.
func (auo *AppUpdateOne) RemoveAppOptions(a ...*AppOption) *AppUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAppOptionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AppUpdateOne) Select(field string, fields ...string) *AppUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated App entity.
func (auo *AppUpdateOne) Save(ctx context.Context) (*App, error) {
	var (
		err  error
		node *App
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppUpdateOne) SaveX(ctx context.Context) *App {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AppUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		v := app.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AppUpdateOne) check() error {
	if v, ok := auo.mutation.Title(); ok {
		if err := app.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := auo.mutation.Intro(); ok {
		if err := app.IntroValidator(v); err != nil {
			return &ValidationError{Name: "intro", err: fmt.Errorf("ent: validator failed for field \"intro\": %w", err)}
		}
	}
	if v, ok := auo.mutation.MpOriginID(); ok {
		if err := app.MpOriginIDValidator(v); err != nil {
			return &ValidationError{Name: "mp_origin_id", err: fmt.Errorf("ent: validator failed for field \"mp_origin_id\": %w", err)}
		}
	}
	if v, ok := auo.mutation.AppID(); ok {
		if err := app.AppIDValidator(v); err != nil {
			return &ValidationError{Name: "app_id", err: fmt.Errorf("ent: validator failed for field \"app_id\": %w", err)}
		}
	}
	if v, ok := auo.mutation.AppSecret(); ok {
		if err := app.AppSecretValidator(v); err != nil {
			return &ValidationError{Name: "app_secret", err: fmt.Errorf("ent: validator failed for field \"app_secret\": %w", err)}
		}
	}
	if v, ok := auo.mutation.Status(); ok {
		if err := app.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (auo *AppUpdateOne) sqlSave(ctx context.Context) (_node *App, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: app.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing App.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, app.FieldID)
		for _, f := range fields {
			if !app.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != app.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.DeleteTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: app.FieldDeleteTime,
		})
	}
	if value, ok := auo.mutation.AddedDeleteTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: app.FieldDeleteTime,
		})
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: app.FieldUpdateTime,
		})
	}
	if value, ok := auo.mutation.AddedUpdateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: app.FieldUpdateTime,
		})
	}
	if value, ok := auo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldUpdateBy,
		})
	}
	if value, ok := auo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldUpdateBy,
		})
	}
	if value, ok := auo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: app.FieldUUID,
		})
	}
	if value, ok := auo.mutation.TypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldTypeID,
		})
	}
	if value, ok := auo.mutation.AddedTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldTypeID,
		})
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldTitle,
		})
	}
	if value, ok := auo.mutation.Intro(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldIntro,
		})
	}
	if value, ok := auo.mutation.MpOriginID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldMpOriginID,
		})
	}
	if value, ok := auo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppID,
		})
	}
	if value, ok := auo.mutation.AppSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppSecret,
		})
	}
	if value, ok := auo.mutation.HasPaymentAuth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: app.FieldHasPaymentAuth,
		})
	}
	if value, ok := auo.mutation.RegisterUserNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldRegisterUserNumber,
		})
	}
	if value, ok := auo.mutation.AddedRegisterUserNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldRegisterUserNumber,
		})
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: app.FieldStatus,
		})
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: app.FieldStatus,
		})
	}
	if auo.mutation.AppOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.AppOptionsTable,
			Columns: []string{app.AppOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appoption.FieldID,
				},
			},
		}
		edge.Schema = auo.schemaConfig.AppOption
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAppOptionsIDs(); len(nodes) > 0 && !auo.mutation.AppOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.AppOptionsTable,
			Columns: []string{app.AppOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appoption.FieldID,
				},
			},
		}
		edge.Schema = auo.schemaConfig.AppOption
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AppOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.AppOptionsTable,
			Columns: []string{app.AppOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appoption.FieldID,
				},
			},
		}
		edge.Schema = auo.schemaConfig.AppOption
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = auo.schemaConfig.App
	ctx = internal.NewSchemaConfigContext(ctx, auo.schemaConfig)
	_node = &App{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
