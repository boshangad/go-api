// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/boshangad/v1/ent/user"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID uint64 `json:"id,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	// 删除时间
	DeleteTime int64 `json:"delete_time,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime int64 `json:"create_time,omitempty"`
	// CreateBy holds the value of the "create_by" field.
	// 创建人
	CreateBy uint64 `json:"create_by,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime int64 `json:"update_time,omitempty"`
	// UpdateBy holds the value of the "update_by" field.
	// 更新人
	UpdateBy uint64 `json:"update_by,omitempty"`
	// UUID holds the value of the "uuid" field.
	// UUID
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Username holds the value of the "username" field.
	// 用户名
	Username string `json:"username,omitempty"`
	// Nickname holds the value of the "nickname" field.
	// 昵称
	Nickname string `json:"nickname,omitempty"`
	// Password holds the value of the "password" field.
	// 登录密码
	Password string `json:"password,omitempty"`
	// DialCode holds the value of the "dial_code" field.
	// 拨号区号
	DialCode string `json:"dial_code,omitempty"`
	// Mobile holds the value of the "mobile" field.
	// 手机号
	Mobile string `json:"mobile,omitempty"`
	// MobileHash holds the value of the "mobile_hash" field.
	// 手机号哈希
	MobileHash string `json:"mobile_hash,omitempty"`
	// Email holds the value of the "email" field.
	// 邮箱
	Email string `json:"email,omitempty"`
	// EmailHash holds the value of the "email_hash" field.
	// 邮箱hash
	EmailHash string `json:"email_hash,omitempty"`
	// Avatar holds the value of the "avatar" field.
	// 头像
	Avatar string `json:"avatar,omitempty"`
	// Name holds the value of the "name" field.
	// 下面
	Name string `json:"name,omitempty"`
	// Sex holds the value of the "sex" field.
	// 性别
	Sex uint `json:"sex,omitempty"`
	// Birthday holds the value of the "birthday" field.
	// 生日
	Birthday uint64 `json:"birthday,omitempty"`
	// Age holds the value of the "age" field.
	// 年龄
	Age uint `json:"age,omitempty"`
	// LastLoginIP holds the value of the "last_login_ip" field.
	// 最后登录IP
	LastLoginIP string `json:"last_login_ip,omitempty"`
	// LastLoginTime holds the value of the "last_login_time" field.
	// 最后登录时间
	LastLoginTime uint64 `json:"last_login_time,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status uint `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldDeleteTime, user.FieldCreateTime, user.FieldCreateBy, user.FieldUpdateTime, user.FieldUpdateBy, user.FieldSex, user.FieldBirthday, user.FieldAge, user.FieldLastLoginTime, user.FieldStatus:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldNickname, user.FieldPassword, user.FieldDialCode, user.FieldMobile, user.FieldMobileHash, user.FieldEmail, user.FieldEmailHash, user.FieldAvatar, user.FieldName, user.FieldLastLoginIP:
			values[i] = new(sql.NullString)
		case user.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = uint64(value.Int64)
		case user.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				u.DeleteTime = value.Int64
			}
		case user.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				u.CreateTime = value.Int64
			}
		case user.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				u.CreateBy = uint64(value.Int64)
			}
		case user.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				u.UpdateTime = value.Int64
			}
		case user.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				u.UpdateBy = uint64(value.Int64)
			}
		case user.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				u.UUID = *value
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				u.Nickname = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldDialCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dial_code", values[i])
			} else if value.Valid {
				u.DialCode = value.String
			}
		case user.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				u.Mobile = value.String
			}
		case user.FieldMobileHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile_hash", values[i])
			} else if value.Valid {
				u.MobileHash = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldEmailHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_hash", values[i])
			} else if value.Valid {
				u.EmailHash = value.String
			}
		case user.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				u.Avatar = value.String
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldSex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				u.Sex = uint(value.Int64)
			}
		case user.FieldBirthday:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				u.Birthday = uint64(value.Int64)
			}
		case user.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				u.Age = uint(value.Int64)
			}
		case user.FieldLastLoginIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_ip", values[i])
			} else if value.Valid {
				u.LastLoginIP = value.String
			}
		case user.FieldLastLoginTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_time", values[i])
			} else if value.Valid {
				u.LastLoginTime = uint64(value.Int64)
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = uint(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", delete_time=")
	builder.WriteString(fmt.Sprintf("%v", u.DeleteTime))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", u.CreateTime))
	builder.WriteString(", create_by=")
	builder.WriteString(fmt.Sprintf("%v", u.CreateBy))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", u.UpdateTime))
	builder.WriteString(", update_by=")
	builder.WriteString(fmt.Sprintf("%v", u.UpdateBy))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", u.UUID))
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	builder.WriteString(", nickname=")
	builder.WriteString(u.Nickname)
	builder.WriteString(", password=")
	builder.WriteString(u.Password)
	builder.WriteString(", dial_code=")
	builder.WriteString(u.DialCode)
	builder.WriteString(", mobile=")
	builder.WriteString(u.Mobile)
	builder.WriteString(", mobile_hash=")
	builder.WriteString(u.MobileHash)
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", email_hash=")
	builder.WriteString(u.EmailHash)
	builder.WriteString(", avatar=")
	builder.WriteString(u.Avatar)
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", sex=")
	builder.WriteString(fmt.Sprintf("%v", u.Sex))
	builder.WriteString(", birthday=")
	builder.WriteString(fmt.Sprintf("%v", u.Birthday))
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", u.Age))
	builder.WriteString(", last_login_ip=")
	builder.WriteString(u.LastLoginIP)
	builder.WriteString(", last_login_time=")
	builder.WriteString(fmt.Sprintf("%v", u.LastLoginTime))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
