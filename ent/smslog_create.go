// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/smslog"
)

// SmsLogCreate is the builder for creating a SmsLog entity.
type SmsLogCreate struct {
	config
	mutation *SmsLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (slc *SmsLogCreate) SetCreateTime(i int64) *SmsLogCreate {
	slc.mutation.SetCreateTime(i)
	return slc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableCreateTime(i *int64) *SmsLogCreate {
	if i != nil {
		slc.SetCreateTime(*i)
	}
	return slc
}

// SetCreateBy sets the "create_by" field.
func (slc *SmsLogCreate) SetCreateBy(u uint64) *SmsLogCreate {
	slc.mutation.SetCreateBy(u)
	return slc
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableCreateBy(u *uint64) *SmsLogCreate {
	if u != nil {
		slc.SetCreateBy(*u)
	}
	return slc
}

// SetUpdateTime sets the "update_time" field.
func (slc *SmsLogCreate) SetUpdateTime(i int64) *SmsLogCreate {
	slc.mutation.SetUpdateTime(i)
	return slc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableUpdateTime(i *int64) *SmsLogCreate {
	if i != nil {
		slc.SetUpdateTime(*i)
	}
	return slc
}

// SetUpdateBy sets the "update_by" field.
func (slc *SmsLogCreate) SetUpdateBy(u uint64) *SmsLogCreate {
	slc.mutation.SetUpdateBy(u)
	return slc
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableUpdateBy(u *uint64) *SmsLogCreate {
	if u != nil {
		slc.SetUpdateBy(*u)
	}
	return slc
}

// SetAppID sets the "app_id" field.
func (slc *SmsLogCreate) SetAppID(u uint64) *SmsLogCreate {
	slc.mutation.SetAppID(u)
	return slc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableAppID(u *uint64) *SmsLogCreate {
	if u != nil {
		slc.SetAppID(*u)
	}
	return slc
}

// SetDialCode sets the "dial_code" field.
func (slc *SmsLogCreate) SetDialCode(s string) *SmsLogCreate {
	slc.mutation.SetDialCode(s)
	return slc
}

// SetNillableDialCode sets the "dial_code" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableDialCode(s *string) *SmsLogCreate {
	if s != nil {
		slc.SetDialCode(*s)
	}
	return slc
}

// SetMobile sets the "mobile" field.
func (slc *SmsLogCreate) SetMobile(s string) *SmsLogCreate {
	slc.mutation.SetMobile(s)
	return slc
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableMobile(s *string) *SmsLogCreate {
	if s != nil {
		slc.SetMobile(*s)
	}
	return slc
}

// SetScope sets the "scope" field.
func (slc *SmsLogCreate) SetScope(s string) *SmsLogCreate {
	slc.mutation.SetScope(s)
	return slc
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableScope(s *string) *SmsLogCreate {
	if s != nil {
		slc.SetScope(*s)
	}
	return slc
}

// SetTypeID sets the "type_id" field.
func (slc *SmsLogCreate) SetTypeID(u uint64) *SmsLogCreate {
	slc.mutation.SetTypeID(u)
	return slc
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableTypeID(u *uint64) *SmsLogCreate {
	if u != nil {
		slc.SetTypeID(*u)
	}
	return slc
}

// SetGateway sets the "gateway" field.
func (slc *SmsLogCreate) SetGateway(s string) *SmsLogCreate {
	slc.mutation.SetGateway(s)
	return slc
}

// SetNillableGateway sets the "gateway" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableGateway(s *string) *SmsLogCreate {
	if s != nil {
		slc.SetGateway(*s)
	}
	return slc
}

// SetIP sets the "ip" field.
func (slc *SmsLogCreate) SetIP(s string) *SmsLogCreate {
	slc.mutation.SetIP(s)
	return slc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableIP(s *string) *SmsLogCreate {
	if s != nil {
		slc.SetIP(*s)
	}
	return slc
}

// SetTemplateID sets the "template_id" field.
func (slc *SmsLogCreate) SetTemplateID(s string) *SmsLogCreate {
	slc.mutation.SetTemplateID(s)
	return slc
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableTemplateID(s *string) *SmsLogCreate {
	if s != nil {
		slc.SetTemplateID(*s)
	}
	return slc
}

// SetTemplateText sets the "template_text" field.
func (slc *SmsLogCreate) SetTemplateText(s string) *SmsLogCreate {
	slc.mutation.SetTemplateText(s)
	return slc
}

// SetNillableTemplateText sets the "template_text" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableTemplateText(s *string) *SmsLogCreate {
	if s != nil {
		slc.SetTemplateText(*s)
	}
	return slc
}

// SetContent sets the "content" field.
func (slc *SmsLogCreate) SetContent(s string) *SmsLogCreate {
	slc.mutation.SetContent(s)
	return slc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableContent(s *string) *SmsLogCreate {
	if s != nil {
		slc.SetContent(*s)
	}
	return slc
}

// SetCheckCount sets the "check_count" field.
func (slc *SmsLogCreate) SetCheckCount(u uint8) *SmsLogCreate {
	slc.mutation.SetCheckCount(u)
	return slc
}

// SetNillableCheckCount sets the "check_count" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableCheckCount(u *uint8) *SmsLogCreate {
	if u != nil {
		slc.SetCheckCount(*u)
	}
	return slc
}

// SetStatus sets the "status" field.
func (slc *SmsLogCreate) SetStatus(u uint) *SmsLogCreate {
	slc.mutation.SetStatus(u)
	return slc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableStatus(u *uint) *SmsLogCreate {
	if u != nil {
		slc.SetStatus(*u)
	}
	return slc
}

// SetReturnMsg sets the "return_msg" field.
func (slc *SmsLogCreate) SetReturnMsg(s string) *SmsLogCreate {
	slc.mutation.SetReturnMsg(s)
	return slc
}

// SetNillableReturnMsg sets the "return_msg" field if the given value is not nil.
func (slc *SmsLogCreate) SetNillableReturnMsg(s *string) *SmsLogCreate {
	if s != nil {
		slc.SetReturnMsg(*s)
	}
	return slc
}

// SetID sets the "id" field.
func (slc *SmsLogCreate) SetID(u uint64) *SmsLogCreate {
	slc.mutation.SetID(u)
	return slc
}

// SetApp sets the "app" edge to the App entity.
func (slc *SmsLogCreate) SetApp(a *App) *SmsLogCreate {
	return slc.SetAppID(a.ID)
}

// Mutation returns the SmsLogMutation object of the builder.
func (slc *SmsLogCreate) Mutation() *SmsLogMutation {
	return slc.mutation
}

// Save creates the SmsLog in the database.
func (slc *SmsLogCreate) Save(ctx context.Context) (*SmsLog, error) {
	var (
		err  error
		node *SmsLog
	)
	slc.defaults()
	if len(slc.hooks) == 0 {
		if err = slc.check(); err != nil {
			return nil, err
		}
		node, err = slc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SmsLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = slc.check(); err != nil {
				return nil, err
			}
			slc.mutation = mutation
			if node, err = slc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(slc.hooks) - 1; i >= 0; i-- {
			if slc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = slc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, slc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (slc *SmsLogCreate) SaveX(ctx context.Context) *SmsLog {
	v, err := slc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slc *SmsLogCreate) Exec(ctx context.Context) error {
	_, err := slc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slc *SmsLogCreate) ExecX(ctx context.Context) {
	if err := slc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slc *SmsLogCreate) defaults() {
	if _, ok := slc.mutation.CreateTime(); !ok {
		v := smslog.DefaultCreateTime
		slc.mutation.SetCreateTime(v)
	}
	if _, ok := slc.mutation.CreateBy(); !ok {
		v := smslog.DefaultCreateBy
		slc.mutation.SetCreateBy(v)
	}
	if _, ok := slc.mutation.UpdateTime(); !ok {
		v := smslog.DefaultUpdateTime
		slc.mutation.SetUpdateTime(v)
	}
	if _, ok := slc.mutation.UpdateBy(); !ok {
		v := smslog.DefaultUpdateBy
		slc.mutation.SetUpdateBy(v)
	}
	if _, ok := slc.mutation.AppID(); !ok {
		v := smslog.DefaultAppID
		slc.mutation.SetAppID(v)
	}
	if _, ok := slc.mutation.DialCode(); !ok {
		v := smslog.DefaultDialCode
		slc.mutation.SetDialCode(v)
	}
	if _, ok := slc.mutation.Mobile(); !ok {
		v := smslog.DefaultMobile
		slc.mutation.SetMobile(v)
	}
	if _, ok := slc.mutation.Scope(); !ok {
		v := smslog.DefaultScope
		slc.mutation.SetScope(v)
	}
	if _, ok := slc.mutation.TypeID(); !ok {
		v := smslog.DefaultTypeID
		slc.mutation.SetTypeID(v)
	}
	if _, ok := slc.mutation.Gateway(); !ok {
		v := smslog.DefaultGateway
		slc.mutation.SetGateway(v)
	}
	if _, ok := slc.mutation.IP(); !ok {
		v := smslog.DefaultIP
		slc.mutation.SetIP(v)
	}
	if _, ok := slc.mutation.TemplateID(); !ok {
		v := smslog.DefaultTemplateID
		slc.mutation.SetTemplateID(v)
	}
	if _, ok := slc.mutation.TemplateText(); !ok {
		v := smslog.DefaultTemplateText
		slc.mutation.SetTemplateText(v)
	}
	if _, ok := slc.mutation.Content(); !ok {
		v := smslog.DefaultContent
		slc.mutation.SetContent(v)
	}
	if _, ok := slc.mutation.CheckCount(); !ok {
		v := smslog.DefaultCheckCount
		slc.mutation.SetCheckCount(v)
	}
	if _, ok := slc.mutation.Status(); !ok {
		v := smslog.DefaultStatus
		slc.mutation.SetStatus(v)
	}
	if _, ok := slc.mutation.ReturnMsg(); !ok {
		v := smslog.DefaultReturnMsg
		slc.mutation.SetReturnMsg(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slc *SmsLogCreate) check() error {
	if _, ok := slc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := slc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "create_by", err: errors.New(`ent: missing required field "create_by"`)}
	}
	if _, ok := slc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "update_time"`)}
	}
	if _, ok := slc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "update_by", err: errors.New(`ent: missing required field "update_by"`)}
	}
	if _, ok := slc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	if _, ok := slc.mutation.DialCode(); !ok {
		return &ValidationError{Name: "dial_code", err: errors.New(`ent: missing required field "dial_code"`)}
	}
	if v, ok := slc.mutation.DialCode(); ok {
		if err := smslog.DialCodeValidator(v); err != nil {
			return &ValidationError{Name: "dial_code", err: fmt.Errorf(`ent: validator failed for field "dial_code": %w`, err)}
		}
	}
	if _, ok := slc.mutation.Mobile(); !ok {
		return &ValidationError{Name: "mobile", err: errors.New(`ent: missing required field "mobile"`)}
	}
	if v, ok := slc.mutation.Mobile(); ok {
		if err := smslog.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "mobile": %w`, err)}
		}
	}
	if _, ok := slc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`ent: missing required field "scope"`)}
	}
	if v, ok := slc.mutation.Scope(); ok {
		if err := smslog.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "scope": %w`, err)}
		}
	}
	if _, ok := slc.mutation.TypeID(); !ok {
		return &ValidationError{Name: "type_id", err: errors.New(`ent: missing required field "type_id"`)}
	}
	if _, ok := slc.mutation.Gateway(); !ok {
		return &ValidationError{Name: "gateway", err: errors.New(`ent: missing required field "gateway"`)}
	}
	if v, ok := slc.mutation.Gateway(); ok {
		if err := smslog.GatewayValidator(v); err != nil {
			return &ValidationError{Name: "gateway", err: fmt.Errorf(`ent: validator failed for field "gateway": %w`, err)}
		}
	}
	if _, ok := slc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "ip"`)}
	}
	if v, ok := slc.mutation.IP(); ok {
		if err := smslog.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "ip": %w`, err)}
		}
	}
	if _, ok := slc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`ent: missing required field "template_id"`)}
	}
	if v, ok := slc.mutation.TemplateID(); ok {
		if err := smslog.TemplateIDValidator(v); err != nil {
			return &ValidationError{Name: "template_id", err: fmt.Errorf(`ent: validator failed for field "template_id": %w`, err)}
		}
	}
	if _, ok := slc.mutation.TemplateText(); !ok {
		return &ValidationError{Name: "template_text", err: errors.New(`ent: missing required field "template_text"`)}
	}
	if v, ok := slc.mutation.TemplateText(); ok {
		if err := smslog.TemplateTextValidator(v); err != nil {
			return &ValidationError{Name: "template_text", err: fmt.Errorf(`ent: validator failed for field "template_text": %w`, err)}
		}
	}
	if _, ok := slc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "content"`)}
	}
	if v, ok := slc.mutation.Content(); ok {
		if err := smslog.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "content": %w`, err)}
		}
	}
	if _, ok := slc.mutation.CheckCount(); !ok {
		return &ValidationError{Name: "check_count", err: errors.New(`ent: missing required field "check_count"`)}
	}
	if _, ok := slc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if _, ok := slc.mutation.ReturnMsg(); !ok {
		return &ValidationError{Name: "return_msg", err: errors.New(`ent: missing required field "return_msg"`)}
	}
	if v, ok := slc.mutation.ReturnMsg(); ok {
		if err := smslog.ReturnMsgValidator(v); err != nil {
			return &ValidationError{Name: "return_msg", err: fmt.Errorf(`ent: validator failed for field "return_msg": %w`, err)}
		}
	}
	if _, ok := slc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app", err: errors.New("ent: missing required edge \"app\"")}
	}
	return nil
}

func (slc *SmsLogCreate) sqlSave(ctx context.Context) (*SmsLog, error) {
	_node, _spec := slc.createSpec()
	if err := sqlgraph.CreateNode(ctx, slc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (slc *SmsLogCreate) createSpec() (*SmsLog, *sqlgraph.CreateSpec) {
	var (
		_node = &SmsLog{config: slc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: smslog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: smslog.FieldID,
			},
		}
	)
	_spec.Schema = slc.schemaConfig.SmsLog
	_spec.OnConflict = slc.conflict
	if id, ok := slc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := slc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: smslog.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := slc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smslog.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := slc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: smslog.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := slc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smslog.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := slc.mutation.DialCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldDialCode,
		})
		_node.DialCode = value
	}
	if value, ok := slc.mutation.Mobile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldMobile,
		})
		_node.Mobile = value
	}
	if value, ok := slc.mutation.Scope(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldScope,
		})
		_node.Scope = value
	}
	if value, ok := slc.mutation.TypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smslog.FieldTypeID,
		})
		_node.TypeID = value
	}
	if value, ok := slc.mutation.Gateway(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldGateway,
		})
		_node.Gateway = value
	}
	if value, ok := slc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := slc.mutation.TemplateID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldTemplateID,
		})
		_node.TemplateID = value
	}
	if value, ok := slc.mutation.TemplateText(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldTemplateText,
		})
		_node.TemplateText = value
	}
	if value, ok := slc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := slc.mutation.CheckCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: smslog.FieldCheckCount,
		})
		_node.CheckCount = value
	}
	if value, ok := slc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: smslog.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := slc.mutation.ReturnMsg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smslog.FieldReturnMsg,
		})
		_node.ReturnMsg = value
	}
	if nodes := slc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   smslog.AppTable,
			Columns: []string{smslog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = slc.schemaConfig.SmsLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SmsLog.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SmsLogUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (slc *SmsLogCreate) OnConflict(opts ...sql.ConflictOption) *SmsLogUpsertOne {
	slc.conflict = opts
	return &SmsLogUpsertOne{
		create: slc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SmsLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (slc *SmsLogCreate) OnConflictColumns(columns ...string) *SmsLogUpsertOne {
	slc.conflict = append(slc.conflict, sql.ConflictColumns(columns...))
	return &SmsLogUpsertOne{
		create: slc,
	}
}

type (
	// SmsLogUpsertOne is the builder for "upsert"-ing
	//  one SmsLog node.
	SmsLogUpsertOne struct {
		create *SmsLogCreate
	}

	// SmsLogUpsert is the "OnConflict" setter.
	SmsLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *SmsLogUpsert) SetCreateTime(v int64) *SmsLogUpsert {
	u.Set(smslog.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateCreateTime() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldCreateTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *SmsLogUpsert) SetCreateBy(v uint64) *SmsLogUpsert {
	u.Set(smslog.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateCreateBy() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldCreateBy)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *SmsLogUpsert) SetUpdateTime(v int64) *SmsLogUpsert {
	u.Set(smslog.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateUpdateTime() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldUpdateTime)
	return u
}

// SetUpdateBy sets the "update_by" field.
func (u *SmsLogUpsert) SetUpdateBy(v uint64) *SmsLogUpsert {
	u.Set(smslog.FieldUpdateBy, v)
	return u
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateUpdateBy() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldUpdateBy)
	return u
}

// SetAppID sets the "app_id" field.
func (u *SmsLogUpsert) SetAppID(v uint64) *SmsLogUpsert {
	u.Set(smslog.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateAppID() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldAppID)
	return u
}

// SetDialCode sets the "dial_code" field.
func (u *SmsLogUpsert) SetDialCode(v string) *SmsLogUpsert {
	u.Set(smslog.FieldDialCode, v)
	return u
}

// UpdateDialCode sets the "dial_code" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateDialCode() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldDialCode)
	return u
}

// SetMobile sets the "mobile" field.
func (u *SmsLogUpsert) SetMobile(v string) *SmsLogUpsert {
	u.Set(smslog.FieldMobile, v)
	return u
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateMobile() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldMobile)
	return u
}

// SetScope sets the "scope" field.
func (u *SmsLogUpsert) SetScope(v string) *SmsLogUpsert {
	u.Set(smslog.FieldScope, v)
	return u
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateScope() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldScope)
	return u
}

// SetTypeID sets the "type_id" field.
func (u *SmsLogUpsert) SetTypeID(v uint64) *SmsLogUpsert {
	u.Set(smslog.FieldTypeID, v)
	return u
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateTypeID() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldTypeID)
	return u
}

// SetGateway sets the "gateway" field.
func (u *SmsLogUpsert) SetGateway(v string) *SmsLogUpsert {
	u.Set(smslog.FieldGateway, v)
	return u
}

// UpdateGateway sets the "gateway" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateGateway() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldGateway)
	return u
}

// SetIP sets the "ip" field.
func (u *SmsLogUpsert) SetIP(v string) *SmsLogUpsert {
	u.Set(smslog.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateIP() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldIP)
	return u
}

// SetTemplateID sets the "template_id" field.
func (u *SmsLogUpsert) SetTemplateID(v string) *SmsLogUpsert {
	u.Set(smslog.FieldTemplateID, v)
	return u
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateTemplateID() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldTemplateID)
	return u
}

// SetTemplateText sets the "template_text" field.
func (u *SmsLogUpsert) SetTemplateText(v string) *SmsLogUpsert {
	u.Set(smslog.FieldTemplateText, v)
	return u
}

// UpdateTemplateText sets the "template_text" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateTemplateText() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldTemplateText)
	return u
}

// SetContent sets the "content" field.
func (u *SmsLogUpsert) SetContent(v string) *SmsLogUpsert {
	u.Set(smslog.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateContent() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldContent)
	return u
}

// SetCheckCount sets the "check_count" field.
func (u *SmsLogUpsert) SetCheckCount(v uint8) *SmsLogUpsert {
	u.Set(smslog.FieldCheckCount, v)
	return u
}

// UpdateCheckCount sets the "check_count" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateCheckCount() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldCheckCount)
	return u
}

// SetStatus sets the "status" field.
func (u *SmsLogUpsert) SetStatus(v uint) *SmsLogUpsert {
	u.Set(smslog.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateStatus() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldStatus)
	return u
}

// SetReturnMsg sets the "return_msg" field.
func (u *SmsLogUpsert) SetReturnMsg(v string) *SmsLogUpsert {
	u.Set(smslog.FieldReturnMsg, v)
	return u
}

// UpdateReturnMsg sets the "return_msg" field to the value that was provided on create.
func (u *SmsLogUpsert) UpdateReturnMsg() *SmsLogUpsert {
	u.SetExcluded(smslog.FieldReturnMsg)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SmsLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(smslog.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SmsLogUpsertOne) UpdateNewValues() *SmsLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(smslog.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.SmsLog.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SmsLogUpsertOne) Ignore() *SmsLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SmsLogUpsertOne) DoNothing() *SmsLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SmsLogCreate.OnConflict
// documentation for more info.
func (u *SmsLogUpsertOne) Update(set func(*SmsLogUpsert)) *SmsLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SmsLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *SmsLogUpsertOne) SetCreateTime(v int64) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateCreateTime() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateCreateTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *SmsLogUpsertOne) SetCreateBy(v uint64) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateCreateBy() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateCreateBy()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *SmsLogUpsertOne) SetUpdateTime(v int64) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateUpdateTime() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *SmsLogUpsertOne) SetUpdateBy(v uint64) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateUpdateBy() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateUpdateBy()
	})
}

// SetAppID sets the "app_id" field.
func (u *SmsLogUpsertOne) SetAppID(v uint64) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateAppID() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateAppID()
	})
}

// SetDialCode sets the "dial_code" field.
func (u *SmsLogUpsertOne) SetDialCode(v string) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetDialCode(v)
	})
}

// UpdateDialCode sets the "dial_code" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateDialCode() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateDialCode()
	})
}

// SetMobile sets the "mobile" field.
func (u *SmsLogUpsertOne) SetMobile(v string) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateMobile() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateMobile()
	})
}

// SetScope sets the "scope" field.
func (u *SmsLogUpsertOne) SetScope(v string) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateScope() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateScope()
	})
}

// SetTypeID sets the "type_id" field.
func (u *SmsLogUpsertOne) SetTypeID(v uint64) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetTypeID(v)
	})
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateTypeID() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateTypeID()
	})
}

// SetGateway sets the "gateway" field.
func (u *SmsLogUpsertOne) SetGateway(v string) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetGateway(v)
	})
}

// UpdateGateway sets the "gateway" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateGateway() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateGateway()
	})
}

// SetIP sets the "ip" field.
func (u *SmsLogUpsertOne) SetIP(v string) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateIP() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateIP()
	})
}

// SetTemplateID sets the "template_id" field.
func (u *SmsLogUpsertOne) SetTemplateID(v string) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateTemplateID() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateTemplateID()
	})
}

// SetTemplateText sets the "template_text" field.
func (u *SmsLogUpsertOne) SetTemplateText(v string) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetTemplateText(v)
	})
}

// UpdateTemplateText sets the "template_text" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateTemplateText() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateTemplateText()
	})
}

// SetContent sets the "content" field.
func (u *SmsLogUpsertOne) SetContent(v string) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateContent() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateContent()
	})
}

// SetCheckCount sets the "check_count" field.
func (u *SmsLogUpsertOne) SetCheckCount(v uint8) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetCheckCount(v)
	})
}

// UpdateCheckCount sets the "check_count" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateCheckCount() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateCheckCount()
	})
}

// SetStatus sets the "status" field.
func (u *SmsLogUpsertOne) SetStatus(v uint) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateStatus() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateStatus()
	})
}

// SetReturnMsg sets the "return_msg" field.
func (u *SmsLogUpsertOne) SetReturnMsg(v string) *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetReturnMsg(v)
	})
}

// UpdateReturnMsg sets the "return_msg" field to the value that was provided on create.
func (u *SmsLogUpsertOne) UpdateReturnMsg() *SmsLogUpsertOne {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateReturnMsg()
	})
}

// Exec executes the query.
func (u *SmsLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SmsLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SmsLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SmsLogUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SmsLogUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SmsLogCreateBulk is the builder for creating many SmsLog entities in bulk.
type SmsLogCreateBulk struct {
	config
	builders []*SmsLogCreate
	conflict []sql.ConflictOption
}

// Save creates the SmsLog entities in the database.
func (slcb *SmsLogCreateBulk) Save(ctx context.Context) ([]*SmsLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(slcb.builders))
	nodes := make([]*SmsLog, len(slcb.builders))
	mutators := make([]Mutator, len(slcb.builders))
	for i := range slcb.builders {
		func(i int, root context.Context) {
			builder := slcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SmsLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, slcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = slcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, slcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, slcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (slcb *SmsLogCreateBulk) SaveX(ctx context.Context) []*SmsLog {
	v, err := slcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slcb *SmsLogCreateBulk) Exec(ctx context.Context) error {
	_, err := slcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slcb *SmsLogCreateBulk) ExecX(ctx context.Context) {
	if err := slcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SmsLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SmsLogUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (slcb *SmsLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *SmsLogUpsertBulk {
	slcb.conflict = opts
	return &SmsLogUpsertBulk{
		create: slcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SmsLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (slcb *SmsLogCreateBulk) OnConflictColumns(columns ...string) *SmsLogUpsertBulk {
	slcb.conflict = append(slcb.conflict, sql.ConflictColumns(columns...))
	return &SmsLogUpsertBulk{
		create: slcb,
	}
}

// SmsLogUpsertBulk is the builder for "upsert"-ing
// a bulk of SmsLog nodes.
type SmsLogUpsertBulk struct {
	create *SmsLogCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SmsLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(smslog.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SmsLogUpsertBulk) UpdateNewValues() *SmsLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(smslog.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SmsLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SmsLogUpsertBulk) Ignore() *SmsLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SmsLogUpsertBulk) DoNothing() *SmsLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SmsLogCreateBulk.OnConflict
// documentation for more info.
func (u *SmsLogUpsertBulk) Update(set func(*SmsLogUpsert)) *SmsLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SmsLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *SmsLogUpsertBulk) SetCreateTime(v int64) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateCreateTime() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateCreateTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *SmsLogUpsertBulk) SetCreateBy(v uint64) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateCreateBy() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateCreateBy()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *SmsLogUpsertBulk) SetUpdateTime(v int64) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateUpdateTime() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *SmsLogUpsertBulk) SetUpdateBy(v uint64) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateUpdateBy() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateUpdateBy()
	})
}

// SetAppID sets the "app_id" field.
func (u *SmsLogUpsertBulk) SetAppID(v uint64) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateAppID() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateAppID()
	})
}

// SetDialCode sets the "dial_code" field.
func (u *SmsLogUpsertBulk) SetDialCode(v string) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetDialCode(v)
	})
}

// UpdateDialCode sets the "dial_code" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateDialCode() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateDialCode()
	})
}

// SetMobile sets the "mobile" field.
func (u *SmsLogUpsertBulk) SetMobile(v string) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateMobile() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateMobile()
	})
}

// SetScope sets the "scope" field.
func (u *SmsLogUpsertBulk) SetScope(v string) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateScope() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateScope()
	})
}

// SetTypeID sets the "type_id" field.
func (u *SmsLogUpsertBulk) SetTypeID(v uint64) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetTypeID(v)
	})
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateTypeID() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateTypeID()
	})
}

// SetGateway sets the "gateway" field.
func (u *SmsLogUpsertBulk) SetGateway(v string) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetGateway(v)
	})
}

// UpdateGateway sets the "gateway" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateGateway() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateGateway()
	})
}

// SetIP sets the "ip" field.
func (u *SmsLogUpsertBulk) SetIP(v string) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateIP() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateIP()
	})
}

// SetTemplateID sets the "template_id" field.
func (u *SmsLogUpsertBulk) SetTemplateID(v string) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateTemplateID() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateTemplateID()
	})
}

// SetTemplateText sets the "template_text" field.
func (u *SmsLogUpsertBulk) SetTemplateText(v string) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetTemplateText(v)
	})
}

// UpdateTemplateText sets the "template_text" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateTemplateText() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateTemplateText()
	})
}

// SetContent sets the "content" field.
func (u *SmsLogUpsertBulk) SetContent(v string) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateContent() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateContent()
	})
}

// SetCheckCount sets the "check_count" field.
func (u *SmsLogUpsertBulk) SetCheckCount(v uint8) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetCheckCount(v)
	})
}

// UpdateCheckCount sets the "check_count" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateCheckCount() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateCheckCount()
	})
}

// SetStatus sets the "status" field.
func (u *SmsLogUpsertBulk) SetStatus(v uint) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateStatus() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateStatus()
	})
}

// SetReturnMsg sets the "return_msg" field.
func (u *SmsLogUpsertBulk) SetReturnMsg(v string) *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.SetReturnMsg(v)
	})
}

// UpdateReturnMsg sets the "return_msg" field to the value that was provided on create.
func (u *SmsLogUpsertBulk) UpdateReturnMsg() *SmsLogUpsertBulk {
	return u.Update(func(s *SmsLogUpsert) {
		s.UpdateReturnMsg()
	})
}

// Exec executes the query.
func (u *SmsLogUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SmsLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SmsLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SmsLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
