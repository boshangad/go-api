// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/emaillog"
)

// EmailLog is the model entity for the EmailLog schema.
type EmailLog struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID uint64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime int64 `json:"create_time,omitempty"`
	// CreateBy holds the value of the "create_by" field.
	// 创建人
	CreateBy uint64 `json:"create_by,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime int64 `json:"update_time,omitempty"`
	// UpdateBy holds the value of the "update_by" field.
	// 更新人
	UpdateBy uint64 `json:"update_by,omitempty"`
	// AppID holds the value of the "app_id" field.
	// 应用
	AppID uint64 `json:"app_id,omitempty"`
	// Email holds the value of the "email" field.
	// 邮箱
	Email string `json:"email,omitempty"`
	// Scope holds the value of the "scope" field.
	// 范围
	Scope string `json:"scope,omitempty"`
	// TypeID holds the value of the "type_id" field.
	// 类型
	TypeID uint64 `json:"type_id,omitempty"`
	// Gateway holds the value of the "gateway" field.
	// 网关
	Gateway string `json:"gateway,omitempty"`
	// IP holds the value of the "ip" field.
	// IP
	IP string `json:"ip,omitempty"`
	// FromName holds the value of the "from_name" field.
	// 发信名称
	FromName string `json:"from_name,omitempty"`
	// FromAddress holds the value of the "from_address" field.
	// 发信地址
	FromAddress string `json:"from_address,omitempty"`
	// Title holds the value of the "title" field.
	// 标题
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	// 短信内容
	Content string `json:"content,omitempty"`
	// Data holds the value of the "data" field.
	// 内容参数
	Data string `json:"data,omitempty"`
	// CheckCount holds the value of the "check_count" field.
	// 检查次数
	CheckCount uint8 `json:"check_count,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status uint `json:"status,omitempty"`
	// ReturnMsg holds the value of the "return_msg" field.
	// 返回消息
	ReturnMsg string `json:"return_msg,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailLogQuery when eager-loading is set.
	Edges EmailLogEdges `json:"edges"`
}

// EmailLogEdges holds the relations/edges for other nodes in the graph.
type EmailLogEdges struct {
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailLogEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// The edge app was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case emaillog.FieldID, emaillog.FieldCreateTime, emaillog.FieldCreateBy, emaillog.FieldUpdateTime, emaillog.FieldUpdateBy, emaillog.FieldAppID, emaillog.FieldTypeID, emaillog.FieldCheckCount, emaillog.FieldStatus:
			values[i] = new(sql.NullInt64)
		case emaillog.FieldEmail, emaillog.FieldScope, emaillog.FieldGateway, emaillog.FieldIP, emaillog.FieldFromName, emaillog.FieldFromAddress, emaillog.FieldTitle, emaillog.FieldContent, emaillog.FieldData, emaillog.FieldReturnMsg:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EmailLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailLog fields.
func (el *EmailLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emaillog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			el.ID = uint64(value.Int64)
		case emaillog.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				el.CreateTime = value.Int64
			}
		case emaillog.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				el.CreateBy = uint64(value.Int64)
			}
		case emaillog.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				el.UpdateTime = value.Int64
			}
		case emaillog.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				el.UpdateBy = uint64(value.Int64)
			}
		case emaillog.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				el.AppID = uint64(value.Int64)
			}
		case emaillog.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				el.Email = value.String
			}
		case emaillog.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				el.Scope = value.String
			}
		case emaillog.FieldTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type_id", values[i])
			} else if value.Valid {
				el.TypeID = uint64(value.Int64)
			}
		case emaillog.FieldGateway:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gateway", values[i])
			} else if value.Valid {
				el.Gateway = value.String
			}
		case emaillog.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				el.IP = value.String
			}
		case emaillog.FieldFromName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_name", values[i])
			} else if value.Valid {
				el.FromName = value.String
			}
		case emaillog.FieldFromAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_address", values[i])
			} else if value.Valid {
				el.FromAddress = value.String
			}
		case emaillog.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				el.Title = value.String
			}
		case emaillog.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				el.Content = value.String
			}
		case emaillog.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				el.Data = value.String
			}
		case emaillog.FieldCheckCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field check_count", values[i])
			} else if value.Valid {
				el.CheckCount = uint8(value.Int64)
			}
		case emaillog.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				el.Status = uint(value.Int64)
			}
		case emaillog.FieldReturnMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field return_msg", values[i])
			} else if value.Valid {
				el.ReturnMsg = value.String
			}
		}
	}
	return nil
}

// QueryApp queries the "app" edge of the EmailLog entity.
func (el *EmailLog) QueryApp() *AppQuery {
	return (&EmailLogClient{config: el.config}).QueryApp(el)
}

// Update returns a builder for updating this EmailLog.
// Note that you need to call EmailLog.Unwrap() before calling this method if this EmailLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (el *EmailLog) Update() *EmailLogUpdateOne {
	return (&EmailLogClient{config: el.config}).UpdateOne(el)
}

// Unwrap unwraps the EmailLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (el *EmailLog) Unwrap() *EmailLog {
	tx, ok := el.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailLog is not a transactional entity")
	}
	el.config.driver = tx.drv
	return el
}

// String implements the fmt.Stringer.
func (el *EmailLog) String() string {
	var builder strings.Builder
	builder.WriteString("EmailLog(")
	builder.WriteString(fmt.Sprintf("id=%v", el.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", el.CreateTime))
	builder.WriteString(", create_by=")
	builder.WriteString(fmt.Sprintf("%v", el.CreateBy))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", el.UpdateTime))
	builder.WriteString(", update_by=")
	builder.WriteString(fmt.Sprintf("%v", el.UpdateBy))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", el.AppID))
	builder.WriteString(", email=")
	builder.WriteString(el.Email)
	builder.WriteString(", scope=")
	builder.WriteString(el.Scope)
	builder.WriteString(", type_id=")
	builder.WriteString(fmt.Sprintf("%v", el.TypeID))
	builder.WriteString(", gateway=")
	builder.WriteString(el.Gateway)
	builder.WriteString(", ip=")
	builder.WriteString(el.IP)
	builder.WriteString(", from_name=")
	builder.WriteString(el.FromName)
	builder.WriteString(", from_address=")
	builder.WriteString(el.FromAddress)
	builder.WriteString(", title=")
	builder.WriteString(el.Title)
	builder.WriteString(", content=")
	builder.WriteString(el.Content)
	builder.WriteString(", data=")
	builder.WriteString(el.Data)
	builder.WriteString(", check_count=")
	builder.WriteString(fmt.Sprintf("%v", el.CheckCount))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", el.Status))
	builder.WriteString(", return_msg=")
	builder.WriteString(el.ReturnMsg)
	builder.WriteByte(')')
	return builder.String()
}

// EmailLogs is a parsable slice of EmailLog.
type EmailLogs []*EmailLog

func (el EmailLogs) config(cfg config) {
	for _i := range el {
		el[_i].config = cfg
	}
}
