// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/appuser"
	"github.com/boshangad/v1/ent/appusertoken"
	"github.com/boshangad/v1/ent/internal"
	"github.com/boshangad/v1/ent/predicate"
	"github.com/boshangad/v1/ent/user"
	"github.com/google/uuid"
)

// AppUserTokenUpdate is the builder for updating AppUserToken entities.
type AppUserTokenUpdate struct {
	config
	hooks    []Hook
	mutation *AppUserTokenMutation
}

// Where appends a list predicates to the AppUserTokenUpdate builder.
func (autu *AppUserTokenUpdate) Where(ps ...predicate.AppUserToken) *AppUserTokenUpdate {
	autu.mutation.Where(ps...)
	return autu
}

// SetAppID sets the "app_id" field.
func (autu *AppUserTokenUpdate) SetAppID(u uint64) *AppUserTokenUpdate {
	autu.mutation.SetAppID(u)
	return autu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (autu *AppUserTokenUpdate) SetNillableAppID(u *uint64) *AppUserTokenUpdate {
	if u != nil {
		autu.SetAppID(*u)
	}
	return autu
}

// SetAppUserID sets the "app_user_id" field.
func (autu *AppUserTokenUpdate) SetAppUserID(u uint64) *AppUserTokenUpdate {
	autu.mutation.SetAppUserID(u)
	return autu
}

// SetNillableAppUserID sets the "app_user_id" field if the given value is not nil.
func (autu *AppUserTokenUpdate) SetNillableAppUserID(u *uint64) *AppUserTokenUpdate {
	if u != nil {
		autu.SetAppUserID(*u)
	}
	return autu
}

// SetUserID sets the "user_id" field.
func (autu *AppUserTokenUpdate) SetUserID(u uint64) *AppUserTokenUpdate {
	autu.mutation.SetUserID(u)
	return autu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (autu *AppUserTokenUpdate) SetNillableUserID(u *uint64) *AppUserTokenUpdate {
	if u != nil {
		autu.SetUserID(*u)
	}
	return autu
}

// SetClientVersion sets the "client_version" field.
func (autu *AppUserTokenUpdate) SetClientVersion(s string) *AppUserTokenUpdate {
	autu.mutation.SetClientVersion(s)
	return autu
}

// SetNillableClientVersion sets the "client_version" field if the given value is not nil.
func (autu *AppUserTokenUpdate) SetNillableClientVersion(s *string) *AppUserTokenUpdate {
	if s != nil {
		autu.SetClientVersion(*s)
	}
	return autu
}

// SetUUID sets the "uuid" field.
func (autu *AppUserTokenUpdate) SetUUID(u *uuid.UUID) *AppUserTokenUpdate {
	autu.mutation.SetUUID(u)
	return autu
}

// SetIP sets the "ip" field.
func (autu *AppUserTokenUpdate) SetIP(s string) *AppUserTokenUpdate {
	autu.mutation.SetIP(s)
	return autu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (autu *AppUserTokenUpdate) SetNillableIP(s *string) *AppUserTokenUpdate {
	if s != nil {
		autu.SetIP(*s)
	}
	return autu
}

// SetExpireTime sets the "expire_time" field.
func (autu *AppUserTokenUpdate) SetExpireTime(i int64) *AppUserTokenUpdate {
	autu.mutation.ResetExpireTime()
	autu.mutation.SetExpireTime(i)
	return autu
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (autu *AppUserTokenUpdate) SetNillableExpireTime(i *int64) *AppUserTokenUpdate {
	if i != nil {
		autu.SetExpireTime(*i)
	}
	return autu
}

// AddExpireTime adds i to the "expire_time" field.
func (autu *AppUserTokenUpdate) AddExpireTime(i int64) *AppUserTokenUpdate {
	autu.mutation.AddExpireTime(i)
	return autu
}

// SetApp sets the "app" edge to the App entity.
func (autu *AppUserTokenUpdate) SetApp(a *App) *AppUserTokenUpdate {
	return autu.SetAppID(a.ID)
}

// SetAppUser sets the "appUser" edge to the AppUser entity.
func (autu *AppUserTokenUpdate) SetAppUser(a *AppUser) *AppUserTokenUpdate {
	return autu.SetAppUserID(a.ID)
}

// SetUser sets the "user" edge to the User entity.
func (autu *AppUserTokenUpdate) SetUser(u *User) *AppUserTokenUpdate {
	return autu.SetUserID(u.ID)
}

// Mutation returns the AppUserTokenMutation object of the builder.
func (autu *AppUserTokenUpdate) Mutation() *AppUserTokenMutation {
	return autu.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (autu *AppUserTokenUpdate) ClearApp() *AppUserTokenUpdate {
	autu.mutation.ClearApp()
	return autu
}

// ClearAppUser clears the "appUser" edge to the AppUser entity.
func (autu *AppUserTokenUpdate) ClearAppUser() *AppUserTokenUpdate {
	autu.mutation.ClearAppUser()
	return autu
}

// ClearUser clears the "user" edge to the User entity.
func (autu *AppUserTokenUpdate) ClearUser() *AppUserTokenUpdate {
	autu.mutation.ClearUser()
	return autu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (autu *AppUserTokenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(autu.hooks) == 0 {
		if err = autu.check(); err != nil {
			return 0, err
		}
		affected, err = autu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = autu.check(); err != nil {
				return 0, err
			}
			autu.mutation = mutation
			affected, err = autu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(autu.hooks) - 1; i >= 0; i-- {
			if autu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = autu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, autu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (autu *AppUserTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := autu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (autu *AppUserTokenUpdate) Exec(ctx context.Context) error {
	_, err := autu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (autu *AppUserTokenUpdate) ExecX(ctx context.Context) {
	if err := autu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (autu *AppUserTokenUpdate) check() error {
	if v, ok := autu.mutation.ClientVersion(); ok {
		if err := appusertoken.ClientVersionValidator(v); err != nil {
			return &ValidationError{Name: "client_version", err: fmt.Errorf("ent: validator failed for field \"client_version\": %w", err)}
		}
	}
	if v, ok := autu.mutation.IP(); ok {
		if err := appusertoken.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf("ent: validator failed for field \"ip\": %w", err)}
		}
	}
	if _, ok := autu.mutation.AppID(); autu.mutation.AppCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"app\"")
	}
	if _, ok := autu.mutation.AppUserID(); autu.mutation.AppUserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"appUser\"")
	}
	if _, ok := autu.mutation.UserID(); autu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (autu *AppUserTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appusertoken.Table,
			Columns: appusertoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: appusertoken.FieldID,
			},
		},
	}
	if ps := autu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := autu.mutation.ClientVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appusertoken.FieldClientVersion,
		})
	}
	if value, ok := autu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: appusertoken.FieldUUID,
		})
	}
	if value, ok := autu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appusertoken.FieldIP,
		})
	}
	if value, ok := autu.mutation.ExpireTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appusertoken.FieldExpireTime,
		})
	}
	if value, ok := autu.mutation.AddedExpireTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appusertoken.FieldExpireTime,
		})
	}
	if autu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.AppTable,
			Columns: []string{appusertoken.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = autu.schemaConfig.AppUserToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := autu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.AppTable,
			Columns: []string{appusertoken.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = autu.schemaConfig.AppUserToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if autu.mutation.AppUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.AppUserTable,
			Columns: []string{appusertoken.AppUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appuser.FieldID,
				},
			},
		}
		edge.Schema = autu.schemaConfig.AppUserToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := autu.mutation.AppUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.AppUserTable,
			Columns: []string{appusertoken.AppUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appuser.FieldID,
				},
			},
		}
		edge.Schema = autu.schemaConfig.AppUserToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if autu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.UserTable,
			Columns: []string{appusertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = autu.schemaConfig.AppUserToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := autu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.UserTable,
			Columns: []string{appusertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = autu.schemaConfig.AppUserToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = autu.schemaConfig.AppUserToken
	ctx = internal.NewSchemaConfigContext(ctx, autu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, autu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appusertoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppUserTokenUpdateOne is the builder for updating a single AppUserToken entity.
type AppUserTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppUserTokenMutation
}

// SetAppID sets the "app_id" field.
func (autuo *AppUserTokenUpdateOne) SetAppID(u uint64) *AppUserTokenUpdateOne {
	autuo.mutation.SetAppID(u)
	return autuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (autuo *AppUserTokenUpdateOne) SetNillableAppID(u *uint64) *AppUserTokenUpdateOne {
	if u != nil {
		autuo.SetAppID(*u)
	}
	return autuo
}

// SetAppUserID sets the "app_user_id" field.
func (autuo *AppUserTokenUpdateOne) SetAppUserID(u uint64) *AppUserTokenUpdateOne {
	autuo.mutation.SetAppUserID(u)
	return autuo
}

// SetNillableAppUserID sets the "app_user_id" field if the given value is not nil.
func (autuo *AppUserTokenUpdateOne) SetNillableAppUserID(u *uint64) *AppUserTokenUpdateOne {
	if u != nil {
		autuo.SetAppUserID(*u)
	}
	return autuo
}

// SetUserID sets the "user_id" field.
func (autuo *AppUserTokenUpdateOne) SetUserID(u uint64) *AppUserTokenUpdateOne {
	autuo.mutation.SetUserID(u)
	return autuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (autuo *AppUserTokenUpdateOne) SetNillableUserID(u *uint64) *AppUserTokenUpdateOne {
	if u != nil {
		autuo.SetUserID(*u)
	}
	return autuo
}

// SetClientVersion sets the "client_version" field.
func (autuo *AppUserTokenUpdateOne) SetClientVersion(s string) *AppUserTokenUpdateOne {
	autuo.mutation.SetClientVersion(s)
	return autuo
}

// SetNillableClientVersion sets the "client_version" field if the given value is not nil.
func (autuo *AppUserTokenUpdateOne) SetNillableClientVersion(s *string) *AppUserTokenUpdateOne {
	if s != nil {
		autuo.SetClientVersion(*s)
	}
	return autuo
}

// SetUUID sets the "uuid" field.
func (autuo *AppUserTokenUpdateOne) SetUUID(u *uuid.UUID) *AppUserTokenUpdateOne {
	autuo.mutation.SetUUID(u)
	return autuo
}

// SetIP sets the "ip" field.
func (autuo *AppUserTokenUpdateOne) SetIP(s string) *AppUserTokenUpdateOne {
	autuo.mutation.SetIP(s)
	return autuo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (autuo *AppUserTokenUpdateOne) SetNillableIP(s *string) *AppUserTokenUpdateOne {
	if s != nil {
		autuo.SetIP(*s)
	}
	return autuo
}

// SetExpireTime sets the "expire_time" field.
func (autuo *AppUserTokenUpdateOne) SetExpireTime(i int64) *AppUserTokenUpdateOne {
	autuo.mutation.ResetExpireTime()
	autuo.mutation.SetExpireTime(i)
	return autuo
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (autuo *AppUserTokenUpdateOne) SetNillableExpireTime(i *int64) *AppUserTokenUpdateOne {
	if i != nil {
		autuo.SetExpireTime(*i)
	}
	return autuo
}

// AddExpireTime adds i to the "expire_time" field.
func (autuo *AppUserTokenUpdateOne) AddExpireTime(i int64) *AppUserTokenUpdateOne {
	autuo.mutation.AddExpireTime(i)
	return autuo
}

// SetApp sets the "app" edge to the App entity.
func (autuo *AppUserTokenUpdateOne) SetApp(a *App) *AppUserTokenUpdateOne {
	return autuo.SetAppID(a.ID)
}

// SetAppUser sets the "appUser" edge to the AppUser entity.
func (autuo *AppUserTokenUpdateOne) SetAppUser(a *AppUser) *AppUserTokenUpdateOne {
	return autuo.SetAppUserID(a.ID)
}

// SetUser sets the "user" edge to the User entity.
func (autuo *AppUserTokenUpdateOne) SetUser(u *User) *AppUserTokenUpdateOne {
	return autuo.SetUserID(u.ID)
}

// Mutation returns the AppUserTokenMutation object of the builder.
func (autuo *AppUserTokenUpdateOne) Mutation() *AppUserTokenMutation {
	return autuo.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (autuo *AppUserTokenUpdateOne) ClearApp() *AppUserTokenUpdateOne {
	autuo.mutation.ClearApp()
	return autuo
}

// ClearAppUser clears the "appUser" edge to the AppUser entity.
func (autuo *AppUserTokenUpdateOne) ClearAppUser() *AppUserTokenUpdateOne {
	autuo.mutation.ClearAppUser()
	return autuo
}

// ClearUser clears the "user" edge to the User entity.
func (autuo *AppUserTokenUpdateOne) ClearUser() *AppUserTokenUpdateOne {
	autuo.mutation.ClearUser()
	return autuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (autuo *AppUserTokenUpdateOne) Select(field string, fields ...string) *AppUserTokenUpdateOne {
	autuo.fields = append([]string{field}, fields...)
	return autuo
}

// Save executes the query and returns the updated AppUserToken entity.
func (autuo *AppUserTokenUpdateOne) Save(ctx context.Context) (*AppUserToken, error) {
	var (
		err  error
		node *AppUserToken
	)
	if len(autuo.hooks) == 0 {
		if err = autuo.check(); err != nil {
			return nil, err
		}
		node, err = autuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = autuo.check(); err != nil {
				return nil, err
			}
			autuo.mutation = mutation
			node, err = autuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(autuo.hooks) - 1; i >= 0; i-- {
			if autuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = autuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, autuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (autuo *AppUserTokenUpdateOne) SaveX(ctx context.Context) *AppUserToken {
	node, err := autuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (autuo *AppUserTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := autuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (autuo *AppUserTokenUpdateOne) ExecX(ctx context.Context) {
	if err := autuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (autuo *AppUserTokenUpdateOne) check() error {
	if v, ok := autuo.mutation.ClientVersion(); ok {
		if err := appusertoken.ClientVersionValidator(v); err != nil {
			return &ValidationError{Name: "client_version", err: fmt.Errorf("ent: validator failed for field \"client_version\": %w", err)}
		}
	}
	if v, ok := autuo.mutation.IP(); ok {
		if err := appusertoken.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf("ent: validator failed for field \"ip\": %w", err)}
		}
	}
	if _, ok := autuo.mutation.AppID(); autuo.mutation.AppCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"app\"")
	}
	if _, ok := autuo.mutation.AppUserID(); autuo.mutation.AppUserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"appUser\"")
	}
	if _, ok := autuo.mutation.UserID(); autuo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (autuo *AppUserTokenUpdateOne) sqlSave(ctx context.Context) (_node *AppUserToken, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appusertoken.Table,
			Columns: appusertoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: appusertoken.FieldID,
			},
		},
	}
	id, ok := autuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AppUserToken.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := autuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appusertoken.FieldID)
		for _, f := range fields {
			if !appusertoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appusertoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := autuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := autuo.mutation.ClientVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appusertoken.FieldClientVersion,
		})
	}
	if value, ok := autuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: appusertoken.FieldUUID,
		})
	}
	if value, ok := autuo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appusertoken.FieldIP,
		})
	}
	if value, ok := autuo.mutation.ExpireTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appusertoken.FieldExpireTime,
		})
	}
	if value, ok := autuo.mutation.AddedExpireTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appusertoken.FieldExpireTime,
		})
	}
	if autuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.AppTable,
			Columns: []string{appusertoken.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = autuo.schemaConfig.AppUserToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := autuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.AppTable,
			Columns: []string{appusertoken.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = autuo.schemaConfig.AppUserToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if autuo.mutation.AppUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.AppUserTable,
			Columns: []string{appusertoken.AppUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appuser.FieldID,
				},
			},
		}
		edge.Schema = autuo.schemaConfig.AppUserToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := autuo.mutation.AppUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.AppUserTable,
			Columns: []string{appusertoken.AppUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appuser.FieldID,
				},
			},
		}
		edge.Schema = autuo.schemaConfig.AppUserToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if autuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.UserTable,
			Columns: []string{appusertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = autuo.schemaConfig.AppUserToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := autuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.UserTable,
			Columns: []string{appusertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = autuo.schemaConfig.AppUserToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = autuo.schemaConfig.AppUserToken
	ctx = internal.NewSchemaConfigContext(ctx, autuo.schemaConfig)
	_node = &AppUserToken{config: autuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, autuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appusertoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
