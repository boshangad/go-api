// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/appuser"
	"github.com/boshangad/v1/ent/appuserloginlog"
	"github.com/boshangad/v1/ent/user"
)

// AppUserLoginLog is the model entity for the AppUserLoginLog schema.
type AppUserLoginLog struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID uint64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime int64 `json:"create_time,omitempty"`
	// AppID holds the value of the "app_id" field.
	// 应用
	AppID uint64 `json:"app_id,omitempty"`
	// AppUserID holds the value of the "app_user_id" field.
	// 应用用户
	AppUserID uint64 `json:"app_user_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	// 用户
	UserID uint64 `json:"user_id,omitempty"`
	// LoginTypeID holds the value of the "login_type_id" field.
	// 登录方案
	LoginTypeID uint `json:"login_type_id,omitempty"`
	// IP holds the value of the "ip" field.
	// 登录IP
	IP string `json:"ip,omitempty"`
	// Content holds the value of the "content" field.
	// 内容
	Content string `json:"content,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status uint `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppUserLoginLogQuery when eager-loading is set.
	Edges AppUserLoginLogEdges `json:"edges"`
}

// AppUserLoginLogEdges holds the relations/edges for other nodes in the graph.
type AppUserLoginLogEdges struct {
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// AppUser holds the value of the appUser edge.
	AppUser *AppUser `json:"appUser,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppUserLoginLogEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// The edge app was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// AppUserOrErr returns the AppUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppUserLoginLogEdges) AppUserOrErr() (*AppUser, error) {
	if e.loadedTypes[1] {
		if e.AppUser == nil {
			// The edge appUser was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: appuser.Label}
		}
		return e.AppUser, nil
	}
	return nil, &NotLoadedError{edge: "appUser"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppUserLoginLogEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppUserLoginLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appuserloginlog.FieldID, appuserloginlog.FieldCreateTime, appuserloginlog.FieldAppID, appuserloginlog.FieldAppUserID, appuserloginlog.FieldUserID, appuserloginlog.FieldLoginTypeID, appuserloginlog.FieldStatus:
			values[i] = new(sql.NullInt64)
		case appuserloginlog.FieldIP, appuserloginlog.FieldContent:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppUserLoginLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppUserLoginLog fields.
func (aull *AppUserLoginLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appuserloginlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aull.ID = uint64(value.Int64)
		case appuserloginlog.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				aull.CreateTime = value.Int64
			}
		case appuserloginlog.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				aull.AppID = uint64(value.Int64)
			}
		case appuserloginlog.FieldAppUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_user_id", values[i])
			} else if value.Valid {
				aull.AppUserID = uint64(value.Int64)
			}
		case appuserloginlog.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				aull.UserID = uint64(value.Int64)
			}
		case appuserloginlog.FieldLoginTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field login_type_id", values[i])
			} else if value.Valid {
				aull.LoginTypeID = uint(value.Int64)
			}
		case appuserloginlog.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				aull.IP = value.String
			}
		case appuserloginlog.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				aull.Content = value.String
			}
		case appuserloginlog.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				aull.Status = uint(value.Int64)
			}
		}
	}
	return nil
}

// QueryApp queries the "app" edge of the AppUserLoginLog entity.
func (aull *AppUserLoginLog) QueryApp() *AppQuery {
	return (&AppUserLoginLogClient{config: aull.config}).QueryApp(aull)
}

// QueryAppUser queries the "appUser" edge of the AppUserLoginLog entity.
func (aull *AppUserLoginLog) QueryAppUser() *AppUserQuery {
	return (&AppUserLoginLogClient{config: aull.config}).QueryAppUser(aull)
}

// QueryUser queries the "user" edge of the AppUserLoginLog entity.
func (aull *AppUserLoginLog) QueryUser() *UserQuery {
	return (&AppUserLoginLogClient{config: aull.config}).QueryUser(aull)
}

// Update returns a builder for updating this AppUserLoginLog.
// Note that you need to call AppUserLoginLog.Unwrap() before calling this method if this AppUserLoginLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (aull *AppUserLoginLog) Update() *AppUserLoginLogUpdateOne {
	return (&AppUserLoginLogClient{config: aull.config}).UpdateOne(aull)
}

// Unwrap unwraps the AppUserLoginLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aull *AppUserLoginLog) Unwrap() *AppUserLoginLog {
	tx, ok := aull.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppUserLoginLog is not a transactional entity")
	}
	aull.config.driver = tx.drv
	return aull
}

// String implements the fmt.Stringer.
func (aull *AppUserLoginLog) String() string {
	var builder strings.Builder
	builder.WriteString("AppUserLoginLog(")
	builder.WriteString(fmt.Sprintf("id=%v", aull.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", aull.CreateTime))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", aull.AppID))
	builder.WriteString(", app_user_id=")
	builder.WriteString(fmt.Sprintf("%v", aull.AppUserID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", aull.UserID))
	builder.WriteString(", login_type_id=")
	builder.WriteString(fmt.Sprintf("%v", aull.LoginTypeID))
	builder.WriteString(", ip=")
	builder.WriteString(aull.IP)
	builder.WriteString(", content=")
	builder.WriteString(aull.Content)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", aull.Status))
	builder.WriteByte(')')
	return builder.String()
}

// AppUserLoginLogs is a parsable slice of AppUserLoginLog.
type AppUserLoginLogs []*AppUserLoginLog

func (aull AppUserLoginLogs) config(cfg config) {
	for _i := range aull {
		aull[_i].config = cfg
	}
}
