// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/appuser"
	"github.com/boshangad/v1/ent/internal"
	"github.com/boshangad/v1/ent/predicate"
	"github.com/boshangad/v1/ent/user"
)

// AppUserUpdate is the builder for updating AppUser entities.
type AppUserUpdate struct {
	config
	hooks    []Hook
	mutation *AppUserMutation
}

// Where appends a list predicates to the AppUserUpdate builder.
func (auu *AppUserUpdate) Where(ps ...predicate.AppUser) *AppUserUpdate {
	auu.mutation.Where(ps...)
	return auu
}

// SetUpdateTime sets the "update_time" field.
func (auu *AppUserUpdate) SetUpdateTime(i int64) *AppUserUpdate {
	auu.mutation.ResetUpdateTime()
	auu.mutation.SetUpdateTime(i)
	return auu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableUpdateTime(i *int64) *AppUserUpdate {
	if i != nil {
		auu.SetUpdateTime(*i)
	}
	return auu
}

// AddUpdateTime adds i to the "update_time" field.
func (auu *AppUserUpdate) AddUpdateTime(i int64) *AppUserUpdate {
	auu.mutation.AddUpdateTime(i)
	return auu
}

// SetAppID sets the "app_id" field.
func (auu *AppUserUpdate) SetAppID(u uint64) *AppUserUpdate {
	auu.mutation.SetAppID(u)
	return auu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableAppID(u *uint64) *AppUserUpdate {
	if u != nil {
		auu.SetAppID(*u)
	}
	return auu
}

// SetUserID sets the "user_id" field.
func (auu *AppUserUpdate) SetUserID(u uint64) *AppUserUpdate {
	auu.mutation.SetUserID(u)
	return auu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableUserID(u *uint64) *AppUserUpdate {
	if u != nil {
		auu.SetUserID(*u)
	}
	return auu
}

// SetOpenID sets the "open_id" field.
func (auu *AppUserUpdate) SetOpenID(s string) *AppUserUpdate {
	auu.mutation.SetOpenID(s)
	return auu
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableOpenID(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetOpenID(*s)
	}
	return auu
}

// SetUnionid sets the "unionid" field.
func (auu *AppUserUpdate) SetUnionid(s string) *AppUserUpdate {
	auu.mutation.SetUnionid(s)
	return auu
}

// SetNillableUnionid sets the "unionid" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableUnionid(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetUnionid(*s)
	}
	return auu
}

// SetSessionKey sets the "session_key" field.
func (auu *AppUserUpdate) SetSessionKey(s string) *AppUserUpdate {
	auu.mutation.SetSessionKey(s)
	return auu
}

// SetNillableSessionKey sets the "session_key" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableSessionKey(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetSessionKey(*s)
	}
	return auu
}

// SetIsLoadUserProfile sets the "is_load_user_profile" field.
func (auu *AppUserUpdate) SetIsLoadUserProfile(b bool) *AppUserUpdate {
	auu.mutation.SetIsLoadUserProfile(b)
	return auu
}

// SetNillableIsLoadUserProfile sets the "is_load_user_profile" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableIsLoadUserProfile(b *bool) *AppUserUpdate {
	if b != nil {
		auu.SetIsLoadUserProfile(*b)
	}
	return auu
}

// SetNickname sets the "nickname" field.
func (auu *AppUserUpdate) SetNickname(s string) *AppUserUpdate {
	auu.mutation.SetNickname(s)
	return auu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableNickname(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetNickname(*s)
	}
	return auu
}

// SetAvatar sets the "avatar" field.
func (auu *AppUserUpdate) SetAvatar(s string) *AppUserUpdate {
	auu.mutation.SetAvatar(s)
	return auu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableAvatar(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetAvatar(*s)
	}
	return auu
}

// SetAvatarURL sets the "avatar_url" field.
func (auu *AppUserUpdate) SetAvatarURL(s string) *AppUserUpdate {
	auu.mutation.SetAvatarURL(s)
	return auu
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableAvatarURL(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetAvatarURL(*s)
	}
	return auu
}

// SetGender sets the "gender" field.
func (auu *AppUserUpdate) SetGender(u uint) *AppUserUpdate {
	auu.mutation.ResetGender()
	auu.mutation.SetGender(u)
	return auu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableGender(u *uint) *AppUserUpdate {
	if u != nil {
		auu.SetGender(*u)
	}
	return auu
}

// AddGender adds u to the "gender" field.
func (auu *AppUserUpdate) AddGender(u uint) *AppUserUpdate {
	auu.mutation.AddGender(u)
	return auu
}

// SetCounty sets the "county" field.
func (auu *AppUserUpdate) SetCounty(s string) *AppUserUpdate {
	auu.mutation.SetCounty(s)
	return auu
}

// SetNillableCounty sets the "county" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableCounty(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetCounty(*s)
	}
	return auu
}

// SetCountryCode sets the "country_code" field.
func (auu *AppUserUpdate) SetCountryCode(s string) *AppUserUpdate {
	auu.mutation.SetCountryCode(s)
	return auu
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableCountryCode(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetCountryCode(*s)
	}
	return auu
}

// SetProvince sets the "province" field.
func (auu *AppUserUpdate) SetProvince(s string) *AppUserUpdate {
	auu.mutation.SetProvince(s)
	return auu
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableProvince(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetProvince(*s)
	}
	return auu
}

// SetCity sets the "city" field.
func (auu *AppUserUpdate) SetCity(s string) *AppUserUpdate {
	auu.mutation.SetCity(s)
	return auu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableCity(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetCity(*s)
	}
	return auu
}

// SetLanguage sets the "language" field.
func (auu *AppUserUpdate) SetLanguage(s string) *AppUserUpdate {
	auu.mutation.SetLanguage(s)
	return auu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableLanguage(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetLanguage(*s)
	}
	return auu
}

// SetPhoneNumber sets the "phone_number" field.
func (auu *AppUserUpdate) SetPhoneNumber(s string) *AppUserUpdate {
	auu.mutation.SetPhoneNumber(s)
	return auu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillablePhoneNumber(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetPhoneNumber(*s)
	}
	return auu
}

// SetPurePhoneNumber sets the "pure_phone_number" field.
func (auu *AppUserUpdate) SetPurePhoneNumber(s string) *AppUserUpdate {
	auu.mutation.SetPurePhoneNumber(s)
	return auu
}

// SetNillablePurePhoneNumber sets the "pure_phone_number" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillablePurePhoneNumber(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetPurePhoneNumber(*s)
	}
	return auu
}

// SetWatermark sets the "watermark" field.
func (auu *AppUserUpdate) SetWatermark(s string) *AppUserUpdate {
	auu.mutation.SetWatermark(s)
	return auu
}

// SetNillableWatermark sets the "watermark" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableWatermark(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetWatermark(*s)
	}
	return auu
}

// SetLoadUserProfileTime sets the "load_user_profile_time" field.
func (auu *AppUserUpdate) SetLoadUserProfileTime(u uint64) *AppUserUpdate {
	auu.mutation.ResetLoadUserProfileTime()
	auu.mutation.SetLoadUserProfileTime(u)
	return auu
}

// SetNillableLoadUserProfileTime sets the "load_user_profile_time" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableLoadUserProfileTime(u *uint64) *AppUserUpdate {
	if u != nil {
		auu.SetLoadUserProfileTime(*u)
	}
	return auu
}

// AddLoadUserProfileTime adds u to the "load_user_profile_time" field.
func (auu *AppUserUpdate) AddLoadUserProfileTime(u uint64) *AppUserUpdate {
	auu.mutation.AddLoadUserProfileTime(u)
	return auu
}

// SetLastLoginTime sets the "last_login_time" field.
func (auu *AppUserUpdate) SetLastLoginTime(u uint64) *AppUserUpdate {
	auu.mutation.ResetLastLoginTime()
	auu.mutation.SetLastLoginTime(u)
	return auu
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableLastLoginTime(u *uint64) *AppUserUpdate {
	if u != nil {
		auu.SetLastLoginTime(*u)
	}
	return auu
}

// AddLastLoginTime adds u to the "last_login_time" field.
func (auu *AppUserUpdate) AddLastLoginTime(u uint64) *AppUserUpdate {
	auu.mutation.AddLastLoginTime(u)
	return auu
}

// SetApp sets the "app" edge to the App entity.
func (auu *AppUserUpdate) SetApp(a *App) *AppUserUpdate {
	return auu.SetAppID(a.ID)
}

// SetUser sets the "user" edge to the User entity.
func (auu *AppUserUpdate) SetUser(u *User) *AppUserUpdate {
	return auu.SetUserID(u.ID)
}

// Mutation returns the AppUserMutation object of the builder.
func (auu *AppUserUpdate) Mutation() *AppUserMutation {
	return auu.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (auu *AppUserUpdate) ClearApp() *AppUserUpdate {
	auu.mutation.ClearApp()
	return auu
}

// ClearUser clears the "user" edge to the User entity.
func (auu *AppUserUpdate) ClearUser() *AppUserUpdate {
	auu.mutation.ClearUser()
	return auu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auu *AppUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(auu.hooks) == 0 {
		if err = auu.check(); err != nil {
			return 0, err
		}
		affected, err = auu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auu.check(); err != nil {
				return 0, err
			}
			auu.mutation = mutation
			affected, err = auu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(auu.hooks) - 1; i >= 0; i-- {
			if auu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (auu *AppUserUpdate) SaveX(ctx context.Context) int {
	affected, err := auu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auu *AppUserUpdate) Exec(ctx context.Context) error {
	_, err := auu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auu *AppUserUpdate) ExecX(ctx context.Context) {
	if err := auu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auu *AppUserUpdate) check() error {
	if v, ok := auu.mutation.OpenID(); ok {
		if err := appuser.OpenIDValidator(v); err != nil {
			return &ValidationError{Name: "open_id", err: fmt.Errorf("ent: validator failed for field \"open_id\": %w", err)}
		}
	}
	if v, ok := auu.mutation.Unionid(); ok {
		if err := appuser.UnionidValidator(v); err != nil {
			return &ValidationError{Name: "unionid", err: fmt.Errorf("ent: validator failed for field \"unionid\": %w", err)}
		}
	}
	if v, ok := auu.mutation.SessionKey(); ok {
		if err := appuser.SessionKeyValidator(v); err != nil {
			return &ValidationError{Name: "session_key", err: fmt.Errorf("ent: validator failed for field \"session_key\": %w", err)}
		}
	}
	if v, ok := auu.mutation.Nickname(); ok {
		if err := appuser.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf("ent: validator failed for field \"nickname\": %w", err)}
		}
	}
	if v, ok := auu.mutation.Avatar(); ok {
		if err := appuser.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf("ent: validator failed for field \"avatar\": %w", err)}
		}
	}
	if v, ok := auu.mutation.AvatarURL(); ok {
		if err := appuser.AvatarURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_url", err: fmt.Errorf("ent: validator failed for field \"avatar_url\": %w", err)}
		}
	}
	if v, ok := auu.mutation.Gender(); ok {
		if err := appuser.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf("ent: validator failed for field \"gender\": %w", err)}
		}
	}
	if v, ok := auu.mutation.County(); ok {
		if err := appuser.CountyValidator(v); err != nil {
			return &ValidationError{Name: "county", err: fmt.Errorf("ent: validator failed for field \"county\": %w", err)}
		}
	}
	if v, ok := auu.mutation.CountryCode(); ok {
		if err := appuser.CountryCodeValidator(v); err != nil {
			return &ValidationError{Name: "country_code", err: fmt.Errorf("ent: validator failed for field \"country_code\": %w", err)}
		}
	}
	if v, ok := auu.mutation.Province(); ok {
		if err := appuser.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "province", err: fmt.Errorf("ent: validator failed for field \"province\": %w", err)}
		}
	}
	if v, ok := auu.mutation.City(); ok {
		if err := appuser.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf("ent: validator failed for field \"city\": %w", err)}
		}
	}
	if v, ok := auu.mutation.Language(); ok {
		if err := appuser.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf("ent: validator failed for field \"language\": %w", err)}
		}
	}
	if v, ok := auu.mutation.PhoneNumber(); ok {
		if err := appuser.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf("ent: validator failed for field \"phone_number\": %w", err)}
		}
	}
	if v, ok := auu.mutation.PurePhoneNumber(); ok {
		if err := appuser.PurePhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "pure_phone_number", err: fmt.Errorf("ent: validator failed for field \"pure_phone_number\": %w", err)}
		}
	}
	if v, ok := auu.mutation.Watermark(); ok {
		if err := appuser.WatermarkValidator(v); err != nil {
			return &ValidationError{Name: "watermark", err: fmt.Errorf("ent: validator failed for field \"watermark\": %w", err)}
		}
	}
	if _, ok := auu.mutation.AppID(); auu.mutation.AppCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"app\"")
	}
	if _, ok := auu.mutation.UserID(); auu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (auu *AppUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appuser.Table,
			Columns: appuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: appuser.FieldID,
			},
		},
	}
	if ps := auu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appuser.FieldUpdateTime,
		})
	}
	if value, ok := auu.mutation.AddedUpdateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appuser.FieldUpdateTime,
		})
	}
	if value, ok := auu.mutation.OpenID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldOpenID,
		})
	}
	if value, ok := auu.mutation.Unionid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldUnionid,
		})
	}
	if value, ok := auu.mutation.SessionKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldSessionKey,
		})
	}
	if value, ok := auu.mutation.IsLoadUserProfile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appuser.FieldIsLoadUserProfile,
		})
	}
	if value, ok := auu.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldNickname,
		})
	}
	if value, ok := auu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldAvatar,
		})
	}
	if value, ok := auu.mutation.AvatarURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldAvatarURL,
		})
	}
	if value, ok := auu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuser.FieldGender,
		})
	}
	if value, ok := auu.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuser.FieldGender,
		})
	}
	if value, ok := auu.mutation.County(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldCounty,
		})
	}
	if value, ok := auu.mutation.CountryCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldCountryCode,
		})
	}
	if value, ok := auu.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldProvince,
		})
	}
	if value, ok := auu.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldCity,
		})
	}
	if value, ok := auu.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldLanguage,
		})
	}
	if value, ok := auu.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldPhoneNumber,
		})
	}
	if value, ok := auu.mutation.PurePhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldPurePhoneNumber,
		})
	}
	if value, ok := auu.mutation.Watermark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldWatermark,
		})
	}
	if value, ok := auu.mutation.LoadUserProfileTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuser.FieldLoadUserProfileTime,
		})
	}
	if value, ok := auu.mutation.AddedLoadUserProfileTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuser.FieldLoadUserProfileTime,
		})
	}
	if value, ok := auu.mutation.LastLoginTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuser.FieldLastLoginTime,
		})
	}
	if value, ok := auu.mutation.AddedLastLoginTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuser.FieldLastLoginTime,
		})
	}
	if auu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppTable,
			Columns: []string{appuser.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = auu.schemaConfig.AppUser
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppTable,
			Columns: []string{appuser.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = auu.schemaConfig.AppUser
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.UserTable,
			Columns: []string{appuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = auu.schemaConfig.AppUser
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.UserTable,
			Columns: []string{appuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = auu.schemaConfig.AppUser
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = auu.schemaConfig.AppUser
	ctx = internal.NewSchemaConfigContext(ctx, auu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, auu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppUserUpdateOne is the builder for updating a single AppUser entity.
type AppUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppUserMutation
}

// SetUpdateTime sets the "update_time" field.
func (auuo *AppUserUpdateOne) SetUpdateTime(i int64) *AppUserUpdateOne {
	auuo.mutation.ResetUpdateTime()
	auuo.mutation.SetUpdateTime(i)
	return auuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableUpdateTime(i *int64) *AppUserUpdateOne {
	if i != nil {
		auuo.SetUpdateTime(*i)
	}
	return auuo
}

// AddUpdateTime adds i to the "update_time" field.
func (auuo *AppUserUpdateOne) AddUpdateTime(i int64) *AppUserUpdateOne {
	auuo.mutation.AddUpdateTime(i)
	return auuo
}

// SetAppID sets the "app_id" field.
func (auuo *AppUserUpdateOne) SetAppID(u uint64) *AppUserUpdateOne {
	auuo.mutation.SetAppID(u)
	return auuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableAppID(u *uint64) *AppUserUpdateOne {
	if u != nil {
		auuo.SetAppID(*u)
	}
	return auuo
}

// SetUserID sets the "user_id" field.
func (auuo *AppUserUpdateOne) SetUserID(u uint64) *AppUserUpdateOne {
	auuo.mutation.SetUserID(u)
	return auuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableUserID(u *uint64) *AppUserUpdateOne {
	if u != nil {
		auuo.SetUserID(*u)
	}
	return auuo
}

// SetOpenID sets the "open_id" field.
func (auuo *AppUserUpdateOne) SetOpenID(s string) *AppUserUpdateOne {
	auuo.mutation.SetOpenID(s)
	return auuo
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableOpenID(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetOpenID(*s)
	}
	return auuo
}

// SetUnionid sets the "unionid" field.
func (auuo *AppUserUpdateOne) SetUnionid(s string) *AppUserUpdateOne {
	auuo.mutation.SetUnionid(s)
	return auuo
}

// SetNillableUnionid sets the "unionid" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableUnionid(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetUnionid(*s)
	}
	return auuo
}

// SetSessionKey sets the "session_key" field.
func (auuo *AppUserUpdateOne) SetSessionKey(s string) *AppUserUpdateOne {
	auuo.mutation.SetSessionKey(s)
	return auuo
}

// SetNillableSessionKey sets the "session_key" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableSessionKey(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetSessionKey(*s)
	}
	return auuo
}

// SetIsLoadUserProfile sets the "is_load_user_profile" field.
func (auuo *AppUserUpdateOne) SetIsLoadUserProfile(b bool) *AppUserUpdateOne {
	auuo.mutation.SetIsLoadUserProfile(b)
	return auuo
}

// SetNillableIsLoadUserProfile sets the "is_load_user_profile" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableIsLoadUserProfile(b *bool) *AppUserUpdateOne {
	if b != nil {
		auuo.SetIsLoadUserProfile(*b)
	}
	return auuo
}

// SetNickname sets the "nickname" field.
func (auuo *AppUserUpdateOne) SetNickname(s string) *AppUserUpdateOne {
	auuo.mutation.SetNickname(s)
	return auuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableNickname(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetNickname(*s)
	}
	return auuo
}

// SetAvatar sets the "avatar" field.
func (auuo *AppUserUpdateOne) SetAvatar(s string) *AppUserUpdateOne {
	auuo.mutation.SetAvatar(s)
	return auuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableAvatar(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetAvatar(*s)
	}
	return auuo
}

// SetAvatarURL sets the "avatar_url" field.
func (auuo *AppUserUpdateOne) SetAvatarURL(s string) *AppUserUpdateOne {
	auuo.mutation.SetAvatarURL(s)
	return auuo
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableAvatarURL(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetAvatarURL(*s)
	}
	return auuo
}

// SetGender sets the "gender" field.
func (auuo *AppUserUpdateOne) SetGender(u uint) *AppUserUpdateOne {
	auuo.mutation.ResetGender()
	auuo.mutation.SetGender(u)
	return auuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableGender(u *uint) *AppUserUpdateOne {
	if u != nil {
		auuo.SetGender(*u)
	}
	return auuo
}

// AddGender adds u to the "gender" field.
func (auuo *AppUserUpdateOne) AddGender(u uint) *AppUserUpdateOne {
	auuo.mutation.AddGender(u)
	return auuo
}

// SetCounty sets the "county" field.
func (auuo *AppUserUpdateOne) SetCounty(s string) *AppUserUpdateOne {
	auuo.mutation.SetCounty(s)
	return auuo
}

// SetNillableCounty sets the "county" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableCounty(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetCounty(*s)
	}
	return auuo
}

// SetCountryCode sets the "country_code" field.
func (auuo *AppUserUpdateOne) SetCountryCode(s string) *AppUserUpdateOne {
	auuo.mutation.SetCountryCode(s)
	return auuo
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableCountryCode(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetCountryCode(*s)
	}
	return auuo
}

// SetProvince sets the "province" field.
func (auuo *AppUserUpdateOne) SetProvince(s string) *AppUserUpdateOne {
	auuo.mutation.SetProvince(s)
	return auuo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableProvince(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetProvince(*s)
	}
	return auuo
}

// SetCity sets the "city" field.
func (auuo *AppUserUpdateOne) SetCity(s string) *AppUserUpdateOne {
	auuo.mutation.SetCity(s)
	return auuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableCity(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetCity(*s)
	}
	return auuo
}

// SetLanguage sets the "language" field.
func (auuo *AppUserUpdateOne) SetLanguage(s string) *AppUserUpdateOne {
	auuo.mutation.SetLanguage(s)
	return auuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableLanguage(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetLanguage(*s)
	}
	return auuo
}

// SetPhoneNumber sets the "phone_number" field.
func (auuo *AppUserUpdateOne) SetPhoneNumber(s string) *AppUserUpdateOne {
	auuo.mutation.SetPhoneNumber(s)
	return auuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillablePhoneNumber(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetPhoneNumber(*s)
	}
	return auuo
}

// SetPurePhoneNumber sets the "pure_phone_number" field.
func (auuo *AppUserUpdateOne) SetPurePhoneNumber(s string) *AppUserUpdateOne {
	auuo.mutation.SetPurePhoneNumber(s)
	return auuo
}

// SetNillablePurePhoneNumber sets the "pure_phone_number" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillablePurePhoneNumber(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetPurePhoneNumber(*s)
	}
	return auuo
}

// SetWatermark sets the "watermark" field.
func (auuo *AppUserUpdateOne) SetWatermark(s string) *AppUserUpdateOne {
	auuo.mutation.SetWatermark(s)
	return auuo
}

// SetNillableWatermark sets the "watermark" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableWatermark(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetWatermark(*s)
	}
	return auuo
}

// SetLoadUserProfileTime sets the "load_user_profile_time" field.
func (auuo *AppUserUpdateOne) SetLoadUserProfileTime(u uint64) *AppUserUpdateOne {
	auuo.mutation.ResetLoadUserProfileTime()
	auuo.mutation.SetLoadUserProfileTime(u)
	return auuo
}

// SetNillableLoadUserProfileTime sets the "load_user_profile_time" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableLoadUserProfileTime(u *uint64) *AppUserUpdateOne {
	if u != nil {
		auuo.SetLoadUserProfileTime(*u)
	}
	return auuo
}

// AddLoadUserProfileTime adds u to the "load_user_profile_time" field.
func (auuo *AppUserUpdateOne) AddLoadUserProfileTime(u uint64) *AppUserUpdateOne {
	auuo.mutation.AddLoadUserProfileTime(u)
	return auuo
}

// SetLastLoginTime sets the "last_login_time" field.
func (auuo *AppUserUpdateOne) SetLastLoginTime(u uint64) *AppUserUpdateOne {
	auuo.mutation.ResetLastLoginTime()
	auuo.mutation.SetLastLoginTime(u)
	return auuo
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableLastLoginTime(u *uint64) *AppUserUpdateOne {
	if u != nil {
		auuo.SetLastLoginTime(*u)
	}
	return auuo
}

// AddLastLoginTime adds u to the "last_login_time" field.
func (auuo *AppUserUpdateOne) AddLastLoginTime(u uint64) *AppUserUpdateOne {
	auuo.mutation.AddLastLoginTime(u)
	return auuo
}

// SetApp sets the "app" edge to the App entity.
func (auuo *AppUserUpdateOne) SetApp(a *App) *AppUserUpdateOne {
	return auuo.SetAppID(a.ID)
}

// SetUser sets the "user" edge to the User entity.
func (auuo *AppUserUpdateOne) SetUser(u *User) *AppUserUpdateOne {
	return auuo.SetUserID(u.ID)
}

// Mutation returns the AppUserMutation object of the builder.
func (auuo *AppUserUpdateOne) Mutation() *AppUserMutation {
	return auuo.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (auuo *AppUserUpdateOne) ClearApp() *AppUserUpdateOne {
	auuo.mutation.ClearApp()
	return auuo
}

// ClearUser clears the "user" edge to the User entity.
func (auuo *AppUserUpdateOne) ClearUser() *AppUserUpdateOne {
	auuo.mutation.ClearUser()
	return auuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auuo *AppUserUpdateOne) Select(field string, fields ...string) *AppUserUpdateOne {
	auuo.fields = append([]string{field}, fields...)
	return auuo
}

// Save executes the query and returns the updated AppUser entity.
func (auuo *AppUserUpdateOne) Save(ctx context.Context) (*AppUser, error) {
	var (
		err  error
		node *AppUser
	)
	if len(auuo.hooks) == 0 {
		if err = auuo.check(); err != nil {
			return nil, err
		}
		node, err = auuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auuo.check(); err != nil {
				return nil, err
			}
			auuo.mutation = mutation
			node, err = auuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auuo.hooks) - 1; i >= 0; i-- {
			if auuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auuo *AppUserUpdateOne) SaveX(ctx context.Context) *AppUser {
	node, err := auuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auuo *AppUserUpdateOne) Exec(ctx context.Context) error {
	_, err := auuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auuo *AppUserUpdateOne) ExecX(ctx context.Context) {
	if err := auuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auuo *AppUserUpdateOne) check() error {
	if v, ok := auuo.mutation.OpenID(); ok {
		if err := appuser.OpenIDValidator(v); err != nil {
			return &ValidationError{Name: "open_id", err: fmt.Errorf("ent: validator failed for field \"open_id\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.Unionid(); ok {
		if err := appuser.UnionidValidator(v); err != nil {
			return &ValidationError{Name: "unionid", err: fmt.Errorf("ent: validator failed for field \"unionid\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.SessionKey(); ok {
		if err := appuser.SessionKeyValidator(v); err != nil {
			return &ValidationError{Name: "session_key", err: fmt.Errorf("ent: validator failed for field \"session_key\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.Nickname(); ok {
		if err := appuser.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf("ent: validator failed for field \"nickname\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.Avatar(); ok {
		if err := appuser.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf("ent: validator failed for field \"avatar\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.AvatarURL(); ok {
		if err := appuser.AvatarURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_url", err: fmt.Errorf("ent: validator failed for field \"avatar_url\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.Gender(); ok {
		if err := appuser.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf("ent: validator failed for field \"gender\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.County(); ok {
		if err := appuser.CountyValidator(v); err != nil {
			return &ValidationError{Name: "county", err: fmt.Errorf("ent: validator failed for field \"county\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.CountryCode(); ok {
		if err := appuser.CountryCodeValidator(v); err != nil {
			return &ValidationError{Name: "country_code", err: fmt.Errorf("ent: validator failed for field \"country_code\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.Province(); ok {
		if err := appuser.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "province", err: fmt.Errorf("ent: validator failed for field \"province\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.City(); ok {
		if err := appuser.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf("ent: validator failed for field \"city\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.Language(); ok {
		if err := appuser.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf("ent: validator failed for field \"language\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.PhoneNumber(); ok {
		if err := appuser.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf("ent: validator failed for field \"phone_number\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.PurePhoneNumber(); ok {
		if err := appuser.PurePhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "pure_phone_number", err: fmt.Errorf("ent: validator failed for field \"pure_phone_number\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.Watermark(); ok {
		if err := appuser.WatermarkValidator(v); err != nil {
			return &ValidationError{Name: "watermark", err: fmt.Errorf("ent: validator failed for field \"watermark\": %w", err)}
		}
	}
	if _, ok := auuo.mutation.AppID(); auuo.mutation.AppCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"app\"")
	}
	if _, ok := auuo.mutation.UserID(); auuo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (auuo *AppUserUpdateOne) sqlSave(ctx context.Context) (_node *AppUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appuser.Table,
			Columns: appuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: appuser.FieldID,
			},
		},
	}
	id, ok := auuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AppUser.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appuser.FieldID)
		for _, f := range fields {
			if !appuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appuser.FieldUpdateTime,
		})
	}
	if value, ok := auuo.mutation.AddedUpdateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appuser.FieldUpdateTime,
		})
	}
	if value, ok := auuo.mutation.OpenID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldOpenID,
		})
	}
	if value, ok := auuo.mutation.Unionid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldUnionid,
		})
	}
	if value, ok := auuo.mutation.SessionKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldSessionKey,
		})
	}
	if value, ok := auuo.mutation.IsLoadUserProfile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appuser.FieldIsLoadUserProfile,
		})
	}
	if value, ok := auuo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldNickname,
		})
	}
	if value, ok := auuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldAvatar,
		})
	}
	if value, ok := auuo.mutation.AvatarURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldAvatarURL,
		})
	}
	if value, ok := auuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuser.FieldGender,
		})
	}
	if value, ok := auuo.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appuser.FieldGender,
		})
	}
	if value, ok := auuo.mutation.County(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldCounty,
		})
	}
	if value, ok := auuo.mutation.CountryCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldCountryCode,
		})
	}
	if value, ok := auuo.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldProvince,
		})
	}
	if value, ok := auuo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldCity,
		})
	}
	if value, ok := auuo.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldLanguage,
		})
	}
	if value, ok := auuo.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldPhoneNumber,
		})
	}
	if value, ok := auuo.mutation.PurePhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldPurePhoneNumber,
		})
	}
	if value, ok := auuo.mutation.Watermark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuser.FieldWatermark,
		})
	}
	if value, ok := auuo.mutation.LoadUserProfileTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuser.FieldLoadUserProfileTime,
		})
	}
	if value, ok := auuo.mutation.AddedLoadUserProfileTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuser.FieldLoadUserProfileTime,
		})
	}
	if value, ok := auuo.mutation.LastLoginTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuser.FieldLastLoginTime,
		})
	}
	if value, ok := auuo.mutation.AddedLastLoginTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuser.FieldLastLoginTime,
		})
	}
	if auuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppTable,
			Columns: []string{appuser.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = auuo.schemaConfig.AppUser
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppTable,
			Columns: []string{appuser.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = auuo.schemaConfig.AppUser
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.UserTable,
			Columns: []string{appuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = auuo.schemaConfig.AppUser
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.UserTable,
			Columns: []string{appuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = auuo.schemaConfig.AppUser
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = auuo.schemaConfig.AppUser
	ctx = internal.NewSchemaConfigContext(ctx, auuo.schemaConfig)
	_node = &AppUser{config: auuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
