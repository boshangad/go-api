// Code generated by entc, DO NOT EDIT.

package appuser

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/boshangad/v1/ent/internal"
	"github.com/boshangad/v1/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// OpenID applies equality check predicate on the "open_id" field. It's identical to OpenIDEQ.
func OpenID(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpenID), v))
	})
}

// Unionid applies equality check predicate on the "unionid" field. It's identical to UnionidEQ.
func Unionid(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnionid), v))
	})
}

// SessionKey applies equality check predicate on the "session_key" field. It's identical to SessionKeyEQ.
func SessionKey(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSessionKey), v))
	})
}

// IsLoadUserProfile applies equality check predicate on the "is_load_user_profile" field. It's identical to IsLoadUserProfileEQ.
func IsLoadUserProfile(v bool) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLoadUserProfile), v))
	})
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickname), v))
	})
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// AvatarURL applies equality check predicate on the "avatar_url" field. It's identical to AvatarURLEQ.
func AvatarURL(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatarURL), v))
	})
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v uint) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// County applies equality check predicate on the "county" field. It's identical to CountyEQ.
func County(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCounty), v))
	})
}

// CountryCode applies equality check predicate on the "country_code" field. It's identical to CountryCodeEQ.
func CountryCode(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountryCode), v))
	})
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// PurePhoneNumber applies equality check predicate on the "pure_phone_number" field. It's identical to PurePhoneNumberEQ.
func PurePhoneNumber(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPurePhoneNumber), v))
	})
}

// Watermark applies equality check predicate on the "watermark" field. It's identical to WatermarkEQ.
func Watermark(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWatermark), v))
	})
}

// LoadUserProfileTime applies equality check predicate on the "load_user_profile_time" field. It's identical to LoadUserProfileTimeEQ.
func LoadUserProfileTime(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoadUserProfileTime), v))
	})
}

// LastLoginTime applies equality check predicate on the "last_login_time" field. It's identical to LastLoginTimeEQ.
func LastLoginTime(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastLoginTime), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...int64) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...int64) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...int64) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...int64) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uint64) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uint64) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// OpenIDEQ applies the EQ predicate on the "open_id" field.
func OpenIDEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpenID), v))
	})
}

// OpenIDNEQ applies the NEQ predicate on the "open_id" field.
func OpenIDNEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpenID), v))
	})
}

// OpenIDIn applies the In predicate on the "open_id" field.
func OpenIDIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpenID), v...))
	})
}

// OpenIDNotIn applies the NotIn predicate on the "open_id" field.
func OpenIDNotIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpenID), v...))
	})
}

// OpenIDGT applies the GT predicate on the "open_id" field.
func OpenIDGT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpenID), v))
	})
}

// OpenIDGTE applies the GTE predicate on the "open_id" field.
func OpenIDGTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpenID), v))
	})
}

// OpenIDLT applies the LT predicate on the "open_id" field.
func OpenIDLT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpenID), v))
	})
}

// OpenIDLTE applies the LTE predicate on the "open_id" field.
func OpenIDLTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpenID), v))
	})
}

// OpenIDContains applies the Contains predicate on the "open_id" field.
func OpenIDContains(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOpenID), v))
	})
}

// OpenIDHasPrefix applies the HasPrefix predicate on the "open_id" field.
func OpenIDHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOpenID), v))
	})
}

// OpenIDHasSuffix applies the HasSuffix predicate on the "open_id" field.
func OpenIDHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOpenID), v))
	})
}

// OpenIDEqualFold applies the EqualFold predicate on the "open_id" field.
func OpenIDEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOpenID), v))
	})
}

// OpenIDContainsFold applies the ContainsFold predicate on the "open_id" field.
func OpenIDContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOpenID), v))
	})
}

// UnionidEQ applies the EQ predicate on the "unionid" field.
func UnionidEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnionid), v))
	})
}

// UnionidNEQ applies the NEQ predicate on the "unionid" field.
func UnionidNEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnionid), v))
	})
}

// UnionidIn applies the In predicate on the "unionid" field.
func UnionidIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnionid), v...))
	})
}

// UnionidNotIn applies the NotIn predicate on the "unionid" field.
func UnionidNotIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnionid), v...))
	})
}

// UnionidGT applies the GT predicate on the "unionid" field.
func UnionidGT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnionid), v))
	})
}

// UnionidGTE applies the GTE predicate on the "unionid" field.
func UnionidGTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnionid), v))
	})
}

// UnionidLT applies the LT predicate on the "unionid" field.
func UnionidLT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnionid), v))
	})
}

// UnionidLTE applies the LTE predicate on the "unionid" field.
func UnionidLTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnionid), v))
	})
}

// UnionidContains applies the Contains predicate on the "unionid" field.
func UnionidContains(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnionid), v))
	})
}

// UnionidHasPrefix applies the HasPrefix predicate on the "unionid" field.
func UnionidHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnionid), v))
	})
}

// UnionidHasSuffix applies the HasSuffix predicate on the "unionid" field.
func UnionidHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnionid), v))
	})
}

// UnionidEqualFold applies the EqualFold predicate on the "unionid" field.
func UnionidEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnionid), v))
	})
}

// UnionidContainsFold applies the ContainsFold predicate on the "unionid" field.
func UnionidContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnionid), v))
	})
}

// SessionKeyEQ applies the EQ predicate on the "session_key" field.
func SessionKeyEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSessionKey), v))
	})
}

// SessionKeyNEQ applies the NEQ predicate on the "session_key" field.
func SessionKeyNEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSessionKey), v))
	})
}

// SessionKeyIn applies the In predicate on the "session_key" field.
func SessionKeyIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSessionKey), v...))
	})
}

// SessionKeyNotIn applies the NotIn predicate on the "session_key" field.
func SessionKeyNotIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSessionKey), v...))
	})
}

// SessionKeyGT applies the GT predicate on the "session_key" field.
func SessionKeyGT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSessionKey), v))
	})
}

// SessionKeyGTE applies the GTE predicate on the "session_key" field.
func SessionKeyGTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSessionKey), v))
	})
}

// SessionKeyLT applies the LT predicate on the "session_key" field.
func SessionKeyLT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSessionKey), v))
	})
}

// SessionKeyLTE applies the LTE predicate on the "session_key" field.
func SessionKeyLTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSessionKey), v))
	})
}

// SessionKeyContains applies the Contains predicate on the "session_key" field.
func SessionKeyContains(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSessionKey), v))
	})
}

// SessionKeyHasPrefix applies the HasPrefix predicate on the "session_key" field.
func SessionKeyHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSessionKey), v))
	})
}

// SessionKeyHasSuffix applies the HasSuffix predicate on the "session_key" field.
func SessionKeyHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSessionKey), v))
	})
}

// SessionKeyEqualFold applies the EqualFold predicate on the "session_key" field.
func SessionKeyEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSessionKey), v))
	})
}

// SessionKeyContainsFold applies the ContainsFold predicate on the "session_key" field.
func SessionKeyContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSessionKey), v))
	})
}

// IsLoadUserProfileEQ applies the EQ predicate on the "is_load_user_profile" field.
func IsLoadUserProfileEQ(v bool) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLoadUserProfile), v))
	})
}

// IsLoadUserProfileNEQ applies the NEQ predicate on the "is_load_user_profile" field.
func IsLoadUserProfileNEQ(v bool) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsLoadUserProfile), v))
	})
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickname), v))
	})
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNickname), v))
	})
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNickname), v...))
	})
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNickname), v...))
	})
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNickname), v))
	})
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNickname), v))
	})
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNickname), v))
	})
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNickname), v))
	})
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNickname), v))
	})
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNickname), v))
	})
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNickname), v))
	})
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNickname), v))
	})
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNickname), v))
	})
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvatar), v))
	})
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAvatar), v...))
	})
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAvatar), v...))
	})
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvatar), v))
	})
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvatar), v))
	})
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvatar), v))
	})
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvatar), v))
	})
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAvatar), v))
	})
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAvatar), v))
	})
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAvatar), v))
	})
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAvatar), v))
	})
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAvatar), v))
	})
}

// AvatarURLEQ applies the EQ predicate on the "avatar_url" field.
func AvatarURLEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatarURL), v))
	})
}

// AvatarURLNEQ applies the NEQ predicate on the "avatar_url" field.
func AvatarURLNEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvatarURL), v))
	})
}

// AvatarURLIn applies the In predicate on the "avatar_url" field.
func AvatarURLIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAvatarURL), v...))
	})
}

// AvatarURLNotIn applies the NotIn predicate on the "avatar_url" field.
func AvatarURLNotIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAvatarURL), v...))
	})
}

// AvatarURLGT applies the GT predicate on the "avatar_url" field.
func AvatarURLGT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvatarURL), v))
	})
}

// AvatarURLGTE applies the GTE predicate on the "avatar_url" field.
func AvatarURLGTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvatarURL), v))
	})
}

// AvatarURLLT applies the LT predicate on the "avatar_url" field.
func AvatarURLLT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvatarURL), v))
	})
}

// AvatarURLLTE applies the LTE predicate on the "avatar_url" field.
func AvatarURLLTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvatarURL), v))
	})
}

// AvatarURLContains applies the Contains predicate on the "avatar_url" field.
func AvatarURLContains(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAvatarURL), v))
	})
}

// AvatarURLHasPrefix applies the HasPrefix predicate on the "avatar_url" field.
func AvatarURLHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAvatarURL), v))
	})
}

// AvatarURLHasSuffix applies the HasSuffix predicate on the "avatar_url" field.
func AvatarURLHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAvatarURL), v))
	})
}

// AvatarURLEqualFold applies the EqualFold predicate on the "avatar_url" field.
func AvatarURLEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAvatarURL), v))
	})
}

// AvatarURLContainsFold applies the ContainsFold predicate on the "avatar_url" field.
func AvatarURLContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAvatarURL), v))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v uint) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v uint) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...uint) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...uint) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v uint) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGender), v))
	})
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v uint) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGender), v))
	})
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v uint) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGender), v))
	})
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v uint) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGender), v))
	})
}

// CountyEQ applies the EQ predicate on the "county" field.
func CountyEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCounty), v))
	})
}

// CountyNEQ applies the NEQ predicate on the "county" field.
func CountyNEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCounty), v))
	})
}

// CountyIn applies the In predicate on the "county" field.
func CountyIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCounty), v...))
	})
}

// CountyNotIn applies the NotIn predicate on the "county" field.
func CountyNotIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCounty), v...))
	})
}

// CountyGT applies the GT predicate on the "county" field.
func CountyGT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCounty), v))
	})
}

// CountyGTE applies the GTE predicate on the "county" field.
func CountyGTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCounty), v))
	})
}

// CountyLT applies the LT predicate on the "county" field.
func CountyLT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCounty), v))
	})
}

// CountyLTE applies the LTE predicate on the "county" field.
func CountyLTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCounty), v))
	})
}

// CountyContains applies the Contains predicate on the "county" field.
func CountyContains(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCounty), v))
	})
}

// CountyHasPrefix applies the HasPrefix predicate on the "county" field.
func CountyHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCounty), v))
	})
}

// CountyHasSuffix applies the HasSuffix predicate on the "county" field.
func CountyHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCounty), v))
	})
}

// CountyEqualFold applies the EqualFold predicate on the "county" field.
func CountyEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCounty), v))
	})
}

// CountyContainsFold applies the ContainsFold predicate on the "county" field.
func CountyContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCounty), v))
	})
}

// CountryCodeEQ applies the EQ predicate on the "country_code" field.
func CountryCodeEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountryCode), v))
	})
}

// CountryCodeNEQ applies the NEQ predicate on the "country_code" field.
func CountryCodeNEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountryCode), v))
	})
}

// CountryCodeIn applies the In predicate on the "country_code" field.
func CountryCodeIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCountryCode), v...))
	})
}

// CountryCodeNotIn applies the NotIn predicate on the "country_code" field.
func CountryCodeNotIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCountryCode), v...))
	})
}

// CountryCodeGT applies the GT predicate on the "country_code" field.
func CountryCodeGT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountryCode), v))
	})
}

// CountryCodeGTE applies the GTE predicate on the "country_code" field.
func CountryCodeGTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountryCode), v))
	})
}

// CountryCodeLT applies the LT predicate on the "country_code" field.
func CountryCodeLT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountryCode), v))
	})
}

// CountryCodeLTE applies the LTE predicate on the "country_code" field.
func CountryCodeLTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountryCode), v))
	})
}

// CountryCodeContains applies the Contains predicate on the "country_code" field.
func CountryCodeContains(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCountryCode), v))
	})
}

// CountryCodeHasPrefix applies the HasPrefix predicate on the "country_code" field.
func CountryCodeHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCountryCode), v))
	})
}

// CountryCodeHasSuffix applies the HasSuffix predicate on the "country_code" field.
func CountryCodeHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCountryCode), v))
	})
}

// CountryCodeEqualFold applies the EqualFold predicate on the "country_code" field.
func CountryCodeEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCountryCode), v))
	})
}

// CountryCodeContainsFold applies the ContainsFold predicate on the "country_code" field.
func CountryCodeContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCountryCode), v))
	})
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProvince), v))
	})
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProvince), v...))
	})
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProvince), v...))
	})
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProvince), v))
	})
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProvince), v))
	})
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProvince), v))
	})
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProvince), v))
	})
}

// ProvinceContains applies the Contains predicate on the "province" field.
func ProvinceContains(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProvince), v))
	})
}

// ProvinceHasPrefix applies the HasPrefix predicate on the "province" field.
func ProvinceHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProvince), v))
	})
}

// ProvinceHasSuffix applies the HasSuffix predicate on the "province" field.
func ProvinceHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProvince), v))
	})
}

// ProvinceEqualFold applies the EqualFold predicate on the "province" field.
func ProvinceEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProvince), v))
	})
}

// ProvinceContainsFold applies the ContainsFold predicate on the "province" field.
func ProvinceContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProvince), v))
	})
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCity), v))
	})
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCity), v...))
	})
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCity), v...))
	})
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCity), v))
	})
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCity), v))
	})
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCity), v))
	})
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCity), v))
	})
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCity), v))
	})
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCity), v))
	})
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCity), v))
	})
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCity), v))
	})
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCity), v))
	})
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLanguage), v))
	})
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLanguage), v...))
	})
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLanguage), v...))
	})
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLanguage), v))
	})
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLanguage), v))
	})
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLanguage), v))
	})
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLanguage), v))
	})
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLanguage), v))
	})
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLanguage), v))
	})
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLanguage), v))
	})
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLanguage), v))
	})
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLanguage), v))
	})
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhoneNumber), v))
	})
}

// PurePhoneNumberEQ applies the EQ predicate on the "pure_phone_number" field.
func PurePhoneNumberEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPurePhoneNumber), v))
	})
}

// PurePhoneNumberNEQ applies the NEQ predicate on the "pure_phone_number" field.
func PurePhoneNumberNEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPurePhoneNumber), v))
	})
}

// PurePhoneNumberIn applies the In predicate on the "pure_phone_number" field.
func PurePhoneNumberIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPurePhoneNumber), v...))
	})
}

// PurePhoneNumberNotIn applies the NotIn predicate on the "pure_phone_number" field.
func PurePhoneNumberNotIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPurePhoneNumber), v...))
	})
}

// PurePhoneNumberGT applies the GT predicate on the "pure_phone_number" field.
func PurePhoneNumberGT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPurePhoneNumber), v))
	})
}

// PurePhoneNumberGTE applies the GTE predicate on the "pure_phone_number" field.
func PurePhoneNumberGTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPurePhoneNumber), v))
	})
}

// PurePhoneNumberLT applies the LT predicate on the "pure_phone_number" field.
func PurePhoneNumberLT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPurePhoneNumber), v))
	})
}

// PurePhoneNumberLTE applies the LTE predicate on the "pure_phone_number" field.
func PurePhoneNumberLTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPurePhoneNumber), v))
	})
}

// PurePhoneNumberContains applies the Contains predicate on the "pure_phone_number" field.
func PurePhoneNumberContains(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPurePhoneNumber), v))
	})
}

// PurePhoneNumberHasPrefix applies the HasPrefix predicate on the "pure_phone_number" field.
func PurePhoneNumberHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPurePhoneNumber), v))
	})
}

// PurePhoneNumberHasSuffix applies the HasSuffix predicate on the "pure_phone_number" field.
func PurePhoneNumberHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPurePhoneNumber), v))
	})
}

// PurePhoneNumberEqualFold applies the EqualFold predicate on the "pure_phone_number" field.
func PurePhoneNumberEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPurePhoneNumber), v))
	})
}

// PurePhoneNumberContainsFold applies the ContainsFold predicate on the "pure_phone_number" field.
func PurePhoneNumberContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPurePhoneNumber), v))
	})
}

// WatermarkEQ applies the EQ predicate on the "watermark" field.
func WatermarkEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWatermark), v))
	})
}

// WatermarkNEQ applies the NEQ predicate on the "watermark" field.
func WatermarkNEQ(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWatermark), v))
	})
}

// WatermarkIn applies the In predicate on the "watermark" field.
func WatermarkIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWatermark), v...))
	})
}

// WatermarkNotIn applies the NotIn predicate on the "watermark" field.
func WatermarkNotIn(vs ...string) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWatermark), v...))
	})
}

// WatermarkGT applies the GT predicate on the "watermark" field.
func WatermarkGT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWatermark), v))
	})
}

// WatermarkGTE applies the GTE predicate on the "watermark" field.
func WatermarkGTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWatermark), v))
	})
}

// WatermarkLT applies the LT predicate on the "watermark" field.
func WatermarkLT(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWatermark), v))
	})
}

// WatermarkLTE applies the LTE predicate on the "watermark" field.
func WatermarkLTE(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWatermark), v))
	})
}

// WatermarkContains applies the Contains predicate on the "watermark" field.
func WatermarkContains(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWatermark), v))
	})
}

// WatermarkHasPrefix applies the HasPrefix predicate on the "watermark" field.
func WatermarkHasPrefix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWatermark), v))
	})
}

// WatermarkHasSuffix applies the HasSuffix predicate on the "watermark" field.
func WatermarkHasSuffix(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWatermark), v))
	})
}

// WatermarkEqualFold applies the EqualFold predicate on the "watermark" field.
func WatermarkEqualFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWatermark), v))
	})
}

// WatermarkContainsFold applies the ContainsFold predicate on the "watermark" field.
func WatermarkContainsFold(v string) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWatermark), v))
	})
}

// LoadUserProfileTimeEQ applies the EQ predicate on the "load_user_profile_time" field.
func LoadUserProfileTimeEQ(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoadUserProfileTime), v))
	})
}

// LoadUserProfileTimeNEQ applies the NEQ predicate on the "load_user_profile_time" field.
func LoadUserProfileTimeNEQ(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLoadUserProfileTime), v))
	})
}

// LoadUserProfileTimeIn applies the In predicate on the "load_user_profile_time" field.
func LoadUserProfileTimeIn(vs ...int64) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLoadUserProfileTime), v...))
	})
}

// LoadUserProfileTimeNotIn applies the NotIn predicate on the "load_user_profile_time" field.
func LoadUserProfileTimeNotIn(vs ...int64) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLoadUserProfileTime), v...))
	})
}

// LoadUserProfileTimeGT applies the GT predicate on the "load_user_profile_time" field.
func LoadUserProfileTimeGT(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLoadUserProfileTime), v))
	})
}

// LoadUserProfileTimeGTE applies the GTE predicate on the "load_user_profile_time" field.
func LoadUserProfileTimeGTE(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLoadUserProfileTime), v))
	})
}

// LoadUserProfileTimeLT applies the LT predicate on the "load_user_profile_time" field.
func LoadUserProfileTimeLT(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLoadUserProfileTime), v))
	})
}

// LoadUserProfileTimeLTE applies the LTE predicate on the "load_user_profile_time" field.
func LoadUserProfileTimeLTE(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLoadUserProfileTime), v))
	})
}

// LastLoginTimeEQ applies the EQ predicate on the "last_login_time" field.
func LastLoginTimeEQ(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeNEQ applies the NEQ predicate on the "last_login_time" field.
func LastLoginTimeNEQ(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeIn applies the In predicate on the "last_login_time" field.
func LastLoginTimeIn(vs ...int64) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastLoginTime), v...))
	})
}

// LastLoginTimeNotIn applies the NotIn predicate on the "last_login_time" field.
func LastLoginTimeNotIn(vs ...int64) predicate.AppUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastLoginTime), v...))
	})
}

// LastLoginTimeGT applies the GT predicate on the "last_login_time" field.
func LastLoginTimeGT(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeGTE applies the GTE predicate on the "last_login_time" field.
func LastLoginTimeGTE(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeLT applies the LT predicate on the "last_login_time" field.
func LastLoginTimeLT(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeLTE applies the LTE predicate on the "last_login_time" field.
func LastLoginTimeLTE(v int64) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastLoginTime), v))
	})
}

// HasApp applies the HasEdge predicate on the "app" edge.
func HasApp() predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppTable, AppColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.App
		step.Edge.Schema = schemaConfig.AppUser
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppWith applies the HasEdge predicate on the "app" edge with a given conditions (other predicates).
func HasAppWith(preds ...predicate.App) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppTable, AppColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.App
		step.Edge.Schema = schemaConfig.AppUser
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.AppUser
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.AppUser
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppUser) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppUser) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppUser) predicate.AppUser {
	return predicate.AppUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
