// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/appoption"
	"github.com/boshangad/v1/ent/internal"
	"github.com/boshangad/v1/ent/predicate"
)

// AppOptionUpdate is the builder for updating AppOption entities.
type AppOptionUpdate struct {
	config
	hooks    []Hook
	mutation *AppOptionMutation
}

// Where appends a list predicates to the AppOptionUpdate builder.
func (aou *AppOptionUpdate) Where(ps ...predicate.AppOption) *AppOptionUpdate {
	aou.mutation.Where(ps...)
	return aou
}

// SetUpdateTime sets the "update_time" field.
func (aou *AppOptionUpdate) SetUpdateTime(i int64) *AppOptionUpdate {
	aou.mutation.ResetUpdateTime()
	aou.mutation.SetUpdateTime(i)
	return aou
}

// AddUpdateTime adds i to the "update_time" field.
func (aou *AppOptionUpdate) AddUpdateTime(i int64) *AppOptionUpdate {
	aou.mutation.AddUpdateTime(i)
	return aou
}

// SetUpdateBy sets the "update_by" field.
func (aou *AppOptionUpdate) SetUpdateBy(u uint64) *AppOptionUpdate {
	aou.mutation.ResetUpdateBy()
	aou.mutation.SetUpdateBy(u)
	return aou
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (aou *AppOptionUpdate) SetNillableUpdateBy(u *uint64) *AppOptionUpdate {
	if u != nil {
		aou.SetUpdateBy(*u)
	}
	return aou
}

// AddUpdateBy adds u to the "update_by" field.
func (aou *AppOptionUpdate) AddUpdateBy(u uint64) *AppOptionUpdate {
	aou.mutation.AddUpdateBy(u)
	return aou
}

// SetAppID sets the "app_id" field.
func (aou *AppOptionUpdate) SetAppID(u uint64) *AppOptionUpdate {
	aou.mutation.SetAppID(u)
	return aou
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aou *AppOptionUpdate) SetNillableAppID(u *uint64) *AppOptionUpdate {
	if u != nil {
		aou.SetAppID(*u)
	}
	return aou
}

// SetTitle sets the "title" field.
func (aou *AppOptionUpdate) SetTitle(s string) *AppOptionUpdate {
	aou.mutation.SetTitle(s)
	return aou
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (aou *AppOptionUpdate) SetNillableTitle(s *string) *AppOptionUpdate {
	if s != nil {
		aou.SetTitle(*s)
	}
	return aou
}

// SetDescription sets the "description" field.
func (aou *AppOptionUpdate) SetDescription(s string) *AppOptionUpdate {
	aou.mutation.SetDescription(s)
	return aou
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aou *AppOptionUpdate) SetNillableDescription(s *string) *AppOptionUpdate {
	if s != nil {
		aou.SetDescription(*s)
	}
	return aou
}

// SetName sets the "name" field.
func (aou *AppOptionUpdate) SetName(s string) *AppOptionUpdate {
	aou.mutation.SetName(s)
	return aou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aou *AppOptionUpdate) SetNillableName(s *string) *AppOptionUpdate {
	if s != nil {
		aou.SetName(*s)
	}
	return aou
}

// SetValue sets the "value" field.
func (aou *AppOptionUpdate) SetValue(s string) *AppOptionUpdate {
	aou.mutation.SetValue(s)
	return aou
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (aou *AppOptionUpdate) SetNillableValue(s *string) *AppOptionUpdate {
	if s != nil {
		aou.SetValue(*s)
	}
	return aou
}

// SetExpireTime sets the "expire_time" field.
func (aou *AppOptionUpdate) SetExpireTime(i int64) *AppOptionUpdate {
	aou.mutation.ResetExpireTime()
	aou.mutation.SetExpireTime(i)
	return aou
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (aou *AppOptionUpdate) SetNillableExpireTime(i *int64) *AppOptionUpdate {
	if i != nil {
		aou.SetExpireTime(*i)
	}
	return aou
}

// AddExpireTime adds i to the "expire_time" field.
func (aou *AppOptionUpdate) AddExpireTime(i int64) *AppOptionUpdate {
	aou.mutation.AddExpireTime(i)
	return aou
}

// SetEditType sets the "edit_type" field.
func (aou *AppOptionUpdate) SetEditType(u uint) *AppOptionUpdate {
	aou.mutation.ResetEditType()
	aou.mutation.SetEditType(u)
	return aou
}

// SetNillableEditType sets the "edit_type" field if the given value is not nil.
func (aou *AppOptionUpdate) SetNillableEditType(u *uint) *AppOptionUpdate {
	if u != nil {
		aou.SetEditType(*u)
	}
	return aou
}

// AddEditType adds u to the "edit_type" field.
func (aou *AppOptionUpdate) AddEditType(u uint) *AppOptionUpdate {
	aou.mutation.AddEditType(u)
	return aou
}

// SetApp sets the "app" edge to the App entity.
func (aou *AppOptionUpdate) SetApp(a *App) *AppOptionUpdate {
	return aou.SetAppID(a.ID)
}

// Mutation returns the AppOptionMutation object of the builder.
func (aou *AppOptionUpdate) Mutation() *AppOptionMutation {
	return aou.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (aou *AppOptionUpdate) ClearApp() *AppOptionUpdate {
	aou.mutation.ClearApp()
	return aou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aou *AppOptionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aou.defaults()
	if len(aou.hooks) == 0 {
		if err = aou.check(); err != nil {
			return 0, err
		}
		affected, err = aou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppOptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aou.check(); err != nil {
				return 0, err
			}
			aou.mutation = mutation
			affected, err = aou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aou.hooks) - 1; i >= 0; i-- {
			if aou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aou *AppOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := aou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aou *AppOptionUpdate) Exec(ctx context.Context) error {
	_, err := aou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aou *AppOptionUpdate) ExecX(ctx context.Context) {
	if err := aou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aou *AppOptionUpdate) defaults() {
	if _, ok := aou.mutation.UpdateTime(); !ok {
		v := appoption.UpdateDefaultUpdateTime()
		aou.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aou *AppOptionUpdate) check() error {
	if v, ok := aou.mutation.Title(); ok {
		if err := appoption.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := aou.mutation.Description(); ok {
		if err := appoption.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	if v, ok := aou.mutation.Name(); ok {
		if err := appoption.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := aou.mutation.Value(); ok {
		if err := appoption.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf("ent: validator failed for field \"value\": %w", err)}
		}
	}
	if _, ok := aou.mutation.AppID(); aou.mutation.AppCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"app\"")
	}
	return nil
}

func (aou *AppOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appoption.Table,
			Columns: appoption.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: appoption.FieldID,
			},
		},
	}
	if ps := aou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aou.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appoption.FieldUpdateTime,
		})
	}
	if value, ok := aou.mutation.AddedUpdateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appoption.FieldUpdateTime,
		})
	}
	if value, ok := aou.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appoption.FieldUpdateBy,
		})
	}
	if value, ok := aou.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appoption.FieldUpdateBy,
		})
	}
	if value, ok := aou.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appoption.FieldTitle,
		})
	}
	if value, ok := aou.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appoption.FieldDescription,
		})
	}
	if value, ok := aou.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appoption.FieldName,
		})
	}
	if value, ok := aou.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appoption.FieldValue,
		})
	}
	if value, ok := aou.mutation.ExpireTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appoption.FieldExpireTime,
		})
	}
	if value, ok := aou.mutation.AddedExpireTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appoption.FieldExpireTime,
		})
	}
	if value, ok := aou.mutation.EditType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appoption.FieldEditType,
		})
	}
	if value, ok := aou.mutation.AddedEditType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appoption.FieldEditType,
		})
	}
	if aou.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appoption.AppTable,
			Columns: []string{appoption.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = aou.schemaConfig.AppOption
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aou.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appoption.AppTable,
			Columns: []string{appoption.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = aou.schemaConfig.AppOption
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = aou.schemaConfig.AppOption
	ctx = internal.NewSchemaConfigContext(ctx, aou.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, aou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppOptionUpdateOne is the builder for updating a single AppOption entity.
type AppOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppOptionMutation
}

// SetUpdateTime sets the "update_time" field.
func (aouo *AppOptionUpdateOne) SetUpdateTime(i int64) *AppOptionUpdateOne {
	aouo.mutation.ResetUpdateTime()
	aouo.mutation.SetUpdateTime(i)
	return aouo
}

// AddUpdateTime adds i to the "update_time" field.
func (aouo *AppOptionUpdateOne) AddUpdateTime(i int64) *AppOptionUpdateOne {
	aouo.mutation.AddUpdateTime(i)
	return aouo
}

// SetUpdateBy sets the "update_by" field.
func (aouo *AppOptionUpdateOne) SetUpdateBy(u uint64) *AppOptionUpdateOne {
	aouo.mutation.ResetUpdateBy()
	aouo.mutation.SetUpdateBy(u)
	return aouo
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (aouo *AppOptionUpdateOne) SetNillableUpdateBy(u *uint64) *AppOptionUpdateOne {
	if u != nil {
		aouo.SetUpdateBy(*u)
	}
	return aouo
}

// AddUpdateBy adds u to the "update_by" field.
func (aouo *AppOptionUpdateOne) AddUpdateBy(u uint64) *AppOptionUpdateOne {
	aouo.mutation.AddUpdateBy(u)
	return aouo
}

// SetAppID sets the "app_id" field.
func (aouo *AppOptionUpdateOne) SetAppID(u uint64) *AppOptionUpdateOne {
	aouo.mutation.SetAppID(u)
	return aouo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aouo *AppOptionUpdateOne) SetNillableAppID(u *uint64) *AppOptionUpdateOne {
	if u != nil {
		aouo.SetAppID(*u)
	}
	return aouo
}

// SetTitle sets the "title" field.
func (aouo *AppOptionUpdateOne) SetTitle(s string) *AppOptionUpdateOne {
	aouo.mutation.SetTitle(s)
	return aouo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (aouo *AppOptionUpdateOne) SetNillableTitle(s *string) *AppOptionUpdateOne {
	if s != nil {
		aouo.SetTitle(*s)
	}
	return aouo
}

// SetDescription sets the "description" field.
func (aouo *AppOptionUpdateOne) SetDescription(s string) *AppOptionUpdateOne {
	aouo.mutation.SetDescription(s)
	return aouo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aouo *AppOptionUpdateOne) SetNillableDescription(s *string) *AppOptionUpdateOne {
	if s != nil {
		aouo.SetDescription(*s)
	}
	return aouo
}

// SetName sets the "name" field.
func (aouo *AppOptionUpdateOne) SetName(s string) *AppOptionUpdateOne {
	aouo.mutation.SetName(s)
	return aouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aouo *AppOptionUpdateOne) SetNillableName(s *string) *AppOptionUpdateOne {
	if s != nil {
		aouo.SetName(*s)
	}
	return aouo
}

// SetValue sets the "value" field.
func (aouo *AppOptionUpdateOne) SetValue(s string) *AppOptionUpdateOne {
	aouo.mutation.SetValue(s)
	return aouo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (aouo *AppOptionUpdateOne) SetNillableValue(s *string) *AppOptionUpdateOne {
	if s != nil {
		aouo.SetValue(*s)
	}
	return aouo
}

// SetExpireTime sets the "expire_time" field.
func (aouo *AppOptionUpdateOne) SetExpireTime(i int64) *AppOptionUpdateOne {
	aouo.mutation.ResetExpireTime()
	aouo.mutation.SetExpireTime(i)
	return aouo
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (aouo *AppOptionUpdateOne) SetNillableExpireTime(i *int64) *AppOptionUpdateOne {
	if i != nil {
		aouo.SetExpireTime(*i)
	}
	return aouo
}

// AddExpireTime adds i to the "expire_time" field.
func (aouo *AppOptionUpdateOne) AddExpireTime(i int64) *AppOptionUpdateOne {
	aouo.mutation.AddExpireTime(i)
	return aouo
}

// SetEditType sets the "edit_type" field.
func (aouo *AppOptionUpdateOne) SetEditType(u uint) *AppOptionUpdateOne {
	aouo.mutation.ResetEditType()
	aouo.mutation.SetEditType(u)
	return aouo
}

// SetNillableEditType sets the "edit_type" field if the given value is not nil.
func (aouo *AppOptionUpdateOne) SetNillableEditType(u *uint) *AppOptionUpdateOne {
	if u != nil {
		aouo.SetEditType(*u)
	}
	return aouo
}

// AddEditType adds u to the "edit_type" field.
func (aouo *AppOptionUpdateOne) AddEditType(u uint) *AppOptionUpdateOne {
	aouo.mutation.AddEditType(u)
	return aouo
}

// SetApp sets the "app" edge to the App entity.
func (aouo *AppOptionUpdateOne) SetApp(a *App) *AppOptionUpdateOne {
	return aouo.SetAppID(a.ID)
}

// Mutation returns the AppOptionMutation object of the builder.
func (aouo *AppOptionUpdateOne) Mutation() *AppOptionMutation {
	return aouo.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (aouo *AppOptionUpdateOne) ClearApp() *AppOptionUpdateOne {
	aouo.mutation.ClearApp()
	return aouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aouo *AppOptionUpdateOne) Select(field string, fields ...string) *AppOptionUpdateOne {
	aouo.fields = append([]string{field}, fields...)
	return aouo
}

// Save executes the query and returns the updated AppOption entity.
func (aouo *AppOptionUpdateOne) Save(ctx context.Context) (*AppOption, error) {
	var (
		err  error
		node *AppOption
	)
	aouo.defaults()
	if len(aouo.hooks) == 0 {
		if err = aouo.check(); err != nil {
			return nil, err
		}
		node, err = aouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppOptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aouo.check(); err != nil {
				return nil, err
			}
			aouo.mutation = mutation
			node, err = aouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aouo.hooks) - 1; i >= 0; i-- {
			if aouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aouo *AppOptionUpdateOne) SaveX(ctx context.Context) *AppOption {
	node, err := aouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aouo *AppOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := aouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aouo *AppOptionUpdateOne) ExecX(ctx context.Context) {
	if err := aouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aouo *AppOptionUpdateOne) defaults() {
	if _, ok := aouo.mutation.UpdateTime(); !ok {
		v := appoption.UpdateDefaultUpdateTime()
		aouo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aouo *AppOptionUpdateOne) check() error {
	if v, ok := aouo.mutation.Title(); ok {
		if err := appoption.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := aouo.mutation.Description(); ok {
		if err := appoption.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	if v, ok := aouo.mutation.Name(); ok {
		if err := appoption.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := aouo.mutation.Value(); ok {
		if err := appoption.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf("ent: validator failed for field \"value\": %w", err)}
		}
	}
	if _, ok := aouo.mutation.AppID(); aouo.mutation.AppCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"app\"")
	}
	return nil
}

func (aouo *AppOptionUpdateOne) sqlSave(ctx context.Context) (_node *AppOption, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appoption.Table,
			Columns: appoption.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: appoption.FieldID,
			},
		},
	}
	id, ok := aouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AppOption.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appoption.FieldID)
		for _, f := range fields {
			if !appoption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aouo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appoption.FieldUpdateTime,
		})
	}
	if value, ok := aouo.mutation.AddedUpdateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appoption.FieldUpdateTime,
		})
	}
	if value, ok := aouo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appoption.FieldUpdateBy,
		})
	}
	if value, ok := aouo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appoption.FieldUpdateBy,
		})
	}
	if value, ok := aouo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appoption.FieldTitle,
		})
	}
	if value, ok := aouo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appoption.FieldDescription,
		})
	}
	if value, ok := aouo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appoption.FieldName,
		})
	}
	if value, ok := aouo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appoption.FieldValue,
		})
	}
	if value, ok := aouo.mutation.ExpireTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appoption.FieldExpireTime,
		})
	}
	if value, ok := aouo.mutation.AddedExpireTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appoption.FieldExpireTime,
		})
	}
	if value, ok := aouo.mutation.EditType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appoption.FieldEditType,
		})
	}
	if value, ok := aouo.mutation.AddedEditType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: appoption.FieldEditType,
		})
	}
	if aouo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appoption.AppTable,
			Columns: []string{appoption.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = aouo.schemaConfig.AppOption
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aouo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appoption.AppTable,
			Columns: []string{appoption.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = aouo.schemaConfig.AppOption
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = aouo.schemaConfig.AppOption
	ctx = internal.NewSchemaConfigContext(ctx, aouo.schemaConfig)
	_node = &AppOption{config: aouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
