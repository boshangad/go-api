// Code generated by entc, DO NOT EDIT.

package internal

import "context"

// SchemaConfig represents alternative schema names for all tables
// that can be passed at runtime.
type SchemaConfig struct {
	App             string // App table.
	AppOption       string // AppOption table.
	AppUser         string // AppUser table.
	AppUserLoginLog string // AppUserLoginLog table.
	AppUserToken    string // AppUserToken table.
	Article         string // Article table.
	AuthAssgiment   string // AuthAssgiment table.
	AuthItem        string // AuthItem table.
	AuthItemChild   string // AuthItemChild table.
	AuthRole        string // AuthRole table.
	AuthRule        string // AuthRule table.
	EmailLog        string // EmailLog table.
	SmsLog          string // SmsLog table.
	Sort            string // Sort table.
	User            string // User table.
}

type schemaCtxKey struct{}

// SchemaConfigFromContext returns a SchemaConfig stored inside a context, or empty if there isn't one.
func SchemaConfigFromContext(ctx context.Context) SchemaConfig {
	config, _ := ctx.Value(schemaCtxKey{}).(SchemaConfig)
	return config
}

// NewSchemaConfigContext returns a new context with the given SchemaConfig attached.
func NewSchemaConfigContext(parent context.Context, config SchemaConfig) context.Context {
	return context.WithValue(parent, schemaCtxKey{}, config)
}
