// Code generated by entc, DO NOT EDIT.

package smslog

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/boshangad/v1/ent/internal"
	"github.com/boshangad/v1/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v int64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v int64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// DialCode applies equality check predicate on the "dial_code" field. It's identical to DialCodeEQ.
func DialCode(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDialCode), v))
	})
}

// Mobile applies equality check predicate on the "mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMobile), v))
	})
}

// Scope applies equality check predicate on the "scope" field. It's identical to ScopeEQ.
func Scope(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScope), v))
	})
}

// TypeID applies equality check predicate on the "type_id" field. It's identical to TypeIDEQ.
func TypeID(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeID), v))
	})
}

// Gateway applies equality check predicate on the "gateway" field. It's identical to GatewayEQ.
func Gateway(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGateway), v))
	})
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// TemplateID applies equality check predicate on the "template_id" field. It's identical to TemplateIDEQ.
func TemplateID(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplateID), v))
	})
}

// TemplateText applies equality check predicate on the "template_text" field. It's identical to TemplateTextEQ.
func TemplateText(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplateText), v))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// CheckCount applies equality check predicate on the "check_count" field. It's identical to CheckCountEQ.
func CheckCount(v uint8) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckCount), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// ReturnMsg applies equality check predicate on the "return_msg" field. It's identical to ReturnMsgEQ.
func ReturnMsg(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReturnMsg), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v int64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v int64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...int64) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...int64) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v int64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v int64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v int64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v int64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v int64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v int64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...int64) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...int64) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v int64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v int64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v int64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v int64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uint64) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uint64) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// DialCodeEQ applies the EQ predicate on the "dial_code" field.
func DialCodeEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDialCode), v))
	})
}

// DialCodeNEQ applies the NEQ predicate on the "dial_code" field.
func DialCodeNEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDialCode), v))
	})
}

// DialCodeIn applies the In predicate on the "dial_code" field.
func DialCodeIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDialCode), v...))
	})
}

// DialCodeNotIn applies the NotIn predicate on the "dial_code" field.
func DialCodeNotIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDialCode), v...))
	})
}

// DialCodeGT applies the GT predicate on the "dial_code" field.
func DialCodeGT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDialCode), v))
	})
}

// DialCodeGTE applies the GTE predicate on the "dial_code" field.
func DialCodeGTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDialCode), v))
	})
}

// DialCodeLT applies the LT predicate on the "dial_code" field.
func DialCodeLT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDialCode), v))
	})
}

// DialCodeLTE applies the LTE predicate on the "dial_code" field.
func DialCodeLTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDialCode), v))
	})
}

// DialCodeContains applies the Contains predicate on the "dial_code" field.
func DialCodeContains(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDialCode), v))
	})
}

// DialCodeHasPrefix applies the HasPrefix predicate on the "dial_code" field.
func DialCodeHasPrefix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDialCode), v))
	})
}

// DialCodeHasSuffix applies the HasSuffix predicate on the "dial_code" field.
func DialCodeHasSuffix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDialCode), v))
	})
}

// DialCodeEqualFold applies the EqualFold predicate on the "dial_code" field.
func DialCodeEqualFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDialCode), v))
	})
}

// DialCodeContainsFold applies the ContainsFold predicate on the "dial_code" field.
func DialCodeContainsFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDialCode), v))
	})
}

// MobileEQ applies the EQ predicate on the "mobile" field.
func MobileEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMobile), v))
	})
}

// MobileNEQ applies the NEQ predicate on the "mobile" field.
func MobileNEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMobile), v))
	})
}

// MobileIn applies the In predicate on the "mobile" field.
func MobileIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMobile), v...))
	})
}

// MobileNotIn applies the NotIn predicate on the "mobile" field.
func MobileNotIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMobile), v...))
	})
}

// MobileGT applies the GT predicate on the "mobile" field.
func MobileGT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMobile), v))
	})
}

// MobileGTE applies the GTE predicate on the "mobile" field.
func MobileGTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMobile), v))
	})
}

// MobileLT applies the LT predicate on the "mobile" field.
func MobileLT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMobile), v))
	})
}

// MobileLTE applies the LTE predicate on the "mobile" field.
func MobileLTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMobile), v))
	})
}

// MobileContains applies the Contains predicate on the "mobile" field.
func MobileContains(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMobile), v))
	})
}

// MobileHasPrefix applies the HasPrefix predicate on the "mobile" field.
func MobileHasPrefix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMobile), v))
	})
}

// MobileHasSuffix applies the HasSuffix predicate on the "mobile" field.
func MobileHasSuffix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMobile), v))
	})
}

// MobileEqualFold applies the EqualFold predicate on the "mobile" field.
func MobileEqualFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMobile), v))
	})
}

// MobileContainsFold applies the ContainsFold predicate on the "mobile" field.
func MobileContainsFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMobile), v))
	})
}

// ScopeEQ applies the EQ predicate on the "scope" field.
func ScopeEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScope), v))
	})
}

// ScopeNEQ applies the NEQ predicate on the "scope" field.
func ScopeNEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScope), v))
	})
}

// ScopeIn applies the In predicate on the "scope" field.
func ScopeIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScope), v...))
	})
}

// ScopeNotIn applies the NotIn predicate on the "scope" field.
func ScopeNotIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScope), v...))
	})
}

// ScopeGT applies the GT predicate on the "scope" field.
func ScopeGT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScope), v))
	})
}

// ScopeGTE applies the GTE predicate on the "scope" field.
func ScopeGTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScope), v))
	})
}

// ScopeLT applies the LT predicate on the "scope" field.
func ScopeLT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScope), v))
	})
}

// ScopeLTE applies the LTE predicate on the "scope" field.
func ScopeLTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScope), v))
	})
}

// ScopeContains applies the Contains predicate on the "scope" field.
func ScopeContains(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldScope), v))
	})
}

// ScopeHasPrefix applies the HasPrefix predicate on the "scope" field.
func ScopeHasPrefix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldScope), v))
	})
}

// ScopeHasSuffix applies the HasSuffix predicate on the "scope" field.
func ScopeHasSuffix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldScope), v))
	})
}

// ScopeEqualFold applies the EqualFold predicate on the "scope" field.
func ScopeEqualFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldScope), v))
	})
}

// ScopeContainsFold applies the ContainsFold predicate on the "scope" field.
func ScopeContainsFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldScope), v))
	})
}

// TypeIDEQ applies the EQ predicate on the "type_id" field.
func TypeIDEQ(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeID), v))
	})
}

// TypeIDNEQ applies the NEQ predicate on the "type_id" field.
func TypeIDNEQ(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeID), v))
	})
}

// TypeIDIn applies the In predicate on the "type_id" field.
func TypeIDIn(vs ...uint64) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypeID), v...))
	})
}

// TypeIDNotIn applies the NotIn predicate on the "type_id" field.
func TypeIDNotIn(vs ...uint64) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypeID), v...))
	})
}

// TypeIDGT applies the GT predicate on the "type_id" field.
func TypeIDGT(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypeID), v))
	})
}

// TypeIDGTE applies the GTE predicate on the "type_id" field.
func TypeIDGTE(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypeID), v))
	})
}

// TypeIDLT applies the LT predicate on the "type_id" field.
func TypeIDLT(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypeID), v))
	})
}

// TypeIDLTE applies the LTE predicate on the "type_id" field.
func TypeIDLTE(v uint64) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypeID), v))
	})
}

// GatewayEQ applies the EQ predicate on the "gateway" field.
func GatewayEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGateway), v))
	})
}

// GatewayNEQ applies the NEQ predicate on the "gateway" field.
func GatewayNEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGateway), v))
	})
}

// GatewayIn applies the In predicate on the "gateway" field.
func GatewayIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGateway), v...))
	})
}

// GatewayNotIn applies the NotIn predicate on the "gateway" field.
func GatewayNotIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGateway), v...))
	})
}

// GatewayGT applies the GT predicate on the "gateway" field.
func GatewayGT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGateway), v))
	})
}

// GatewayGTE applies the GTE predicate on the "gateway" field.
func GatewayGTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGateway), v))
	})
}

// GatewayLT applies the LT predicate on the "gateway" field.
func GatewayLT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGateway), v))
	})
}

// GatewayLTE applies the LTE predicate on the "gateway" field.
func GatewayLTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGateway), v))
	})
}

// GatewayContains applies the Contains predicate on the "gateway" field.
func GatewayContains(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGateway), v))
	})
}

// GatewayHasPrefix applies the HasPrefix predicate on the "gateway" field.
func GatewayHasPrefix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGateway), v))
	})
}

// GatewayHasSuffix applies the HasSuffix predicate on the "gateway" field.
func GatewayHasSuffix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGateway), v))
	})
}

// GatewayEqualFold applies the EqualFold predicate on the "gateway" field.
func GatewayEqualFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGateway), v))
	})
}

// GatewayContainsFold applies the ContainsFold predicate on the "gateway" field.
func GatewayContainsFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGateway), v))
	})
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIP), v))
	})
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIP), v...))
	})
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIP), v...))
	})
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIP), v))
	})
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIP), v))
	})
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIP), v))
	})
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIP), v))
	})
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIP), v))
	})
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIP), v))
	})
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIP), v))
	})
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIP), v))
	})
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIP), v))
	})
}

// TemplateIDEQ applies the EQ predicate on the "template_id" field.
func TemplateIDEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplateID), v))
	})
}

// TemplateIDNEQ applies the NEQ predicate on the "template_id" field.
func TemplateIDNEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTemplateID), v))
	})
}

// TemplateIDIn applies the In predicate on the "template_id" field.
func TemplateIDIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTemplateID), v...))
	})
}

// TemplateIDNotIn applies the NotIn predicate on the "template_id" field.
func TemplateIDNotIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTemplateID), v...))
	})
}

// TemplateIDGT applies the GT predicate on the "template_id" field.
func TemplateIDGT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTemplateID), v))
	})
}

// TemplateIDGTE applies the GTE predicate on the "template_id" field.
func TemplateIDGTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTemplateID), v))
	})
}

// TemplateIDLT applies the LT predicate on the "template_id" field.
func TemplateIDLT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTemplateID), v))
	})
}

// TemplateIDLTE applies the LTE predicate on the "template_id" field.
func TemplateIDLTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTemplateID), v))
	})
}

// TemplateIDContains applies the Contains predicate on the "template_id" field.
func TemplateIDContains(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTemplateID), v))
	})
}

// TemplateIDHasPrefix applies the HasPrefix predicate on the "template_id" field.
func TemplateIDHasPrefix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTemplateID), v))
	})
}

// TemplateIDHasSuffix applies the HasSuffix predicate on the "template_id" field.
func TemplateIDHasSuffix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTemplateID), v))
	})
}

// TemplateIDEqualFold applies the EqualFold predicate on the "template_id" field.
func TemplateIDEqualFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTemplateID), v))
	})
}

// TemplateIDContainsFold applies the ContainsFold predicate on the "template_id" field.
func TemplateIDContainsFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTemplateID), v))
	})
}

// TemplateTextEQ applies the EQ predicate on the "template_text" field.
func TemplateTextEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplateText), v))
	})
}

// TemplateTextNEQ applies the NEQ predicate on the "template_text" field.
func TemplateTextNEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTemplateText), v))
	})
}

// TemplateTextIn applies the In predicate on the "template_text" field.
func TemplateTextIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTemplateText), v...))
	})
}

// TemplateTextNotIn applies the NotIn predicate on the "template_text" field.
func TemplateTextNotIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTemplateText), v...))
	})
}

// TemplateTextGT applies the GT predicate on the "template_text" field.
func TemplateTextGT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTemplateText), v))
	})
}

// TemplateTextGTE applies the GTE predicate on the "template_text" field.
func TemplateTextGTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTemplateText), v))
	})
}

// TemplateTextLT applies the LT predicate on the "template_text" field.
func TemplateTextLT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTemplateText), v))
	})
}

// TemplateTextLTE applies the LTE predicate on the "template_text" field.
func TemplateTextLTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTemplateText), v))
	})
}

// TemplateTextContains applies the Contains predicate on the "template_text" field.
func TemplateTextContains(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTemplateText), v))
	})
}

// TemplateTextHasPrefix applies the HasPrefix predicate on the "template_text" field.
func TemplateTextHasPrefix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTemplateText), v))
	})
}

// TemplateTextHasSuffix applies the HasSuffix predicate on the "template_text" field.
func TemplateTextHasSuffix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTemplateText), v))
	})
}

// TemplateTextEqualFold applies the EqualFold predicate on the "template_text" field.
func TemplateTextEqualFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTemplateText), v))
	})
}

// TemplateTextContainsFold applies the ContainsFold predicate on the "template_text" field.
func TemplateTextContainsFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTemplateText), v))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// CheckCountEQ applies the EQ predicate on the "check_count" field.
func CheckCountEQ(v uint8) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckCount), v))
	})
}

// CheckCountNEQ applies the NEQ predicate on the "check_count" field.
func CheckCountNEQ(v uint8) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckCount), v))
	})
}

// CheckCountIn applies the In predicate on the "check_count" field.
func CheckCountIn(vs ...uint8) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCheckCount), v...))
	})
}

// CheckCountNotIn applies the NotIn predicate on the "check_count" field.
func CheckCountNotIn(vs ...uint8) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCheckCount), v...))
	})
}

// CheckCountGT applies the GT predicate on the "check_count" field.
func CheckCountGT(v uint8) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCheckCount), v))
	})
}

// CheckCountGTE applies the GTE predicate on the "check_count" field.
func CheckCountGTE(v uint8) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCheckCount), v))
	})
}

// CheckCountLT applies the LT predicate on the "check_count" field.
func CheckCountLT(v uint8) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCheckCount), v))
	})
}

// CheckCountLTE applies the LTE predicate on the "check_count" field.
func CheckCountLTE(v uint8) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCheckCount), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// ReturnMsgEQ applies the EQ predicate on the "return_msg" field.
func ReturnMsgEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgNEQ applies the NEQ predicate on the "return_msg" field.
func ReturnMsgNEQ(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgIn applies the In predicate on the "return_msg" field.
func ReturnMsgIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReturnMsg), v...))
	})
}

// ReturnMsgNotIn applies the NotIn predicate on the "return_msg" field.
func ReturnMsgNotIn(vs ...string) predicate.SmsLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SmsLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReturnMsg), v...))
	})
}

// ReturnMsgGT applies the GT predicate on the "return_msg" field.
func ReturnMsgGT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgGTE applies the GTE predicate on the "return_msg" field.
func ReturnMsgGTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgLT applies the LT predicate on the "return_msg" field.
func ReturnMsgLT(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgLTE applies the LTE predicate on the "return_msg" field.
func ReturnMsgLTE(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgContains applies the Contains predicate on the "return_msg" field.
func ReturnMsgContains(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgHasPrefix applies the HasPrefix predicate on the "return_msg" field.
func ReturnMsgHasPrefix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgHasSuffix applies the HasSuffix predicate on the "return_msg" field.
func ReturnMsgHasSuffix(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgEqualFold applies the EqualFold predicate on the "return_msg" field.
func ReturnMsgEqualFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReturnMsg), v))
	})
}

// ReturnMsgContainsFold applies the ContainsFold predicate on the "return_msg" field.
func ReturnMsgContainsFold(v string) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReturnMsg), v))
	})
}

// HasApp applies the HasEdge predicate on the "app" edge.
func HasApp() predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppTable, AppColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.App
		step.Edge.Schema = schemaConfig.SmsLog
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppWith applies the HasEdge predicate on the "app" edge with a given conditions (other predicates).
func HasAppWith(preds ...predicate.App) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppTable, AppColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.App
		step.Edge.Schema = schemaConfig.SmsLog
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SmsLog) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SmsLog) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SmsLog) predicate.SmsLog {
	return predicate.SmsLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
