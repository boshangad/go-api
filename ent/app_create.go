// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/appoption"
	"github.com/google/uuid"
)

// AppCreate is the builder for creating a App entity.
type AppCreate struct {
	config
	mutation *AppMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeleteTime sets the "delete_time" field.
func (ac *AppCreate) SetDeleteTime(i int64) *AppCreate {
	ac.mutation.SetDeleteTime(i)
	return ac
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ac *AppCreate) SetNillableDeleteTime(i *int64) *AppCreate {
	if i != nil {
		ac.SetDeleteTime(*i)
	}
	return ac
}

// SetCreateTime sets the "create_time" field.
func (ac *AppCreate) SetCreateTime(i int64) *AppCreate {
	ac.mutation.SetCreateTime(i)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *AppCreate) SetNillableCreateTime(i *int64) *AppCreate {
	if i != nil {
		ac.SetCreateTime(*i)
	}
	return ac
}

// SetCreateBy sets the "create_by" field.
func (ac *AppCreate) SetCreateBy(u uint64) *AppCreate {
	ac.mutation.SetCreateBy(u)
	return ac
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (ac *AppCreate) SetNillableCreateBy(u *uint64) *AppCreate {
	if u != nil {
		ac.SetCreateBy(*u)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AppCreate) SetUpdateTime(i int64) *AppCreate {
	ac.mutation.SetUpdateTime(i)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *AppCreate) SetNillableUpdateTime(i *int64) *AppCreate {
	if i != nil {
		ac.SetUpdateTime(*i)
	}
	return ac
}

// SetUpdateBy sets the "update_by" field.
func (ac *AppCreate) SetUpdateBy(u uint64) *AppCreate {
	ac.mutation.SetUpdateBy(u)
	return ac
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (ac *AppCreate) SetNillableUpdateBy(u *uint64) *AppCreate {
	if u != nil {
		ac.SetUpdateBy(*u)
	}
	return ac
}

// SetUUID sets the "uuid" field.
func (ac *AppCreate) SetUUID(u *uuid.UUID) *AppCreate {
	ac.mutation.SetUUID(u)
	return ac
}

// SetTypeID sets the "type_id" field.
func (ac *AppCreate) SetTypeID(u uint64) *AppCreate {
	ac.mutation.SetTypeID(u)
	return ac
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (ac *AppCreate) SetNillableTypeID(u *uint64) *AppCreate {
	if u != nil {
		ac.SetTypeID(*u)
	}
	return ac
}

// SetTitle sets the "title" field.
func (ac *AppCreate) SetTitle(s string) *AppCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ac *AppCreate) SetNillableTitle(s *string) *AppCreate {
	if s != nil {
		ac.SetTitle(*s)
	}
	return ac
}

// SetIntro sets the "intro" field.
func (ac *AppCreate) SetIntro(s string) *AppCreate {
	ac.mutation.SetIntro(s)
	return ac
}

// SetNillableIntro sets the "intro" field if the given value is not nil.
func (ac *AppCreate) SetNillableIntro(s *string) *AppCreate {
	if s != nil {
		ac.SetIntro(*s)
	}
	return ac
}

// SetMpOriginID sets the "mp_origin_id" field.
func (ac *AppCreate) SetMpOriginID(s string) *AppCreate {
	ac.mutation.SetMpOriginID(s)
	return ac
}

// SetNillableMpOriginID sets the "mp_origin_id" field if the given value is not nil.
func (ac *AppCreate) SetNillableMpOriginID(s *string) *AppCreate {
	if s != nil {
		ac.SetMpOriginID(*s)
	}
	return ac
}

// SetAppID sets the "app_id" field.
func (ac *AppCreate) SetAppID(s string) *AppCreate {
	ac.mutation.SetAppID(s)
	return ac
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ac *AppCreate) SetNillableAppID(s *string) *AppCreate {
	if s != nil {
		ac.SetAppID(*s)
	}
	return ac
}

// SetAppSecret sets the "app_secret" field.
func (ac *AppCreate) SetAppSecret(s string) *AppCreate {
	ac.mutation.SetAppSecret(s)
	return ac
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (ac *AppCreate) SetNillableAppSecret(s *string) *AppCreate {
	if s != nil {
		ac.SetAppSecret(*s)
	}
	return ac
}

// SetHasPaymentAuth sets the "has_payment_auth" field.
func (ac *AppCreate) SetHasPaymentAuth(b bool) *AppCreate {
	ac.mutation.SetHasPaymentAuth(b)
	return ac
}

// SetNillableHasPaymentAuth sets the "has_payment_auth" field if the given value is not nil.
func (ac *AppCreate) SetNillableHasPaymentAuth(b *bool) *AppCreate {
	if b != nil {
		ac.SetHasPaymentAuth(*b)
	}
	return ac
}

// SetRegisterUserNumber sets the "register_user_number" field.
func (ac *AppCreate) SetRegisterUserNumber(u uint64) *AppCreate {
	ac.mutation.SetRegisterUserNumber(u)
	return ac
}

// SetNillableRegisterUserNumber sets the "register_user_number" field if the given value is not nil.
func (ac *AppCreate) SetNillableRegisterUserNumber(u *uint64) *AppCreate {
	if u != nil {
		ac.SetRegisterUserNumber(*u)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AppCreate) SetStatus(u uint) *AppCreate {
	ac.mutation.SetStatus(u)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AppCreate) SetNillableStatus(u *uint) *AppCreate {
	if u != nil {
		ac.SetStatus(*u)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AppCreate) SetID(u uint64) *AppCreate {
	ac.mutation.SetID(u)
	return ac
}

// AddAppOptionIDs adds the "appOptions" edge to the AppOption entity by IDs.
func (ac *AppCreate) AddAppOptionIDs(ids ...uint64) *AppCreate {
	ac.mutation.AddAppOptionIDs(ids...)
	return ac
}

// AddAppOptions adds the "appOptions" edges to the AppOption entity.
func (ac *AppCreate) AddAppOptions(a ...*AppOption) *AppCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAppOptionIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (ac *AppCreate) Mutation() *AppMutation {
	return ac.mutation
}

// Save creates the App in the database.
func (ac *AppCreate) Save(ctx context.Context) (*App, error) {
	var (
		err  error
		node *App
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AppCreate) SaveX(ctx context.Context) *App {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AppCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AppCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AppCreate) defaults() {
	if _, ok := ac.mutation.DeleteTime(); !ok {
		v := app.DefaultDeleteTime
		ac.mutation.SetDeleteTime(v)
	}
	if _, ok := ac.mutation.CreateTime(); !ok {
		v := app.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.CreateBy(); !ok {
		v := app.DefaultCreateBy
		ac.mutation.SetCreateBy(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		v := app.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
	if _, ok := ac.mutation.UpdateBy(); !ok {
		v := app.DefaultUpdateBy
		ac.mutation.SetUpdateBy(v)
	}
	if _, ok := ac.mutation.UUID(); !ok {
		v := app.DefaultUUID()
		ac.mutation.SetUUID(v)
	}
	if _, ok := ac.mutation.TypeID(); !ok {
		v := app.DefaultTypeID
		ac.mutation.SetTypeID(v)
	}
	if _, ok := ac.mutation.Title(); !ok {
		v := app.DefaultTitle
		ac.mutation.SetTitle(v)
	}
	if _, ok := ac.mutation.Intro(); !ok {
		v := app.DefaultIntro
		ac.mutation.SetIntro(v)
	}
	if _, ok := ac.mutation.MpOriginID(); !ok {
		v := app.DefaultMpOriginID
		ac.mutation.SetMpOriginID(v)
	}
	if _, ok := ac.mutation.AppID(); !ok {
		v := app.DefaultAppID
		ac.mutation.SetAppID(v)
	}
	if _, ok := ac.mutation.AppSecret(); !ok {
		v := app.DefaultAppSecret
		ac.mutation.SetAppSecret(v)
	}
	if _, ok := ac.mutation.HasPaymentAuth(); !ok {
		v := app.DefaultHasPaymentAuth
		ac.mutation.SetHasPaymentAuth(v)
	}
	if _, ok := ac.mutation.RegisterUserNumber(); !ok {
		v := app.DefaultRegisterUserNumber
		ac.mutation.SetRegisterUserNumber(v)
	}
	if _, ok := ac.mutation.Status(); !ok {
		v := app.DefaultStatus
		ac.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AppCreate) check() error {
	if _, ok := ac.mutation.DeleteTime(); !ok {
		return &ValidationError{Name: "delete_time", err: errors.New(`ent: missing required field "delete_time"`)}
	}
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := ac.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "create_by", err: errors.New(`ent: missing required field "create_by"`)}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "update_time"`)}
	}
	if _, ok := ac.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "update_by", err: errors.New(`ent: missing required field "update_by"`)}
	}
	if _, ok := ac.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "uuid"`)}
	}
	if _, ok := ac.mutation.TypeID(); !ok {
		return &ValidationError{Name: "type_id", err: errors.New(`ent: missing required field "type_id"`)}
	}
	if _, ok := ac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "title"`)}
	}
	if v, ok := ac.mutation.Title(); ok {
		if err := app.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "title": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Intro(); !ok {
		return &ValidationError{Name: "intro", err: errors.New(`ent: missing required field "intro"`)}
	}
	if v, ok := ac.mutation.Intro(); ok {
		if err := app.IntroValidator(v); err != nil {
			return &ValidationError{Name: "intro", err: fmt.Errorf(`ent: validator failed for field "intro": %w`, err)}
		}
	}
	if _, ok := ac.mutation.MpOriginID(); !ok {
		return &ValidationError{Name: "mp_origin_id", err: errors.New(`ent: missing required field "mp_origin_id"`)}
	}
	if v, ok := ac.mutation.MpOriginID(); ok {
		if err := app.MpOriginIDValidator(v); err != nil {
			return &ValidationError{Name: "mp_origin_id", err: fmt.Errorf(`ent: validator failed for field "mp_origin_id": %w`, err)}
		}
	}
	if _, ok := ac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	if v, ok := ac.mutation.AppID(); ok {
		if err := app.AppIDValidator(v); err != nil {
			return &ValidationError{Name: "app_id", err: fmt.Errorf(`ent: validator failed for field "app_id": %w`, err)}
		}
	}
	if _, ok := ac.mutation.AppSecret(); !ok {
		return &ValidationError{Name: "app_secret", err: errors.New(`ent: missing required field "app_secret"`)}
	}
	if v, ok := ac.mutation.AppSecret(); ok {
		if err := app.AppSecretValidator(v); err != nil {
			return &ValidationError{Name: "app_secret", err: fmt.Errorf(`ent: validator failed for field "app_secret": %w`, err)}
		}
	}
	if _, ok := ac.mutation.HasPaymentAuth(); !ok {
		return &ValidationError{Name: "has_payment_auth", err: errors.New(`ent: missing required field "has_payment_auth"`)}
	}
	if _, ok := ac.mutation.RegisterUserNumber(); !ok {
		return &ValidationError{Name: "register_user_number", err: errors.New(`ent: missing required field "register_user_number"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if v, ok := ac.mutation.Status(); ok {
		if err := app.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "status": %w`, err)}
		}
	}
	return nil
}

func (ac *AppCreate) sqlSave(ctx context.Context) (*App, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (ac *AppCreate) createSpec() (*App, *sqlgraph.CreateSpec) {
	var (
		_node = &App{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: app.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: app.FieldID,
			},
		}
	)
	_spec.Schema = ac.schemaConfig.App
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.DeleteTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: app.FieldDeleteTime,
		})
		_node.DeleteTime = value
	}
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: app.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: app.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ac.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := ac.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: app.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := ac.mutation.TypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldTypeID,
		})
		_node.TypeID = value
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ac.mutation.Intro(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldIntro,
		})
		_node.Intro = value
	}
	if value, ok := ac.mutation.MpOriginID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldMpOriginID,
		})
		_node.MpOriginID = value
	}
	if value, ok := ac.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := ac.mutation.AppSecret(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppSecret,
		})
		_node.AppSecret = value
	}
	if value, ok := ac.mutation.HasPaymentAuth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: app.FieldHasPaymentAuth,
		})
		_node.HasPaymentAuth = value
	}
	if value, ok := ac.mutation.RegisterUserNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: app.FieldRegisterUserNumber,
		})
		_node.RegisterUserNumber = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: app.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := ac.mutation.AppOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.AppOptionsTable,
			Columns: []string{app.AppOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appoption.FieldID,
				},
			},
		}
		edge.Schema = ac.schemaConfig.AppOption
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.App.Create().
//		SetDeleteTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUpsert) {
//			SetDeleteTime(v+v).
//		}).
//		Exec(ctx)
//
func (ac *AppCreate) OnConflict(opts ...sql.ConflictOption) *AppUpsertOne {
	ac.conflict = opts
	return &AppUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *AppCreate) OnConflictColumns(columns ...string) *AppUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AppUpsertOne{
		create: ac,
	}
}

type (
	// AppUpsertOne is the builder for "upsert"-ing
	//  one App node.
	AppUpsertOne struct {
		create *AppCreate
	}

	// AppUpsert is the "OnConflict" setter.
	AppUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeleteTime sets the "delete_time" field.
func (u *AppUpsert) SetDeleteTime(v int64) *AppUpsert {
	u.Set(app.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *AppUpsert) UpdateDeleteTime() *AppUpsert {
	u.SetExcluded(app.FieldDeleteTime)
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *AppUpsert) SetCreateTime(v int64) *AppUpsert {
	u.Set(app.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AppUpsert) UpdateCreateTime() *AppUpsert {
	u.SetExcluded(app.FieldCreateTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *AppUpsert) SetCreateBy(v uint64) *AppUpsert {
	u.Set(app.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *AppUpsert) UpdateCreateBy() *AppUpsert {
	u.SetExcluded(app.FieldCreateBy)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AppUpsert) SetUpdateTime(v int64) *AppUpsert {
	u.Set(app.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AppUpsert) UpdateUpdateTime() *AppUpsert {
	u.SetExcluded(app.FieldUpdateTime)
	return u
}

// SetUpdateBy sets the "update_by" field.
func (u *AppUpsert) SetUpdateBy(v uint64) *AppUpsert {
	u.Set(app.FieldUpdateBy, v)
	return u
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *AppUpsert) UpdateUpdateBy() *AppUpsert {
	u.SetExcluded(app.FieldUpdateBy)
	return u
}

// SetUUID sets the "uuid" field.
func (u *AppUpsert) SetUUID(v *uuid.UUID) *AppUpsert {
	u.Set(app.FieldUUID, v)
	return u
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *AppUpsert) UpdateUUID() *AppUpsert {
	u.SetExcluded(app.FieldUUID)
	return u
}

// SetTypeID sets the "type_id" field.
func (u *AppUpsert) SetTypeID(v uint64) *AppUpsert {
	u.Set(app.FieldTypeID, v)
	return u
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *AppUpsert) UpdateTypeID() *AppUpsert {
	u.SetExcluded(app.FieldTypeID)
	return u
}

// SetTitle sets the "title" field.
func (u *AppUpsert) SetTitle(v string) *AppUpsert {
	u.Set(app.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AppUpsert) UpdateTitle() *AppUpsert {
	u.SetExcluded(app.FieldTitle)
	return u
}

// SetIntro sets the "intro" field.
func (u *AppUpsert) SetIntro(v string) *AppUpsert {
	u.Set(app.FieldIntro, v)
	return u
}

// UpdateIntro sets the "intro" field to the value that was provided on create.
func (u *AppUpsert) UpdateIntro() *AppUpsert {
	u.SetExcluded(app.FieldIntro)
	return u
}

// SetMpOriginID sets the "mp_origin_id" field.
func (u *AppUpsert) SetMpOriginID(v string) *AppUpsert {
	u.Set(app.FieldMpOriginID, v)
	return u
}

// UpdateMpOriginID sets the "mp_origin_id" field to the value that was provided on create.
func (u *AppUpsert) UpdateMpOriginID() *AppUpsert {
	u.SetExcluded(app.FieldMpOriginID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppUpsert) SetAppID(v string) *AppUpsert {
	u.Set(app.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUpsert) UpdateAppID() *AppUpsert {
	u.SetExcluded(app.FieldAppID)
	return u
}

// SetAppSecret sets the "app_secret" field.
func (u *AppUpsert) SetAppSecret(v string) *AppUpsert {
	u.Set(app.FieldAppSecret, v)
	return u
}

// UpdateAppSecret sets the "app_secret" field to the value that was provided on create.
func (u *AppUpsert) UpdateAppSecret() *AppUpsert {
	u.SetExcluded(app.FieldAppSecret)
	return u
}

// SetHasPaymentAuth sets the "has_payment_auth" field.
func (u *AppUpsert) SetHasPaymentAuth(v bool) *AppUpsert {
	u.Set(app.FieldHasPaymentAuth, v)
	return u
}

// UpdateHasPaymentAuth sets the "has_payment_auth" field to the value that was provided on create.
func (u *AppUpsert) UpdateHasPaymentAuth() *AppUpsert {
	u.SetExcluded(app.FieldHasPaymentAuth)
	return u
}

// SetRegisterUserNumber sets the "register_user_number" field.
func (u *AppUpsert) SetRegisterUserNumber(v uint64) *AppUpsert {
	u.Set(app.FieldRegisterUserNumber, v)
	return u
}

// UpdateRegisterUserNumber sets the "register_user_number" field to the value that was provided on create.
func (u *AppUpsert) UpdateRegisterUserNumber() *AppUpsert {
	u.SetExcluded(app.FieldRegisterUserNumber)
	return u
}

// SetStatus sets the "status" field.
func (u *AppUpsert) SetStatus(v uint) *AppUpsert {
	u.Set(app.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AppUpsert) UpdateStatus() *AppUpsert {
	u.SetExcluded(app.FieldStatus)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(app.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppUpsertOne) UpdateNewValues() *AppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(app.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.App.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppUpsertOne) Ignore() *AppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUpsertOne) DoNothing() *AppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCreate.OnConflict
// documentation for more info.
func (u *AppUpsertOne) Update(set func(*AppUpsert)) *AppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *AppUpsertOne) SetDeleteTime(v int64) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateDeleteTime() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateDeleteTime()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *AppUpsertOne) SetCreateTime(v int64) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateCreateTime() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateCreateTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *AppUpsertOne) SetCreateBy(v uint64) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateCreateBy() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateCreateBy()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *AppUpsertOne) SetUpdateTime(v int64) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateUpdateTime() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *AppUpsertOne) SetUpdateBy(v uint64) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateUpdateBy() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateUpdateBy()
	})
}

// SetUUID sets the "uuid" field.
func (u *AppUpsertOne) SetUUID(v *uuid.UUID) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateUUID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateUUID()
	})
}

// SetTypeID sets the "type_id" field.
func (u *AppUpsertOne) SetTypeID(v uint64) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetTypeID(v)
	})
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateTypeID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateTypeID()
	})
}

// SetTitle sets the "title" field.
func (u *AppUpsertOne) SetTitle(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateTitle() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateTitle()
	})
}

// SetIntro sets the "intro" field.
func (u *AppUpsertOne) SetIntro(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetIntro(v)
	})
}

// UpdateIntro sets the "intro" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateIntro() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateIntro()
	})
}

// SetMpOriginID sets the "mp_origin_id" field.
func (u *AppUpsertOne) SetMpOriginID(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetMpOriginID(v)
	})
}

// UpdateMpOriginID sets the "mp_origin_id" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateMpOriginID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateMpOriginID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppUpsertOne) SetAppID(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateAppID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAppID()
	})
}

// SetAppSecret sets the "app_secret" field.
func (u *AppUpsertOne) SetAppSecret(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetAppSecret(v)
	})
}

// UpdateAppSecret sets the "app_secret" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateAppSecret() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAppSecret()
	})
}

// SetHasPaymentAuth sets the "has_payment_auth" field.
func (u *AppUpsertOne) SetHasPaymentAuth(v bool) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetHasPaymentAuth(v)
	})
}

// UpdateHasPaymentAuth sets the "has_payment_auth" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateHasPaymentAuth() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateHasPaymentAuth()
	})
}

// SetRegisterUserNumber sets the "register_user_number" field.
func (u *AppUpsertOne) SetRegisterUserNumber(v uint64) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetRegisterUserNumber(v)
	})
}

// UpdateRegisterUserNumber sets the "register_user_number" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateRegisterUserNumber() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateRegisterUserNumber()
	})
}

// SetStatus sets the "status" field.
func (u *AppUpsertOne) SetStatus(v uint) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateStatus() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *AppUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppCreateBulk is the builder for creating many App entities in bulk.
type AppCreateBulk struct {
	config
	builders []*AppCreate
	conflict []sql.ConflictOption
}

// Save creates the App entities in the database.
func (acb *AppCreateBulk) Save(ctx context.Context) ([]*App, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*App, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AppCreateBulk) SaveX(ctx context.Context) []*App {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AppCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AppCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.App.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUpsert) {
//			SetDeleteTime(v+v).
//		}).
//		Exec(ctx)
//
func (acb *AppCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppUpsertBulk {
	acb.conflict = opts
	return &AppUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *AppCreateBulk) OnConflictColumns(columns ...string) *AppUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AppUpsertBulk{
		create: acb,
	}
}

// AppUpsertBulk is the builder for "upsert"-ing
// a bulk of App nodes.
type AppUpsertBulk struct {
	create *AppCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(app.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppUpsertBulk) UpdateNewValues() *AppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(app.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppUpsertBulk) Ignore() *AppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUpsertBulk) DoNothing() *AppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCreateBulk.OnConflict
// documentation for more info.
func (u *AppUpsertBulk) Update(set func(*AppUpsert)) *AppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *AppUpsertBulk) SetDeleteTime(v int64) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateDeleteTime() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateDeleteTime()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *AppUpsertBulk) SetCreateTime(v int64) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateCreateTime() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateCreateTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *AppUpsertBulk) SetCreateBy(v uint64) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateCreateBy() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateCreateBy()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *AppUpsertBulk) SetUpdateTime(v int64) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateUpdateTime() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *AppUpsertBulk) SetUpdateBy(v uint64) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateUpdateBy() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateUpdateBy()
	})
}

// SetUUID sets the "uuid" field.
func (u *AppUpsertBulk) SetUUID(v *uuid.UUID) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateUUID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateUUID()
	})
}

// SetTypeID sets the "type_id" field.
func (u *AppUpsertBulk) SetTypeID(v uint64) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetTypeID(v)
	})
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateTypeID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateTypeID()
	})
}

// SetTitle sets the "title" field.
func (u *AppUpsertBulk) SetTitle(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateTitle() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateTitle()
	})
}

// SetIntro sets the "intro" field.
func (u *AppUpsertBulk) SetIntro(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetIntro(v)
	})
}

// UpdateIntro sets the "intro" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateIntro() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateIntro()
	})
}

// SetMpOriginID sets the "mp_origin_id" field.
func (u *AppUpsertBulk) SetMpOriginID(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetMpOriginID(v)
	})
}

// UpdateMpOriginID sets the "mp_origin_id" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateMpOriginID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateMpOriginID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppUpsertBulk) SetAppID(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateAppID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAppID()
	})
}

// SetAppSecret sets the "app_secret" field.
func (u *AppUpsertBulk) SetAppSecret(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetAppSecret(v)
	})
}

// UpdateAppSecret sets the "app_secret" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateAppSecret() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAppSecret()
	})
}

// SetHasPaymentAuth sets the "has_payment_auth" field.
func (u *AppUpsertBulk) SetHasPaymentAuth(v bool) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetHasPaymentAuth(v)
	})
}

// UpdateHasPaymentAuth sets the "has_payment_auth" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateHasPaymentAuth() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateHasPaymentAuth()
	})
}

// SetRegisterUserNumber sets the "register_user_number" field.
func (u *AppUpsertBulk) SetRegisterUserNumber(v uint64) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetRegisterUserNumber(v)
	})
}

// UpdateRegisterUserNumber sets the "register_user_number" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateRegisterUserNumber() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateRegisterUserNumber()
	})
}

// SetStatus sets the "status" field.
func (u *AppUpsertBulk) SetStatus(v uint) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateStatus() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *AppUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
