// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/emaillog"
)

// EmailLogCreate is the builder for creating a EmailLog entity.
type EmailLogCreate struct {
	config
	mutation *EmailLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (elc *EmailLogCreate) SetCreateTime(i int64) *EmailLogCreate {
	elc.mutation.SetCreateTime(i)
	return elc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableCreateTime(i *int64) *EmailLogCreate {
	if i != nil {
		elc.SetCreateTime(*i)
	}
	return elc
}

// SetCreateBy sets the "create_by" field.
func (elc *EmailLogCreate) SetCreateBy(u uint64) *EmailLogCreate {
	elc.mutation.SetCreateBy(u)
	return elc
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableCreateBy(u *uint64) *EmailLogCreate {
	if u != nil {
		elc.SetCreateBy(*u)
	}
	return elc
}

// SetUpdateTime sets the "update_time" field.
func (elc *EmailLogCreate) SetUpdateTime(i int64) *EmailLogCreate {
	elc.mutation.SetUpdateTime(i)
	return elc
}

// SetUpdateBy sets the "update_by" field.
func (elc *EmailLogCreate) SetUpdateBy(u uint64) *EmailLogCreate {
	elc.mutation.SetUpdateBy(u)
	return elc
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableUpdateBy(u *uint64) *EmailLogCreate {
	if u != nil {
		elc.SetUpdateBy(*u)
	}
	return elc
}

// SetAppID sets the "app_id" field.
func (elc *EmailLogCreate) SetAppID(u uint64) *EmailLogCreate {
	elc.mutation.SetAppID(u)
	return elc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableAppID(u *uint64) *EmailLogCreate {
	if u != nil {
		elc.SetAppID(*u)
	}
	return elc
}

// SetEmail sets the "email" field.
func (elc *EmailLogCreate) SetEmail(s string) *EmailLogCreate {
	elc.mutation.SetEmail(s)
	return elc
}

// SetScope sets the "scope" field.
func (elc *EmailLogCreate) SetScope(s string) *EmailLogCreate {
	elc.mutation.SetScope(s)
	return elc
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableScope(s *string) *EmailLogCreate {
	if s != nil {
		elc.SetScope(*s)
	}
	return elc
}

// SetTypeID sets the "type_id" field.
func (elc *EmailLogCreate) SetTypeID(u uint64) *EmailLogCreate {
	elc.mutation.SetTypeID(u)
	return elc
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableTypeID(u *uint64) *EmailLogCreate {
	if u != nil {
		elc.SetTypeID(*u)
	}
	return elc
}

// SetGateway sets the "gateway" field.
func (elc *EmailLogCreate) SetGateway(s string) *EmailLogCreate {
	elc.mutation.SetGateway(s)
	return elc
}

// SetNillableGateway sets the "gateway" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableGateway(s *string) *EmailLogCreate {
	if s != nil {
		elc.SetGateway(*s)
	}
	return elc
}

// SetIP sets the "ip" field.
func (elc *EmailLogCreate) SetIP(s string) *EmailLogCreate {
	elc.mutation.SetIP(s)
	return elc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableIP(s *string) *EmailLogCreate {
	if s != nil {
		elc.SetIP(*s)
	}
	return elc
}

// SetFromName sets the "from_name" field.
func (elc *EmailLogCreate) SetFromName(s string) *EmailLogCreate {
	elc.mutation.SetFromName(s)
	return elc
}

// SetNillableFromName sets the "from_name" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableFromName(s *string) *EmailLogCreate {
	if s != nil {
		elc.SetFromName(*s)
	}
	return elc
}

// SetFromAddress sets the "from_address" field.
func (elc *EmailLogCreate) SetFromAddress(s string) *EmailLogCreate {
	elc.mutation.SetFromAddress(s)
	return elc
}

// SetNillableFromAddress sets the "from_address" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableFromAddress(s *string) *EmailLogCreate {
	if s != nil {
		elc.SetFromAddress(*s)
	}
	return elc
}

// SetTitle sets the "title" field.
func (elc *EmailLogCreate) SetTitle(s string) *EmailLogCreate {
	elc.mutation.SetTitle(s)
	return elc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableTitle(s *string) *EmailLogCreate {
	if s != nil {
		elc.SetTitle(*s)
	}
	return elc
}

// SetContent sets the "content" field.
func (elc *EmailLogCreate) SetContent(s string) *EmailLogCreate {
	elc.mutation.SetContent(s)
	return elc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableContent(s *string) *EmailLogCreate {
	if s != nil {
		elc.SetContent(*s)
	}
	return elc
}

// SetData sets the "data" field.
func (elc *EmailLogCreate) SetData(s string) *EmailLogCreate {
	elc.mutation.SetData(s)
	return elc
}

// SetNillableData sets the "data" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableData(s *string) *EmailLogCreate {
	if s != nil {
		elc.SetData(*s)
	}
	return elc
}

// SetCheckCount sets the "check_count" field.
func (elc *EmailLogCreate) SetCheckCount(u uint8) *EmailLogCreate {
	elc.mutation.SetCheckCount(u)
	return elc
}

// SetNillableCheckCount sets the "check_count" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableCheckCount(u *uint8) *EmailLogCreate {
	if u != nil {
		elc.SetCheckCount(*u)
	}
	return elc
}

// SetStatus sets the "status" field.
func (elc *EmailLogCreate) SetStatus(u uint) *EmailLogCreate {
	elc.mutation.SetStatus(u)
	return elc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableStatus(u *uint) *EmailLogCreate {
	if u != nil {
		elc.SetStatus(*u)
	}
	return elc
}

// SetReturnMsg sets the "return_msg" field.
func (elc *EmailLogCreate) SetReturnMsg(s string) *EmailLogCreate {
	elc.mutation.SetReturnMsg(s)
	return elc
}

// SetNillableReturnMsg sets the "return_msg" field if the given value is not nil.
func (elc *EmailLogCreate) SetNillableReturnMsg(s *string) *EmailLogCreate {
	if s != nil {
		elc.SetReturnMsg(*s)
	}
	return elc
}

// SetID sets the "id" field.
func (elc *EmailLogCreate) SetID(u uint64) *EmailLogCreate {
	elc.mutation.SetID(u)
	return elc
}

// SetApp sets the "app" edge to the App entity.
func (elc *EmailLogCreate) SetApp(a *App) *EmailLogCreate {
	return elc.SetAppID(a.ID)
}

// Mutation returns the EmailLogMutation object of the builder.
func (elc *EmailLogCreate) Mutation() *EmailLogMutation {
	return elc.mutation
}

// Save creates the EmailLog in the database.
func (elc *EmailLogCreate) Save(ctx context.Context) (*EmailLog, error) {
	var (
		err  error
		node *EmailLog
	)
	elc.defaults()
	if len(elc.hooks) == 0 {
		if err = elc.check(); err != nil {
			return nil, err
		}
		node, err = elc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = elc.check(); err != nil {
				return nil, err
			}
			elc.mutation = mutation
			if node, err = elc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(elc.hooks) - 1; i >= 0; i-- {
			if elc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = elc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, elc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (elc *EmailLogCreate) SaveX(ctx context.Context) *EmailLog {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elc *EmailLogCreate) Exec(ctx context.Context) error {
	_, err := elc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elc *EmailLogCreate) ExecX(ctx context.Context) {
	if err := elc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (elc *EmailLogCreate) defaults() {
	if _, ok := elc.mutation.CreateTime(); !ok {
		v := emaillog.DefaultCreateTime()
		elc.mutation.SetCreateTime(v)
	}
	if _, ok := elc.mutation.CreateBy(); !ok {
		v := emaillog.DefaultCreateBy
		elc.mutation.SetCreateBy(v)
	}
	if _, ok := elc.mutation.UpdateBy(); !ok {
		v := emaillog.DefaultUpdateBy
		elc.mutation.SetUpdateBy(v)
	}
	if _, ok := elc.mutation.AppID(); !ok {
		v := emaillog.DefaultAppID
		elc.mutation.SetAppID(v)
	}
	if _, ok := elc.mutation.Scope(); !ok {
		v := emaillog.DefaultScope
		elc.mutation.SetScope(v)
	}
	if _, ok := elc.mutation.TypeID(); !ok {
		v := emaillog.DefaultTypeID
		elc.mutation.SetTypeID(v)
	}
	if _, ok := elc.mutation.Gateway(); !ok {
		v := emaillog.DefaultGateway
		elc.mutation.SetGateway(v)
	}
	if _, ok := elc.mutation.IP(); !ok {
		v := emaillog.DefaultIP
		elc.mutation.SetIP(v)
	}
	if _, ok := elc.mutation.FromName(); !ok {
		v := emaillog.DefaultFromName
		elc.mutation.SetFromName(v)
	}
	if _, ok := elc.mutation.FromAddress(); !ok {
		v := emaillog.DefaultFromAddress
		elc.mutation.SetFromAddress(v)
	}
	if _, ok := elc.mutation.Title(); !ok {
		v := emaillog.DefaultTitle
		elc.mutation.SetTitle(v)
	}
	if _, ok := elc.mutation.Content(); !ok {
		v := emaillog.DefaultContent
		elc.mutation.SetContent(v)
	}
	if _, ok := elc.mutation.Data(); !ok {
		v := emaillog.DefaultData
		elc.mutation.SetData(v)
	}
	if _, ok := elc.mutation.CheckCount(); !ok {
		v := emaillog.DefaultCheckCount
		elc.mutation.SetCheckCount(v)
	}
	if _, ok := elc.mutation.Status(); !ok {
		v := emaillog.DefaultStatus
		elc.mutation.SetStatus(v)
	}
	if _, ok := elc.mutation.ReturnMsg(); !ok {
		v := emaillog.DefaultReturnMsg
		elc.mutation.SetReturnMsg(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elc *EmailLogCreate) check() error {
	if _, ok := elc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := elc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "create_by", err: errors.New(`ent: missing required field "create_by"`)}
	}
	if _, ok := elc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "update_time"`)}
	}
	if _, ok := elc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "update_by", err: errors.New(`ent: missing required field "update_by"`)}
	}
	if _, ok := elc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	if _, ok := elc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "email"`)}
	}
	if v, ok := elc.mutation.Email(); ok {
		if err := emaillog.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "email": %w`, err)}
		}
	}
	if _, ok := elc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`ent: missing required field "scope"`)}
	}
	if v, ok := elc.mutation.Scope(); ok {
		if err := emaillog.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "scope": %w`, err)}
		}
	}
	if _, ok := elc.mutation.TypeID(); !ok {
		return &ValidationError{Name: "type_id", err: errors.New(`ent: missing required field "type_id"`)}
	}
	if _, ok := elc.mutation.Gateway(); !ok {
		return &ValidationError{Name: "gateway", err: errors.New(`ent: missing required field "gateway"`)}
	}
	if v, ok := elc.mutation.Gateway(); ok {
		if err := emaillog.GatewayValidator(v); err != nil {
			return &ValidationError{Name: "gateway", err: fmt.Errorf(`ent: validator failed for field "gateway": %w`, err)}
		}
	}
	if _, ok := elc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "ip"`)}
	}
	if v, ok := elc.mutation.IP(); ok {
		if err := emaillog.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "ip": %w`, err)}
		}
	}
	if _, ok := elc.mutation.FromName(); !ok {
		return &ValidationError{Name: "from_name", err: errors.New(`ent: missing required field "from_name"`)}
	}
	if v, ok := elc.mutation.FromName(); ok {
		if err := emaillog.FromNameValidator(v); err != nil {
			return &ValidationError{Name: "from_name", err: fmt.Errorf(`ent: validator failed for field "from_name": %w`, err)}
		}
	}
	if _, ok := elc.mutation.FromAddress(); !ok {
		return &ValidationError{Name: "from_address", err: errors.New(`ent: missing required field "from_address"`)}
	}
	if v, ok := elc.mutation.FromAddress(); ok {
		if err := emaillog.FromAddressValidator(v); err != nil {
			return &ValidationError{Name: "from_address", err: fmt.Errorf(`ent: validator failed for field "from_address": %w`, err)}
		}
	}
	if _, ok := elc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "title"`)}
	}
	if v, ok := elc.mutation.Title(); ok {
		if err := emaillog.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "title": %w`, err)}
		}
	}
	if _, ok := elc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "content"`)}
	}
	if _, ok := elc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "data"`)}
	}
	if v, ok := elc.mutation.Data(); ok {
		if err := emaillog.DataValidator(v); err != nil {
			return &ValidationError{Name: "data", err: fmt.Errorf(`ent: validator failed for field "data": %w`, err)}
		}
	}
	if _, ok := elc.mutation.CheckCount(); !ok {
		return &ValidationError{Name: "check_count", err: errors.New(`ent: missing required field "check_count"`)}
	}
	if _, ok := elc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if _, ok := elc.mutation.ReturnMsg(); !ok {
		return &ValidationError{Name: "return_msg", err: errors.New(`ent: missing required field "return_msg"`)}
	}
	if v, ok := elc.mutation.ReturnMsg(); ok {
		if err := emaillog.ReturnMsgValidator(v); err != nil {
			return &ValidationError{Name: "return_msg", err: fmt.Errorf(`ent: validator failed for field "return_msg": %w`, err)}
		}
	}
	if _, ok := elc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app", err: errors.New("ent: missing required edge \"app\"")}
	}
	return nil
}

func (elc *EmailLogCreate) sqlSave(ctx context.Context) (*EmailLog, error) {
	_node, _spec := elc.createSpec()
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (elc *EmailLogCreate) createSpec() (*EmailLog, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailLog{config: elc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: emaillog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: emaillog.FieldID,
			},
		}
	)
	_spec.Schema = elc.schemaConfig.EmailLog
	_spec.OnConflict = elc.conflict
	if id, ok := elc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := elc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: emaillog.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := elc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: emaillog.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := elc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: emaillog.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := elc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: emaillog.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := elc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := elc.mutation.Scope(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldScope,
		})
		_node.Scope = value
	}
	if value, ok := elc.mutation.TypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: emaillog.FieldTypeID,
		})
		_node.TypeID = value
	}
	if value, ok := elc.mutation.Gateway(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldGateway,
		})
		_node.Gateway = value
	}
	if value, ok := elc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := elc.mutation.FromName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldFromName,
		})
		_node.FromName = value
	}
	if value, ok := elc.mutation.FromAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldFromAddress,
		})
		_node.FromAddress = value
	}
	if value, ok := elc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := elc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := elc.mutation.Data(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldData,
		})
		_node.Data = value
	}
	if value, ok := elc.mutation.CheckCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: emaillog.FieldCheckCount,
		})
		_node.CheckCount = value
	}
	if value, ok := elc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: emaillog.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := elc.mutation.ReturnMsg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emaillog.FieldReturnMsg,
		})
		_node.ReturnMsg = value
	}
	if nodes := elc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emaillog.AppTable,
			Columns: []string{emaillog.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = elc.schemaConfig.EmailLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EmailLog.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmailLogUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (elc *EmailLogCreate) OnConflict(opts ...sql.ConflictOption) *EmailLogUpsertOne {
	elc.conflict = opts
	return &EmailLogUpsertOne{
		create: elc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EmailLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (elc *EmailLogCreate) OnConflictColumns(columns ...string) *EmailLogUpsertOne {
	elc.conflict = append(elc.conflict, sql.ConflictColumns(columns...))
	return &EmailLogUpsertOne{
		create: elc,
	}
}

type (
	// EmailLogUpsertOne is the builder for "upsert"-ing
	//  one EmailLog node.
	EmailLogUpsertOne struct {
		create *EmailLogCreate
	}

	// EmailLogUpsert is the "OnConflict" setter.
	EmailLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *EmailLogUpsert) SetCreateTime(v int64) *EmailLogUpsert {
	u.Set(emaillog.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateCreateTime() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldCreateTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *EmailLogUpsert) SetCreateBy(v uint64) *EmailLogUpsert {
	u.Set(emaillog.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateCreateBy() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldCreateBy)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *EmailLogUpsert) SetUpdateTime(v int64) *EmailLogUpsert {
	u.Set(emaillog.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateUpdateTime() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldUpdateTime)
	return u
}

// SetUpdateBy sets the "update_by" field.
func (u *EmailLogUpsert) SetUpdateBy(v uint64) *EmailLogUpsert {
	u.Set(emaillog.FieldUpdateBy, v)
	return u
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateUpdateBy() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldUpdateBy)
	return u
}

// SetAppID sets the "app_id" field.
func (u *EmailLogUpsert) SetAppID(v uint64) *EmailLogUpsert {
	u.Set(emaillog.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateAppID() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldAppID)
	return u
}

// SetEmail sets the "email" field.
func (u *EmailLogUpsert) SetEmail(v string) *EmailLogUpsert {
	u.Set(emaillog.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateEmail() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldEmail)
	return u
}

// SetScope sets the "scope" field.
func (u *EmailLogUpsert) SetScope(v string) *EmailLogUpsert {
	u.Set(emaillog.FieldScope, v)
	return u
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateScope() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldScope)
	return u
}

// SetTypeID sets the "type_id" field.
func (u *EmailLogUpsert) SetTypeID(v uint64) *EmailLogUpsert {
	u.Set(emaillog.FieldTypeID, v)
	return u
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateTypeID() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldTypeID)
	return u
}

// SetGateway sets the "gateway" field.
func (u *EmailLogUpsert) SetGateway(v string) *EmailLogUpsert {
	u.Set(emaillog.FieldGateway, v)
	return u
}

// UpdateGateway sets the "gateway" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateGateway() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldGateway)
	return u
}

// SetIP sets the "ip" field.
func (u *EmailLogUpsert) SetIP(v string) *EmailLogUpsert {
	u.Set(emaillog.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateIP() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldIP)
	return u
}

// SetFromName sets the "from_name" field.
func (u *EmailLogUpsert) SetFromName(v string) *EmailLogUpsert {
	u.Set(emaillog.FieldFromName, v)
	return u
}

// UpdateFromName sets the "from_name" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateFromName() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldFromName)
	return u
}

// SetFromAddress sets the "from_address" field.
func (u *EmailLogUpsert) SetFromAddress(v string) *EmailLogUpsert {
	u.Set(emaillog.FieldFromAddress, v)
	return u
}

// UpdateFromAddress sets the "from_address" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateFromAddress() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldFromAddress)
	return u
}

// SetTitle sets the "title" field.
func (u *EmailLogUpsert) SetTitle(v string) *EmailLogUpsert {
	u.Set(emaillog.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateTitle() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *EmailLogUpsert) SetContent(v string) *EmailLogUpsert {
	u.Set(emaillog.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateContent() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldContent)
	return u
}

// SetData sets the "data" field.
func (u *EmailLogUpsert) SetData(v string) *EmailLogUpsert {
	u.Set(emaillog.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateData() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldData)
	return u
}

// SetCheckCount sets the "check_count" field.
func (u *EmailLogUpsert) SetCheckCount(v uint8) *EmailLogUpsert {
	u.Set(emaillog.FieldCheckCount, v)
	return u
}

// UpdateCheckCount sets the "check_count" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateCheckCount() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldCheckCount)
	return u
}

// SetStatus sets the "status" field.
func (u *EmailLogUpsert) SetStatus(v uint) *EmailLogUpsert {
	u.Set(emaillog.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateStatus() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldStatus)
	return u
}

// SetReturnMsg sets the "return_msg" field.
func (u *EmailLogUpsert) SetReturnMsg(v string) *EmailLogUpsert {
	u.Set(emaillog.FieldReturnMsg, v)
	return u
}

// UpdateReturnMsg sets the "return_msg" field to the value that was provided on create.
func (u *EmailLogUpsert) UpdateReturnMsg() *EmailLogUpsert {
	u.SetExcluded(emaillog.FieldReturnMsg)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.EmailLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(emaillog.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *EmailLogUpsertOne) UpdateNewValues() *EmailLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(emaillog.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.EmailLog.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *EmailLogUpsertOne) Ignore() *EmailLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmailLogUpsertOne) DoNothing() *EmailLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmailLogCreate.OnConflict
// documentation for more info.
func (u *EmailLogUpsertOne) Update(set func(*EmailLogUpsert)) *EmailLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmailLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *EmailLogUpsertOne) SetCreateTime(v int64) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateCreateTime() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateCreateTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *EmailLogUpsertOne) SetCreateBy(v uint64) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateCreateBy() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateCreateBy()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *EmailLogUpsertOne) SetUpdateTime(v int64) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateUpdateTime() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *EmailLogUpsertOne) SetUpdateBy(v uint64) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateUpdateBy() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateUpdateBy()
	})
}

// SetAppID sets the "app_id" field.
func (u *EmailLogUpsertOne) SetAppID(v uint64) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateAppID() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateAppID()
	})
}

// SetEmail sets the "email" field.
func (u *EmailLogUpsertOne) SetEmail(v string) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateEmail() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateEmail()
	})
}

// SetScope sets the "scope" field.
func (u *EmailLogUpsertOne) SetScope(v string) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateScope() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateScope()
	})
}

// SetTypeID sets the "type_id" field.
func (u *EmailLogUpsertOne) SetTypeID(v uint64) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetTypeID(v)
	})
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateTypeID() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateTypeID()
	})
}

// SetGateway sets the "gateway" field.
func (u *EmailLogUpsertOne) SetGateway(v string) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetGateway(v)
	})
}

// UpdateGateway sets the "gateway" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateGateway() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateGateway()
	})
}

// SetIP sets the "ip" field.
func (u *EmailLogUpsertOne) SetIP(v string) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateIP() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateIP()
	})
}

// SetFromName sets the "from_name" field.
func (u *EmailLogUpsertOne) SetFromName(v string) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetFromName(v)
	})
}

// UpdateFromName sets the "from_name" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateFromName() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateFromName()
	})
}

// SetFromAddress sets the "from_address" field.
func (u *EmailLogUpsertOne) SetFromAddress(v string) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetFromAddress(v)
	})
}

// UpdateFromAddress sets the "from_address" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateFromAddress() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateFromAddress()
	})
}

// SetTitle sets the "title" field.
func (u *EmailLogUpsertOne) SetTitle(v string) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateTitle() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *EmailLogUpsertOne) SetContent(v string) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateContent() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateContent()
	})
}

// SetData sets the "data" field.
func (u *EmailLogUpsertOne) SetData(v string) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateData() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateData()
	})
}

// SetCheckCount sets the "check_count" field.
func (u *EmailLogUpsertOne) SetCheckCount(v uint8) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetCheckCount(v)
	})
}

// UpdateCheckCount sets the "check_count" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateCheckCount() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateCheckCount()
	})
}

// SetStatus sets the "status" field.
func (u *EmailLogUpsertOne) SetStatus(v uint) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateStatus() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateStatus()
	})
}

// SetReturnMsg sets the "return_msg" field.
func (u *EmailLogUpsertOne) SetReturnMsg(v string) *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetReturnMsg(v)
	})
}

// UpdateReturnMsg sets the "return_msg" field to the value that was provided on create.
func (u *EmailLogUpsertOne) UpdateReturnMsg() *EmailLogUpsertOne {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateReturnMsg()
	})
}

// Exec executes the query.
func (u *EmailLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmailLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmailLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EmailLogUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EmailLogUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EmailLogCreateBulk is the builder for creating many EmailLog entities in bulk.
type EmailLogCreateBulk struct {
	config
	builders []*EmailLogCreate
	conflict []sql.ConflictOption
}

// Save creates the EmailLog entities in the database.
func (elcb *EmailLogCreateBulk) Save(ctx context.Context) ([]*EmailLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(elcb.builders))
	nodes := make([]*EmailLog, len(elcb.builders))
	mutators := make([]Mutator, len(elcb.builders))
	for i := range elcb.builders {
		func(i int, root context.Context) {
			builder := elcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = elcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (elcb *EmailLogCreateBulk) SaveX(ctx context.Context) []*EmailLog {
	v, err := elcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elcb *EmailLogCreateBulk) Exec(ctx context.Context) error {
	_, err := elcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elcb *EmailLogCreateBulk) ExecX(ctx context.Context) {
	if err := elcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EmailLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmailLogUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (elcb *EmailLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *EmailLogUpsertBulk {
	elcb.conflict = opts
	return &EmailLogUpsertBulk{
		create: elcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EmailLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (elcb *EmailLogCreateBulk) OnConflictColumns(columns ...string) *EmailLogUpsertBulk {
	elcb.conflict = append(elcb.conflict, sql.ConflictColumns(columns...))
	return &EmailLogUpsertBulk{
		create: elcb,
	}
}

// EmailLogUpsertBulk is the builder for "upsert"-ing
// a bulk of EmailLog nodes.
type EmailLogUpsertBulk struct {
	create *EmailLogCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EmailLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(emaillog.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *EmailLogUpsertBulk) UpdateNewValues() *EmailLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(emaillog.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EmailLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *EmailLogUpsertBulk) Ignore() *EmailLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmailLogUpsertBulk) DoNothing() *EmailLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmailLogCreateBulk.OnConflict
// documentation for more info.
func (u *EmailLogUpsertBulk) Update(set func(*EmailLogUpsert)) *EmailLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmailLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *EmailLogUpsertBulk) SetCreateTime(v int64) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateCreateTime() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateCreateTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *EmailLogUpsertBulk) SetCreateBy(v uint64) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateCreateBy() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateCreateBy()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *EmailLogUpsertBulk) SetUpdateTime(v int64) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateUpdateTime() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *EmailLogUpsertBulk) SetUpdateBy(v uint64) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateUpdateBy() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateUpdateBy()
	})
}

// SetAppID sets the "app_id" field.
func (u *EmailLogUpsertBulk) SetAppID(v uint64) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateAppID() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateAppID()
	})
}

// SetEmail sets the "email" field.
func (u *EmailLogUpsertBulk) SetEmail(v string) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateEmail() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateEmail()
	})
}

// SetScope sets the "scope" field.
func (u *EmailLogUpsertBulk) SetScope(v string) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateScope() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateScope()
	})
}

// SetTypeID sets the "type_id" field.
func (u *EmailLogUpsertBulk) SetTypeID(v uint64) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetTypeID(v)
	})
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateTypeID() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateTypeID()
	})
}

// SetGateway sets the "gateway" field.
func (u *EmailLogUpsertBulk) SetGateway(v string) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetGateway(v)
	})
}

// UpdateGateway sets the "gateway" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateGateway() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateGateway()
	})
}

// SetIP sets the "ip" field.
func (u *EmailLogUpsertBulk) SetIP(v string) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateIP() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateIP()
	})
}

// SetFromName sets the "from_name" field.
func (u *EmailLogUpsertBulk) SetFromName(v string) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetFromName(v)
	})
}

// UpdateFromName sets the "from_name" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateFromName() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateFromName()
	})
}

// SetFromAddress sets the "from_address" field.
func (u *EmailLogUpsertBulk) SetFromAddress(v string) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetFromAddress(v)
	})
}

// UpdateFromAddress sets the "from_address" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateFromAddress() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateFromAddress()
	})
}

// SetTitle sets the "title" field.
func (u *EmailLogUpsertBulk) SetTitle(v string) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateTitle() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *EmailLogUpsertBulk) SetContent(v string) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateContent() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateContent()
	})
}

// SetData sets the "data" field.
func (u *EmailLogUpsertBulk) SetData(v string) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateData() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateData()
	})
}

// SetCheckCount sets the "check_count" field.
func (u *EmailLogUpsertBulk) SetCheckCount(v uint8) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetCheckCount(v)
	})
}

// UpdateCheckCount sets the "check_count" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateCheckCount() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateCheckCount()
	})
}

// SetStatus sets the "status" field.
func (u *EmailLogUpsertBulk) SetStatus(v uint) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateStatus() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateStatus()
	})
}

// SetReturnMsg sets the "return_msg" field.
func (u *EmailLogUpsertBulk) SetReturnMsg(v string) *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.SetReturnMsg(v)
	})
}

// UpdateReturnMsg sets the "return_msg" field to the value that was provided on create.
func (u *EmailLogUpsertBulk) UpdateReturnMsg() *EmailLogUpsertBulk {
	return u.Update(func(s *EmailLogUpsert) {
		s.UpdateReturnMsg()
	})
}

// Exec executes the query.
func (u *EmailLogUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EmailLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmailLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmailLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
