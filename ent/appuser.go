// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/appuser"
	"github.com/boshangad/v1/ent/user"
)

// AppUser is the model entity for the AppUser schema.
type AppUser struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID uint64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime int64 `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime int64 `json:"update_time,omitempty"`
	// AppID holds the value of the "app_id" field.
	// 应用
	AppID uint64 `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	// 用户
	UserID uint64 `json:"user_id,omitempty"`
	// OpenID holds the value of the "open_id" field.
	// 微信开放ID
	OpenID string `json:"open_id,omitempty"`
	// Unionid holds the value of the "unionid" field.
	// 微信联合用户
	Unionid string `json:"unionid,omitempty"`
	// SessionKey holds the value of the "session_key" field.
	// 会话密钥
	SessionKey string `json:"session_key,omitempty"`
	// IsLoadUserProfile holds the value of the "is_load_user_profile" field.
	// 是否加载用户信息
	IsLoadUserProfile bool `json:"is_load_user_profile,omitempty"`
	// Nickname holds the value of the "nickname" field.
	// 昵称
	Nickname string `json:"nickname,omitempty"`
	// Avatar holds the value of the "avatar" field.
	// 头像
	Avatar string `json:"avatar,omitempty"`
	// AvatarURL holds the value of the "avatar_url" field.
	// 头像
	AvatarURL string `json:"avatar_url,omitempty"`
	// Gender holds the value of the "gender" field.
	// 性别
	Gender uint `json:"gender,omitempty"`
	// County holds the value of the "county" field.
	// 国籍
	County string `json:"county,omitempty"`
	// CountryCode holds the value of the "country_code" field.
	// 国籍代码
	CountryCode string `json:"country_code,omitempty"`
	// Province holds the value of the "province" field.
	// 省份
	Province string `json:"province,omitempty"`
	// City holds the value of the "city" field.
	// 城市
	City string `json:"city,omitempty"`
	// Language holds the value of the "language" field.
	// 语言
	Language string `json:"language,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	// 联系号码
	PhoneNumber string `json:"phone_number,omitempty"`
	// PurePhoneNumber holds the value of the "pure_phone_number" field.
	// 联系号码
	PurePhoneNumber string `json:"pure_phone_number,omitempty"`
	// Watermark holds the value of the "watermark" field.
	// 备注
	Watermark string `json:"watermark,omitempty"`
	// LoadUserProfileTime holds the value of the "load_user_profile_time" field.
	// 加载用户信息时间
	LoadUserProfileTime uint64 `json:"load_user_profile_time,omitempty"`
	// LastLoginTime holds the value of the "last_login_time" field.
	// 最后登录时间
	LastLoginTime uint64 `json:"last_login_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppUserQuery when eager-loading is set.
	Edges AppUserEdges `json:"edges"`
}

// AppUserEdges holds the relations/edges for other nodes in the graph.
type AppUserEdges struct {
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppUserEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// The edge app was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppUserEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appuser.FieldIsLoadUserProfile:
			values[i] = new(sql.NullBool)
		case appuser.FieldID, appuser.FieldCreateTime, appuser.FieldUpdateTime, appuser.FieldAppID, appuser.FieldUserID, appuser.FieldGender, appuser.FieldLoadUserProfileTime, appuser.FieldLastLoginTime:
			values[i] = new(sql.NullInt64)
		case appuser.FieldOpenID, appuser.FieldUnionid, appuser.FieldSessionKey, appuser.FieldNickname, appuser.FieldAvatar, appuser.FieldAvatarURL, appuser.FieldCounty, appuser.FieldCountryCode, appuser.FieldProvince, appuser.FieldCity, appuser.FieldLanguage, appuser.FieldPhoneNumber, appuser.FieldPurePhoneNumber, appuser.FieldWatermark:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppUser fields.
func (au *AppUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			au.ID = uint64(value.Int64)
		case appuser.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				au.CreateTime = value.Int64
			}
		case appuser.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				au.UpdateTime = value.Int64
			}
		case appuser.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				au.AppID = uint64(value.Int64)
			}
		case appuser.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				au.UserID = uint64(value.Int64)
			}
		case appuser.FieldOpenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field open_id", values[i])
			} else if value.Valid {
				au.OpenID = value.String
			}
		case appuser.FieldUnionid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unionid", values[i])
			} else if value.Valid {
				au.Unionid = value.String
			}
		case appuser.FieldSessionKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_key", values[i])
			} else if value.Valid {
				au.SessionKey = value.String
			}
		case appuser.FieldIsLoadUserProfile:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_load_user_profile", values[i])
			} else if value.Valid {
				au.IsLoadUserProfile = value.Bool
			}
		case appuser.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				au.Nickname = value.String
			}
		case appuser.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				au.Avatar = value.String
			}
		case appuser.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				au.AvatarURL = value.String
			}
		case appuser.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				au.Gender = uint(value.Int64)
			}
		case appuser.FieldCounty:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field county", values[i])
			} else if value.Valid {
				au.County = value.String
			}
		case appuser.FieldCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country_code", values[i])
			} else if value.Valid {
				au.CountryCode = value.String
			}
		case appuser.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				au.Province = value.String
			}
		case appuser.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				au.City = value.String
			}
		case appuser.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				au.Language = value.String
			}
		case appuser.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				au.PhoneNumber = value.String
			}
		case appuser.FieldPurePhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pure_phone_number", values[i])
			} else if value.Valid {
				au.PurePhoneNumber = value.String
			}
		case appuser.FieldWatermark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field watermark", values[i])
			} else if value.Valid {
				au.Watermark = value.String
			}
		case appuser.FieldLoadUserProfileTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field load_user_profile_time", values[i])
			} else if value.Valid {
				au.LoadUserProfileTime = uint64(value.Int64)
			}
		case appuser.FieldLastLoginTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_time", values[i])
			} else if value.Valid {
				au.LastLoginTime = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryApp queries the "app" edge of the AppUser entity.
func (au *AppUser) QueryApp() *AppQuery {
	return (&AppUserClient{config: au.config}).QueryApp(au)
}

// QueryUser queries the "user" edge of the AppUser entity.
func (au *AppUser) QueryUser() *UserQuery {
	return (&AppUserClient{config: au.config}).QueryUser(au)
}

// Update returns a builder for updating this AppUser.
// Note that you need to call AppUser.Unwrap() before calling this method if this AppUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (au *AppUser) Update() *AppUserUpdateOne {
	return (&AppUserClient{config: au.config}).UpdateOne(au)
}

// Unwrap unwraps the AppUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (au *AppUser) Unwrap() *AppUser {
	tx, ok := au.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppUser is not a transactional entity")
	}
	au.config.driver = tx.drv
	return au
}

// String implements the fmt.Stringer.
func (au *AppUser) String() string {
	var builder strings.Builder
	builder.WriteString("AppUser(")
	builder.WriteString(fmt.Sprintf("id=%v", au.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", au.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", au.UpdateTime))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", au.AppID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", au.UserID))
	builder.WriteString(", open_id=")
	builder.WriteString(au.OpenID)
	builder.WriteString(", unionid=")
	builder.WriteString(au.Unionid)
	builder.WriteString(", session_key=")
	builder.WriteString(au.SessionKey)
	builder.WriteString(", is_load_user_profile=")
	builder.WriteString(fmt.Sprintf("%v", au.IsLoadUserProfile))
	builder.WriteString(", nickname=")
	builder.WriteString(au.Nickname)
	builder.WriteString(", avatar=")
	builder.WriteString(au.Avatar)
	builder.WriteString(", avatar_url=")
	builder.WriteString(au.AvatarURL)
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", au.Gender))
	builder.WriteString(", county=")
	builder.WriteString(au.County)
	builder.WriteString(", country_code=")
	builder.WriteString(au.CountryCode)
	builder.WriteString(", province=")
	builder.WriteString(au.Province)
	builder.WriteString(", city=")
	builder.WriteString(au.City)
	builder.WriteString(", language=")
	builder.WriteString(au.Language)
	builder.WriteString(", phone_number=")
	builder.WriteString(au.PhoneNumber)
	builder.WriteString(", pure_phone_number=")
	builder.WriteString(au.PurePhoneNumber)
	builder.WriteString(", watermark=")
	builder.WriteString(au.Watermark)
	builder.WriteString(", load_user_profile_time=")
	builder.WriteString(fmt.Sprintf("%v", au.LoadUserProfileTime))
	builder.WriteString(", last_login_time=")
	builder.WriteString(fmt.Sprintf("%v", au.LastLoginTime))
	builder.WriteByte(')')
	return builder.String()
}

// AppUsers is a parsable slice of AppUser.
type AppUsers []*AppUser

func (au AppUsers) config(cfg config) {
	for _i := range au {
		au[_i].config = cfg
	}
}
