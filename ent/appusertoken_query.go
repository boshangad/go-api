// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/appuser"
	"github.com/boshangad/v1/ent/appusertoken"
	"github.com/boshangad/v1/ent/internal"
	"github.com/boshangad/v1/ent/predicate"
	"github.com/boshangad/v1/ent/user"
)

// AppUserTokenQuery is the builder for querying AppUserToken entities.
type AppUserTokenQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AppUserToken
	// eager-loading edges.
	withApp     *AppQuery
	withAppUser *AppUserQuery
	withUser    *UserQuery
	modifiers   []func(s *sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AppUserTokenQuery builder.
func (autq *AppUserTokenQuery) Where(ps ...predicate.AppUserToken) *AppUserTokenQuery {
	autq.predicates = append(autq.predicates, ps...)
	return autq
}

// Limit adds a limit step to the query.
func (autq *AppUserTokenQuery) Limit(limit int) *AppUserTokenQuery {
	autq.limit = &limit
	return autq
}

// Offset adds an offset step to the query.
func (autq *AppUserTokenQuery) Offset(offset int) *AppUserTokenQuery {
	autq.offset = &offset
	return autq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (autq *AppUserTokenQuery) Unique(unique bool) *AppUserTokenQuery {
	autq.unique = &unique
	return autq
}

// Order adds an order step to the query.
func (autq *AppUserTokenQuery) Order(o ...OrderFunc) *AppUserTokenQuery {
	autq.order = append(autq.order, o...)
	return autq
}

// QueryApp chains the current query on the "app" edge.
func (autq *AppUserTokenQuery) QueryApp() *AppQuery {
	query := &AppQuery{config: autq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := autq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := autq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appusertoken.Table, appusertoken.FieldID, selector),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, appusertoken.AppTable, appusertoken.AppColumn),
		)
		schemaConfig := autq.schemaConfig
		step.To.Schema = schemaConfig.App
		step.Edge.Schema = schemaConfig.AppUserToken
		fromU = sqlgraph.SetNeighbors(autq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppUser chains the current query on the "appUser" edge.
func (autq *AppUserTokenQuery) QueryAppUser() *AppUserQuery {
	query := &AppUserQuery{config: autq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := autq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := autq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appusertoken.Table, appusertoken.FieldID, selector),
			sqlgraph.To(appuser.Table, appuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, appusertoken.AppUserTable, appusertoken.AppUserColumn),
		)
		schemaConfig := autq.schemaConfig
		step.To.Schema = schemaConfig.AppUser
		step.Edge.Schema = schemaConfig.AppUserToken
		fromU = sqlgraph.SetNeighbors(autq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (autq *AppUserTokenQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: autq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := autq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := autq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appusertoken.Table, appusertoken.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, appusertoken.UserTable, appusertoken.UserColumn),
		)
		schemaConfig := autq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.AppUserToken
		fromU = sqlgraph.SetNeighbors(autq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AppUserToken entity from the query.
// Returns a *NotFoundError when no AppUserToken was found.
func (autq *AppUserTokenQuery) First(ctx context.Context) (*AppUserToken, error) {
	nodes, err := autq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{appusertoken.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (autq *AppUserTokenQuery) FirstX(ctx context.Context) *AppUserToken {
	node, err := autq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AppUserToken ID from the query.
// Returns a *NotFoundError when no AppUserToken ID was found.
func (autq *AppUserTokenQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = autq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{appusertoken.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (autq *AppUserTokenQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := autq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AppUserToken entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one AppUserToken entity is not found.
// Returns a *NotFoundError when no AppUserToken entities are found.
func (autq *AppUserTokenQuery) Only(ctx context.Context) (*AppUserToken, error) {
	nodes, err := autq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{appusertoken.Label}
	default:
		return nil, &NotSingularError{appusertoken.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (autq *AppUserTokenQuery) OnlyX(ctx context.Context) *AppUserToken {
	node, err := autq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AppUserToken ID in the query.
// Returns a *NotSingularError when exactly one AppUserToken ID is not found.
// Returns a *NotFoundError when no entities are found.
func (autq *AppUserTokenQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = autq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{appusertoken.Label}
	default:
		err = &NotSingularError{appusertoken.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (autq *AppUserTokenQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := autq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AppUserTokens.
func (autq *AppUserTokenQuery) All(ctx context.Context) ([]*AppUserToken, error) {
	if err := autq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return autq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (autq *AppUserTokenQuery) AllX(ctx context.Context) []*AppUserToken {
	nodes, err := autq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AppUserToken IDs.
func (autq *AppUserTokenQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := autq.Select(appusertoken.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (autq *AppUserTokenQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := autq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (autq *AppUserTokenQuery) Count(ctx context.Context) (int, error) {
	if err := autq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return autq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (autq *AppUserTokenQuery) CountX(ctx context.Context) int {
	count, err := autq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (autq *AppUserTokenQuery) Exist(ctx context.Context) (bool, error) {
	if err := autq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return autq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (autq *AppUserTokenQuery) ExistX(ctx context.Context) bool {
	exist, err := autq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AppUserTokenQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (autq *AppUserTokenQuery) Clone() *AppUserTokenQuery {
	if autq == nil {
		return nil
	}
	return &AppUserTokenQuery{
		config:      autq.config,
		limit:       autq.limit,
		offset:      autq.offset,
		order:       append([]OrderFunc{}, autq.order...),
		predicates:  append([]predicate.AppUserToken{}, autq.predicates...),
		withApp:     autq.withApp.Clone(),
		withAppUser: autq.withAppUser.Clone(),
		withUser:    autq.withUser.Clone(),
		// clone intermediate query.
		sql:  autq.sql.Clone(),
		path: autq.path,
	}
}

// WithApp tells the query-builder to eager-load the nodes that are connected to
// the "app" edge. The optional arguments are used to configure the query builder of the edge.
func (autq *AppUserTokenQuery) WithApp(opts ...func(*AppQuery)) *AppUserTokenQuery {
	query := &AppQuery{config: autq.config}
	for _, opt := range opts {
		opt(query)
	}
	autq.withApp = query
	return autq
}

// WithAppUser tells the query-builder to eager-load the nodes that are connected to
// the "appUser" edge. The optional arguments are used to configure the query builder of the edge.
func (autq *AppUserTokenQuery) WithAppUser(opts ...func(*AppUserQuery)) *AppUserTokenQuery {
	query := &AppUserQuery{config: autq.config}
	for _, opt := range opts {
		opt(query)
	}
	autq.withAppUser = query
	return autq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (autq *AppUserTokenQuery) WithUser(opts ...func(*UserQuery)) *AppUserTokenQuery {
	query := &UserQuery{config: autq.config}
	for _, opt := range opts {
		opt(query)
	}
	autq.withUser = query
	return autq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime int64 `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AppUserToken.Query().
//		GroupBy(appusertoken.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (autq *AppUserTokenQuery) GroupBy(field string, fields ...string) *AppUserTokenGroupBy {
	group := &AppUserTokenGroupBy{config: autq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := autq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return autq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime int64 `json:"create_time,omitempty"`
//	}
//
//	client.AppUserToken.Query().
//		Select(appusertoken.FieldCreateTime).
//		Scan(ctx, &v)
//
func (autq *AppUserTokenQuery) Select(fields ...string) *AppUserTokenSelect {
	autq.fields = append(autq.fields, fields...)
	return &AppUserTokenSelect{AppUserTokenQuery: autq}
}

func (autq *AppUserTokenQuery) prepareQuery(ctx context.Context) error {
	for _, f := range autq.fields {
		if !appusertoken.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if autq.path != nil {
		prev, err := autq.path(ctx)
		if err != nil {
			return err
		}
		autq.sql = prev
	}
	return nil
}

func (autq *AppUserTokenQuery) sqlAll(ctx context.Context) ([]*AppUserToken, error) {
	var (
		nodes       = []*AppUserToken{}
		_spec       = autq.querySpec()
		loadedTypes = [3]bool{
			autq.withApp != nil,
			autq.withAppUser != nil,
			autq.withUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AppUserToken{config: autq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(autq.modifiers) > 0 {
		_spec.Modifiers = autq.modifiers
	}
	_spec.Node.Schema = autq.schemaConfig.AppUserToken
	ctx = internal.NewSchemaConfigContext(ctx, autq.schemaConfig)
	if err := sqlgraph.QueryNodes(ctx, autq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := autq.withApp; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*AppUserToken)
		for i := range nodes {
			fk := nodes[i].AppID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(app.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.App = n
			}
		}
	}

	if query := autq.withAppUser; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*AppUserToken)
		for i := range nodes {
			fk := nodes[i].AppUserID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(appuser.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_user_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.AppUser = n
			}
		}
	}

	if query := autq.withUser; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*AppUserToken)
		for i := range nodes {
			fk := nodes[i].UserID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	return nodes, nil
}

func (autq *AppUserTokenQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := autq.querySpec()
	if len(autq.modifiers) > 0 {
		_spec.Modifiers = autq.modifiers
	}
	_spec.Node.Schema = autq.schemaConfig.AppUserToken
	ctx = internal.NewSchemaConfigContext(ctx, autq.schemaConfig)
	return sqlgraph.CountNodes(ctx, autq.driver, _spec)
}

func (autq *AppUserTokenQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := autq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (autq *AppUserTokenQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appusertoken.Table,
			Columns: appusertoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: appusertoken.FieldID,
			},
		},
		From:   autq.sql,
		Unique: true,
	}
	if unique := autq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := autq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appusertoken.FieldID)
		for i := range fields {
			if fields[i] != appusertoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := autq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := autq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := autq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := autq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (autq *AppUserTokenQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(autq.driver.Dialect())
	t1 := builder.Table(appusertoken.Table)
	columns := autq.fields
	if len(columns) == 0 {
		columns = appusertoken.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if autq.sql != nil {
		selector = autq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, m := range autq.modifiers {
		m(selector)
	}
	t1.Schema(autq.schemaConfig.AppUserToken)
	ctx = internal.NewSchemaConfigContext(ctx, autq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range autq.predicates {
		p(selector)
	}
	for _, p := range autq.order {
		p(selector)
	}
	if offset := autq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := autq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (autq *AppUserTokenQuery) ForUpdate(opts ...sql.LockOption) *AppUserTokenQuery {
	if autq.driver.Dialect() == dialect.Postgres {
		autq.Unique(false)
	}
	autq.modifiers = append(autq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return autq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (autq *AppUserTokenQuery) ForShare(opts ...sql.LockOption) *AppUserTokenQuery {
	if autq.driver.Dialect() == dialect.Postgres {
		autq.Unique(false)
	}
	autq.modifiers = append(autq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return autq
}

// AppUserTokenGroupBy is the group-by builder for AppUserToken entities.
type AppUserTokenGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (autgb *AppUserTokenGroupBy) Aggregate(fns ...AggregateFunc) *AppUserTokenGroupBy {
	autgb.fns = append(autgb.fns, fns...)
	return autgb
}

// Scan applies the group-by query and scans the result into the given value.
func (autgb *AppUserTokenGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := autgb.path(ctx)
	if err != nil {
		return err
	}
	autgb.sql = query
	return autgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (autgb *AppUserTokenGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := autgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (autgb *AppUserTokenGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(autgb.fields) > 1 {
		return nil, errors.New("ent: AppUserTokenGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := autgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (autgb *AppUserTokenGroupBy) StringsX(ctx context.Context) []string {
	v, err := autgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (autgb *AppUserTokenGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = autgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appusertoken.Label}
	default:
		err = fmt.Errorf("ent: AppUserTokenGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (autgb *AppUserTokenGroupBy) StringX(ctx context.Context) string {
	v, err := autgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (autgb *AppUserTokenGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(autgb.fields) > 1 {
		return nil, errors.New("ent: AppUserTokenGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := autgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (autgb *AppUserTokenGroupBy) IntsX(ctx context.Context) []int {
	v, err := autgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (autgb *AppUserTokenGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = autgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appusertoken.Label}
	default:
		err = fmt.Errorf("ent: AppUserTokenGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (autgb *AppUserTokenGroupBy) IntX(ctx context.Context) int {
	v, err := autgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (autgb *AppUserTokenGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(autgb.fields) > 1 {
		return nil, errors.New("ent: AppUserTokenGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := autgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (autgb *AppUserTokenGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := autgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (autgb *AppUserTokenGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = autgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appusertoken.Label}
	default:
		err = fmt.Errorf("ent: AppUserTokenGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (autgb *AppUserTokenGroupBy) Float64X(ctx context.Context) float64 {
	v, err := autgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (autgb *AppUserTokenGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(autgb.fields) > 1 {
		return nil, errors.New("ent: AppUserTokenGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := autgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (autgb *AppUserTokenGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := autgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (autgb *AppUserTokenGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = autgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appusertoken.Label}
	default:
		err = fmt.Errorf("ent: AppUserTokenGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (autgb *AppUserTokenGroupBy) BoolX(ctx context.Context) bool {
	v, err := autgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (autgb *AppUserTokenGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range autgb.fields {
		if !appusertoken.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := autgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := autgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (autgb *AppUserTokenGroupBy) sqlQuery() *sql.Selector {
	selector := autgb.sql.Select()
	aggregation := make([]string, 0, len(autgb.fns))
	for _, fn := range autgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(autgb.fields)+len(autgb.fns))
		for _, f := range autgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(autgb.fields...)...)
}

// AppUserTokenSelect is the builder for selecting fields of AppUserToken entities.
type AppUserTokenSelect struct {
	*AppUserTokenQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (auts *AppUserTokenSelect) Scan(ctx context.Context, v interface{}) error {
	if err := auts.prepareQuery(ctx); err != nil {
		return err
	}
	auts.sql = auts.AppUserTokenQuery.sqlQuery(ctx)
	return auts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (auts *AppUserTokenSelect) ScanX(ctx context.Context, v interface{}) {
	if err := auts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (auts *AppUserTokenSelect) Strings(ctx context.Context) ([]string, error) {
	if len(auts.fields) > 1 {
		return nil, errors.New("ent: AppUserTokenSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := auts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (auts *AppUserTokenSelect) StringsX(ctx context.Context) []string {
	v, err := auts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (auts *AppUserTokenSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = auts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appusertoken.Label}
	default:
		err = fmt.Errorf("ent: AppUserTokenSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (auts *AppUserTokenSelect) StringX(ctx context.Context) string {
	v, err := auts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (auts *AppUserTokenSelect) Ints(ctx context.Context) ([]int, error) {
	if len(auts.fields) > 1 {
		return nil, errors.New("ent: AppUserTokenSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := auts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (auts *AppUserTokenSelect) IntsX(ctx context.Context) []int {
	v, err := auts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (auts *AppUserTokenSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = auts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appusertoken.Label}
	default:
		err = fmt.Errorf("ent: AppUserTokenSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (auts *AppUserTokenSelect) IntX(ctx context.Context) int {
	v, err := auts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (auts *AppUserTokenSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(auts.fields) > 1 {
		return nil, errors.New("ent: AppUserTokenSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := auts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (auts *AppUserTokenSelect) Float64sX(ctx context.Context) []float64 {
	v, err := auts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (auts *AppUserTokenSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = auts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appusertoken.Label}
	default:
		err = fmt.Errorf("ent: AppUserTokenSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (auts *AppUserTokenSelect) Float64X(ctx context.Context) float64 {
	v, err := auts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (auts *AppUserTokenSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(auts.fields) > 1 {
		return nil, errors.New("ent: AppUserTokenSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := auts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (auts *AppUserTokenSelect) BoolsX(ctx context.Context) []bool {
	v, err := auts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (auts *AppUserTokenSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = auts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appusertoken.Label}
	default:
		err = fmt.Errorf("ent: AppUserTokenSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (auts *AppUserTokenSelect) BoolX(ctx context.Context) bool {
	v, err := auts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (auts *AppUserTokenSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := auts.sql.Query()
	if err := auts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
