// Code generated by entc, DO NOT EDIT.

package app

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/boshangad/v1/ent/internal"
	"github.com/boshangad/v1/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// Alias applies equality check predicate on the "alias" field. It's identical to AliasEQ.
func Alias(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlias), v))
	})
}

// TypeID applies equality check predicate on the "type_id" field. It's identical to TypeIDEQ.
func TypeID(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeID), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Intro applies equality check predicate on the "intro" field. It's identical to IntroEQ.
func Intro(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntro), v))
	})
}

// MpOriginID applies equality check predicate on the "mp_origin_id" field. It's identical to MpOriginIDEQ.
func MpOriginID(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMpOriginID), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppSecret applies equality check predicate on the "app_secret" field. It's identical to AppSecretEQ.
func AppSecret(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppSecret), v))
	})
}

// HasPaymentAuth applies equality check predicate on the "has_payment_auth" field. It's identical to HasPaymentAuthEQ.
func HasPaymentAuth(v bool) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasPaymentAuth), v))
	})
}

// RegisterUserNumber applies equality check predicate on the "register_user_number" field. It's identical to RegisterUserNumberEQ.
func RegisterUserNumber(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisterUserNumber), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...int64) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...int64) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteTime), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...int64) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...int64) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint64) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint64) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...int64) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...int64) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint64) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint64) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// AliasEQ applies the EQ predicate on the "alias" field.
func AliasEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlias), v))
	})
}

// AliasNEQ applies the NEQ predicate on the "alias" field.
func AliasNEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlias), v))
	})
}

// AliasIn applies the In predicate on the "alias" field.
func AliasIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlias), v...))
	})
}

// AliasNotIn applies the NotIn predicate on the "alias" field.
func AliasNotIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlias), v...))
	})
}

// AliasGT applies the GT predicate on the "alias" field.
func AliasGT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlias), v))
	})
}

// AliasGTE applies the GTE predicate on the "alias" field.
func AliasGTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlias), v))
	})
}

// AliasLT applies the LT predicate on the "alias" field.
func AliasLT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlias), v))
	})
}

// AliasLTE applies the LTE predicate on the "alias" field.
func AliasLTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlias), v))
	})
}

// AliasContains applies the Contains predicate on the "alias" field.
func AliasContains(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAlias), v))
	})
}

// AliasHasPrefix applies the HasPrefix predicate on the "alias" field.
func AliasHasPrefix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAlias), v))
	})
}

// AliasHasSuffix applies the HasSuffix predicate on the "alias" field.
func AliasHasSuffix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAlias), v))
	})
}

// AliasEqualFold applies the EqualFold predicate on the "alias" field.
func AliasEqualFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAlias), v))
	})
}

// AliasContainsFold applies the ContainsFold predicate on the "alias" field.
func AliasContainsFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAlias), v))
	})
}

// TypeIDEQ applies the EQ predicate on the "type_id" field.
func TypeIDEQ(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeID), v))
	})
}

// TypeIDNEQ applies the NEQ predicate on the "type_id" field.
func TypeIDNEQ(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeID), v))
	})
}

// TypeIDIn applies the In predicate on the "type_id" field.
func TypeIDIn(vs ...uint64) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypeID), v...))
	})
}

// TypeIDNotIn applies the NotIn predicate on the "type_id" field.
func TypeIDNotIn(vs ...uint64) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypeID), v...))
	})
}

// TypeIDGT applies the GT predicate on the "type_id" field.
func TypeIDGT(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypeID), v))
	})
}

// TypeIDGTE applies the GTE predicate on the "type_id" field.
func TypeIDGTE(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypeID), v))
	})
}

// TypeIDLT applies the LT predicate on the "type_id" field.
func TypeIDLT(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypeID), v))
	})
}

// TypeIDLTE applies the LTE predicate on the "type_id" field.
func TypeIDLTE(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypeID), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// IntroEQ applies the EQ predicate on the "intro" field.
func IntroEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntro), v))
	})
}

// IntroNEQ applies the NEQ predicate on the "intro" field.
func IntroNEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIntro), v))
	})
}

// IntroIn applies the In predicate on the "intro" field.
func IntroIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIntro), v...))
	})
}

// IntroNotIn applies the NotIn predicate on the "intro" field.
func IntroNotIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIntro), v...))
	})
}

// IntroGT applies the GT predicate on the "intro" field.
func IntroGT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIntro), v))
	})
}

// IntroGTE applies the GTE predicate on the "intro" field.
func IntroGTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIntro), v))
	})
}

// IntroLT applies the LT predicate on the "intro" field.
func IntroLT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIntro), v))
	})
}

// IntroLTE applies the LTE predicate on the "intro" field.
func IntroLTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIntro), v))
	})
}

// IntroContains applies the Contains predicate on the "intro" field.
func IntroContains(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIntro), v))
	})
}

// IntroHasPrefix applies the HasPrefix predicate on the "intro" field.
func IntroHasPrefix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIntro), v))
	})
}

// IntroHasSuffix applies the HasSuffix predicate on the "intro" field.
func IntroHasSuffix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIntro), v))
	})
}

// IntroEqualFold applies the EqualFold predicate on the "intro" field.
func IntroEqualFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIntro), v))
	})
}

// IntroContainsFold applies the ContainsFold predicate on the "intro" field.
func IntroContainsFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIntro), v))
	})
}

// MpOriginIDEQ applies the EQ predicate on the "mp_origin_id" field.
func MpOriginIDEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMpOriginID), v))
	})
}

// MpOriginIDNEQ applies the NEQ predicate on the "mp_origin_id" field.
func MpOriginIDNEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMpOriginID), v))
	})
}

// MpOriginIDIn applies the In predicate on the "mp_origin_id" field.
func MpOriginIDIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMpOriginID), v...))
	})
}

// MpOriginIDNotIn applies the NotIn predicate on the "mp_origin_id" field.
func MpOriginIDNotIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMpOriginID), v...))
	})
}

// MpOriginIDGT applies the GT predicate on the "mp_origin_id" field.
func MpOriginIDGT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMpOriginID), v))
	})
}

// MpOriginIDGTE applies the GTE predicate on the "mp_origin_id" field.
func MpOriginIDGTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMpOriginID), v))
	})
}

// MpOriginIDLT applies the LT predicate on the "mp_origin_id" field.
func MpOriginIDLT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMpOriginID), v))
	})
}

// MpOriginIDLTE applies the LTE predicate on the "mp_origin_id" field.
func MpOriginIDLTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMpOriginID), v))
	})
}

// MpOriginIDContains applies the Contains predicate on the "mp_origin_id" field.
func MpOriginIDContains(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMpOriginID), v))
	})
}

// MpOriginIDHasPrefix applies the HasPrefix predicate on the "mp_origin_id" field.
func MpOriginIDHasPrefix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMpOriginID), v))
	})
}

// MpOriginIDHasSuffix applies the HasSuffix predicate on the "mp_origin_id" field.
func MpOriginIDHasSuffix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMpOriginID), v))
	})
}

// MpOriginIDEqualFold applies the EqualFold predicate on the "mp_origin_id" field.
func MpOriginIDEqualFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMpOriginID), v))
	})
}

// MpOriginIDContainsFold applies the ContainsFold predicate on the "mp_origin_id" field.
func MpOriginIDContainsFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMpOriginID), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDContains applies the Contains predicate on the "app_id" field.
func AppIDContains(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAppID), v))
	})
}

// AppIDHasPrefix applies the HasPrefix predicate on the "app_id" field.
func AppIDHasPrefix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAppID), v))
	})
}

// AppIDHasSuffix applies the HasSuffix predicate on the "app_id" field.
func AppIDHasSuffix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAppID), v))
	})
}

// AppIDEqualFold applies the EqualFold predicate on the "app_id" field.
func AppIDEqualFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAppID), v))
	})
}

// AppIDContainsFold applies the ContainsFold predicate on the "app_id" field.
func AppIDContainsFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAppID), v))
	})
}

// AppSecretEQ applies the EQ predicate on the "app_secret" field.
func AppSecretEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppSecret), v))
	})
}

// AppSecretNEQ applies the NEQ predicate on the "app_secret" field.
func AppSecretNEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppSecret), v))
	})
}

// AppSecretIn applies the In predicate on the "app_secret" field.
func AppSecretIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppSecret), v...))
	})
}

// AppSecretNotIn applies the NotIn predicate on the "app_secret" field.
func AppSecretNotIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppSecret), v...))
	})
}

// AppSecretGT applies the GT predicate on the "app_secret" field.
func AppSecretGT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppSecret), v))
	})
}

// AppSecretGTE applies the GTE predicate on the "app_secret" field.
func AppSecretGTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppSecret), v))
	})
}

// AppSecretLT applies the LT predicate on the "app_secret" field.
func AppSecretLT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppSecret), v))
	})
}

// AppSecretLTE applies the LTE predicate on the "app_secret" field.
func AppSecretLTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppSecret), v))
	})
}

// AppSecretContains applies the Contains predicate on the "app_secret" field.
func AppSecretContains(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAppSecret), v))
	})
}

// AppSecretHasPrefix applies the HasPrefix predicate on the "app_secret" field.
func AppSecretHasPrefix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAppSecret), v))
	})
}

// AppSecretHasSuffix applies the HasSuffix predicate on the "app_secret" field.
func AppSecretHasSuffix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAppSecret), v))
	})
}

// AppSecretEqualFold applies the EqualFold predicate on the "app_secret" field.
func AppSecretEqualFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAppSecret), v))
	})
}

// AppSecretContainsFold applies the ContainsFold predicate on the "app_secret" field.
func AppSecretContainsFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAppSecret), v))
	})
}

// HasPaymentAuthEQ applies the EQ predicate on the "has_payment_auth" field.
func HasPaymentAuthEQ(v bool) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasPaymentAuth), v))
	})
}

// HasPaymentAuthNEQ applies the NEQ predicate on the "has_payment_auth" field.
func HasPaymentAuthNEQ(v bool) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasPaymentAuth), v))
	})
}

// RegisterUserNumberEQ applies the EQ predicate on the "register_user_number" field.
func RegisterUserNumberEQ(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisterUserNumber), v))
	})
}

// RegisterUserNumberNEQ applies the NEQ predicate on the "register_user_number" field.
func RegisterUserNumberNEQ(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegisterUserNumber), v))
	})
}

// RegisterUserNumberIn applies the In predicate on the "register_user_number" field.
func RegisterUserNumberIn(vs ...uint64) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegisterUserNumber), v...))
	})
}

// RegisterUserNumberNotIn applies the NotIn predicate on the "register_user_number" field.
func RegisterUserNumberNotIn(vs ...uint64) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegisterUserNumber), v...))
	})
}

// RegisterUserNumberGT applies the GT predicate on the "register_user_number" field.
func RegisterUserNumberGT(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegisterUserNumber), v))
	})
}

// RegisterUserNumberGTE applies the GTE predicate on the "register_user_number" field.
func RegisterUserNumberGTE(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegisterUserNumber), v))
	})
}

// RegisterUserNumberLT applies the LT predicate on the "register_user_number" field.
func RegisterUserNumberLT(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegisterUserNumber), v))
	})
}

// RegisterUserNumberLTE applies the LTE predicate on the "register_user_number" field.
func RegisterUserNumberLTE(v uint64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegisterUserNumber), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// HasAppOptions applies the HasEdge predicate on the "appOptions" edge.
func HasAppOptions() predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppOptionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppOptionsTable, AppOptionsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.AppOption
		step.Edge.Schema = schemaConfig.AppOption
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppOptionsWith applies the HasEdge predicate on the "appOptions" edge with a given conditions (other predicates).
func HasAppOptionsWith(preds ...predicate.AppOption) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppOptionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppOptionsTable, AppOptionsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.AppOption
		step.Edge.Schema = schemaConfig.AppOption
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		p(s.Not())
	})
}
