// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/appuser"
	"github.com/boshangad/v1/ent/appusertoken"
	"github.com/boshangad/v1/ent/user"
	"github.com/google/uuid"
)

// AppUserTokenCreate is the builder for creating a AppUserToken entity.
type AppUserTokenCreate struct {
	config
	mutation *AppUserTokenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (autc *AppUserTokenCreate) SetCreateTime(i int64) *AppUserTokenCreate {
	autc.mutation.SetCreateTime(i)
	return autc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableCreateTime(i *int64) *AppUserTokenCreate {
	if i != nil {
		autc.SetCreateTime(*i)
	}
	return autc
}

// SetAppID sets the "app_id" field.
func (autc *AppUserTokenCreate) SetAppID(u uint64) *AppUserTokenCreate {
	autc.mutation.SetAppID(u)
	return autc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableAppID(u *uint64) *AppUserTokenCreate {
	if u != nil {
		autc.SetAppID(*u)
	}
	return autc
}

// SetAppUserID sets the "app_user_id" field.
func (autc *AppUserTokenCreate) SetAppUserID(u uint64) *AppUserTokenCreate {
	autc.mutation.SetAppUserID(u)
	return autc
}

// SetNillableAppUserID sets the "app_user_id" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableAppUserID(u *uint64) *AppUserTokenCreate {
	if u != nil {
		autc.SetAppUserID(*u)
	}
	return autc
}

// SetUserID sets the "user_id" field.
func (autc *AppUserTokenCreate) SetUserID(u uint64) *AppUserTokenCreate {
	autc.mutation.SetUserID(u)
	return autc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableUserID(u *uint64) *AppUserTokenCreate {
	if u != nil {
		autc.SetUserID(*u)
	}
	return autc
}

// SetUserAgent sets the "user_agent" field.
func (autc *AppUserTokenCreate) SetUserAgent(s string) *AppUserTokenCreate {
	autc.mutation.SetUserAgent(s)
	return autc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableUserAgent(s *string) *AppUserTokenCreate {
	if s != nil {
		autc.SetUserAgent(*s)
	}
	return autc
}

// SetClientVersion sets the "client_version" field.
func (autc *AppUserTokenCreate) SetClientVersion(s string) *AppUserTokenCreate {
	autc.mutation.SetClientVersion(s)
	return autc
}

// SetNillableClientVersion sets the "client_version" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableClientVersion(s *string) *AppUserTokenCreate {
	if s != nil {
		autc.SetClientVersion(*s)
	}
	return autc
}

// SetUUID sets the "uuid" field.
func (autc *AppUserTokenCreate) SetUUID(u *uuid.UUID) *AppUserTokenCreate {
	autc.mutation.SetUUID(u)
	return autc
}

// SetIP sets the "ip" field.
func (autc *AppUserTokenCreate) SetIP(s string) *AppUserTokenCreate {
	autc.mutation.SetIP(s)
	return autc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableIP(s *string) *AppUserTokenCreate {
	if s != nil {
		autc.SetIP(*s)
	}
	return autc
}

// SetExpireTime sets the "expire_time" field.
func (autc *AppUserTokenCreate) SetExpireTime(i int64) *AppUserTokenCreate {
	autc.mutation.SetExpireTime(i)
	return autc
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableExpireTime(i *int64) *AppUserTokenCreate {
	if i != nil {
		autc.SetExpireTime(*i)
	}
	return autc
}

// SetID sets the "id" field.
func (autc *AppUserTokenCreate) SetID(u uint64) *AppUserTokenCreate {
	autc.mutation.SetID(u)
	return autc
}

// SetApp sets the "app" edge to the App entity.
func (autc *AppUserTokenCreate) SetApp(a *App) *AppUserTokenCreate {
	return autc.SetAppID(a.ID)
}

// SetAppUser sets the "appUser" edge to the AppUser entity.
func (autc *AppUserTokenCreate) SetAppUser(a *AppUser) *AppUserTokenCreate {
	return autc.SetAppUserID(a.ID)
}

// SetUser sets the "user" edge to the User entity.
func (autc *AppUserTokenCreate) SetUser(u *User) *AppUserTokenCreate {
	return autc.SetUserID(u.ID)
}

// Mutation returns the AppUserTokenMutation object of the builder.
func (autc *AppUserTokenCreate) Mutation() *AppUserTokenMutation {
	return autc.mutation
}

// Save creates the AppUserToken in the database.
func (autc *AppUserTokenCreate) Save(ctx context.Context) (*AppUserToken, error) {
	var (
		err  error
		node *AppUserToken
	)
	autc.defaults()
	if len(autc.hooks) == 0 {
		if err = autc.check(); err != nil {
			return nil, err
		}
		node, err = autc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = autc.check(); err != nil {
				return nil, err
			}
			autc.mutation = mutation
			if node, err = autc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(autc.hooks) - 1; i >= 0; i-- {
			if autc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = autc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, autc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (autc *AppUserTokenCreate) SaveX(ctx context.Context) *AppUserToken {
	v, err := autc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (autc *AppUserTokenCreate) Exec(ctx context.Context) error {
	_, err := autc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (autc *AppUserTokenCreate) ExecX(ctx context.Context) {
	if err := autc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (autc *AppUserTokenCreate) defaults() {
	if _, ok := autc.mutation.CreateTime(); !ok {
		v := appusertoken.DefaultCreateTime()
		autc.mutation.SetCreateTime(v)
	}
	if _, ok := autc.mutation.AppID(); !ok {
		v := appusertoken.DefaultAppID
		autc.mutation.SetAppID(v)
	}
	if _, ok := autc.mutation.AppUserID(); !ok {
		v := appusertoken.DefaultAppUserID
		autc.mutation.SetAppUserID(v)
	}
	if _, ok := autc.mutation.UserID(); !ok {
		v := appusertoken.DefaultUserID
		autc.mutation.SetUserID(v)
	}
	if _, ok := autc.mutation.UserAgent(); !ok {
		v := appusertoken.DefaultUserAgent
		autc.mutation.SetUserAgent(v)
	}
	if _, ok := autc.mutation.ClientVersion(); !ok {
		v := appusertoken.DefaultClientVersion
		autc.mutation.SetClientVersion(v)
	}
	if _, ok := autc.mutation.UUID(); !ok {
		v := appusertoken.DefaultUUID()
		autc.mutation.SetUUID(v)
	}
	if _, ok := autc.mutation.IP(); !ok {
		v := appusertoken.DefaultIP
		autc.mutation.SetIP(v)
	}
	if _, ok := autc.mutation.ExpireTime(); !ok {
		v := appusertoken.DefaultExpireTime
		autc.mutation.SetExpireTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (autc *AppUserTokenCreate) check() error {
	if _, ok := autc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := autc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	if _, ok := autc.mutation.AppUserID(); !ok {
		return &ValidationError{Name: "app_user_id", err: errors.New(`ent: missing required field "app_user_id"`)}
	}
	if _, ok := autc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := autc.mutation.UserAgent(); !ok {
		return &ValidationError{Name: "user_agent", err: errors.New(`ent: missing required field "user_agent"`)}
	}
	if v, ok := autc.mutation.UserAgent(); ok {
		if err := appusertoken.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "user_agent": %w`, err)}
		}
	}
	if _, ok := autc.mutation.ClientVersion(); !ok {
		return &ValidationError{Name: "client_version", err: errors.New(`ent: missing required field "client_version"`)}
	}
	if v, ok := autc.mutation.ClientVersion(); ok {
		if err := appusertoken.ClientVersionValidator(v); err != nil {
			return &ValidationError{Name: "client_version", err: fmt.Errorf(`ent: validator failed for field "client_version": %w`, err)}
		}
	}
	if _, ok := autc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "uuid"`)}
	}
	if _, ok := autc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "ip"`)}
	}
	if v, ok := autc.mutation.IP(); ok {
		if err := appusertoken.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "ip": %w`, err)}
		}
	}
	if _, ok := autc.mutation.ExpireTime(); !ok {
		return &ValidationError{Name: "expire_time", err: errors.New(`ent: missing required field "expire_time"`)}
	}
	if _, ok := autc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app", err: errors.New("ent: missing required edge \"app\"")}
	}
	if _, ok := autc.mutation.AppUserID(); !ok {
		return &ValidationError{Name: "appUser", err: errors.New("ent: missing required edge \"appUser\"")}
	}
	if _, ok := autc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (autc *AppUserTokenCreate) sqlSave(ctx context.Context) (*AppUserToken, error) {
	_node, _spec := autc.createSpec()
	if err := sqlgraph.CreateNode(ctx, autc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (autc *AppUserTokenCreate) createSpec() (*AppUserToken, *sqlgraph.CreateSpec) {
	var (
		_node = &AppUserToken{config: autc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appusertoken.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: appusertoken.FieldID,
			},
		}
	)
	_spec.Schema = autc.schemaConfig.AppUserToken
	_spec.OnConflict = autc.conflict
	if id, ok := autc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := autc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appusertoken.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := autc.mutation.UserAgent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appusertoken.FieldUserAgent,
		})
		_node.UserAgent = value
	}
	if value, ok := autc.mutation.ClientVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appusertoken.FieldClientVersion,
		})
		_node.ClientVersion = value
	}
	if value, ok := autc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: appusertoken.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := autc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appusertoken.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := autc.mutation.ExpireTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appusertoken.FieldExpireTime,
		})
		_node.ExpireTime = value
	}
	if nodes := autc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.AppTable,
			Columns: []string{appusertoken.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		edge.Schema = autc.schemaConfig.AppUserToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := autc.mutation.AppUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.AppUserTable,
			Columns: []string{appusertoken.AppUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appuser.FieldID,
				},
			},
		}
		edge.Schema = autc.schemaConfig.AppUserToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := autc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.UserTable,
			Columns: []string{appusertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = autc.schemaConfig.AppUserToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppUserToken.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUserTokenUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (autc *AppUserTokenCreate) OnConflict(opts ...sql.ConflictOption) *AppUserTokenUpsertOne {
	autc.conflict = opts
	return &AppUserTokenUpsertOne{
		create: autc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppUserToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (autc *AppUserTokenCreate) OnConflictColumns(columns ...string) *AppUserTokenUpsertOne {
	autc.conflict = append(autc.conflict, sql.ConflictColumns(columns...))
	return &AppUserTokenUpsertOne{
		create: autc,
	}
}

type (
	// AppUserTokenUpsertOne is the builder for "upsert"-ing
	//  one AppUserToken node.
	AppUserTokenUpsertOne struct {
		create *AppUserTokenCreate
	}

	// AppUserTokenUpsert is the "OnConflict" setter.
	AppUserTokenUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *AppUserTokenUpsert) SetCreateTime(v int64) *AppUserTokenUpsert {
	u.Set(appusertoken.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AppUserTokenUpsert) UpdateCreateTime() *AppUserTokenUpsert {
	u.SetExcluded(appusertoken.FieldCreateTime)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppUserTokenUpsert) SetAppID(v uint64) *AppUserTokenUpsert {
	u.Set(appusertoken.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserTokenUpsert) UpdateAppID() *AppUserTokenUpsert {
	u.SetExcluded(appusertoken.FieldAppID)
	return u
}

// SetAppUserID sets the "app_user_id" field.
func (u *AppUserTokenUpsert) SetAppUserID(v uint64) *AppUserTokenUpsert {
	u.Set(appusertoken.FieldAppUserID, v)
	return u
}

// UpdateAppUserID sets the "app_user_id" field to the value that was provided on create.
func (u *AppUserTokenUpsert) UpdateAppUserID() *AppUserTokenUpsert {
	u.SetExcluded(appusertoken.FieldAppUserID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *AppUserTokenUpsert) SetUserID(v uint64) *AppUserTokenUpsert {
	u.Set(appusertoken.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserTokenUpsert) UpdateUserID() *AppUserTokenUpsert {
	u.SetExcluded(appusertoken.FieldUserID)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *AppUserTokenUpsert) SetUserAgent(v string) *AppUserTokenUpsert {
	u.Set(appusertoken.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *AppUserTokenUpsert) UpdateUserAgent() *AppUserTokenUpsert {
	u.SetExcluded(appusertoken.FieldUserAgent)
	return u
}

// SetClientVersion sets the "client_version" field.
func (u *AppUserTokenUpsert) SetClientVersion(v string) *AppUserTokenUpsert {
	u.Set(appusertoken.FieldClientVersion, v)
	return u
}

// UpdateClientVersion sets the "client_version" field to the value that was provided on create.
func (u *AppUserTokenUpsert) UpdateClientVersion() *AppUserTokenUpsert {
	u.SetExcluded(appusertoken.FieldClientVersion)
	return u
}

// SetUUID sets the "uuid" field.
func (u *AppUserTokenUpsert) SetUUID(v *uuid.UUID) *AppUserTokenUpsert {
	u.Set(appusertoken.FieldUUID, v)
	return u
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *AppUserTokenUpsert) UpdateUUID() *AppUserTokenUpsert {
	u.SetExcluded(appusertoken.FieldUUID)
	return u
}

// SetIP sets the "ip" field.
func (u *AppUserTokenUpsert) SetIP(v string) *AppUserTokenUpsert {
	u.Set(appusertoken.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AppUserTokenUpsert) UpdateIP() *AppUserTokenUpsert {
	u.SetExcluded(appusertoken.FieldIP)
	return u
}

// SetExpireTime sets the "expire_time" field.
func (u *AppUserTokenUpsert) SetExpireTime(v int64) *AppUserTokenUpsert {
	u.Set(appusertoken.FieldExpireTime, v)
	return u
}

// UpdateExpireTime sets the "expire_time" field to the value that was provided on create.
func (u *AppUserTokenUpsert) UpdateExpireTime() *AppUserTokenUpsert {
	u.SetExcluded(appusertoken.FieldExpireTime)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppUserToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appusertoken.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppUserTokenUpsertOne) UpdateNewValues() *AppUserTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appusertoken.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppUserToken.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppUserTokenUpsertOne) Ignore() *AppUserTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUserTokenUpsertOne) DoNothing() *AppUserTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppUserTokenCreate.OnConflict
// documentation for more info.
func (u *AppUserTokenUpsertOne) Update(set func(*AppUserTokenUpsert)) *AppUserTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUserTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *AppUserTokenUpsertOne) SetCreateTime(v int64) *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AppUserTokenUpsertOne) UpdateCreateTime() *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateCreateTime()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppUserTokenUpsertOne) SetAppID(v uint64) *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserTokenUpsertOne) UpdateAppID() *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateAppID()
	})
}

// SetAppUserID sets the "app_user_id" field.
func (u *AppUserTokenUpsertOne) SetAppUserID(v uint64) *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetAppUserID(v)
	})
}

// UpdateAppUserID sets the "app_user_id" field to the value that was provided on create.
func (u *AppUserTokenUpsertOne) UpdateAppUserID() *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateAppUserID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AppUserTokenUpsertOne) SetUserID(v uint64) *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserTokenUpsertOne) UpdateUserID() *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateUserID()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *AppUserTokenUpsertOne) SetUserAgent(v string) *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *AppUserTokenUpsertOne) UpdateUserAgent() *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateUserAgent()
	})
}

// SetClientVersion sets the "client_version" field.
func (u *AppUserTokenUpsertOne) SetClientVersion(v string) *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetClientVersion(v)
	})
}

// UpdateClientVersion sets the "client_version" field to the value that was provided on create.
func (u *AppUserTokenUpsertOne) UpdateClientVersion() *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateClientVersion()
	})
}

// SetUUID sets the "uuid" field.
func (u *AppUserTokenUpsertOne) SetUUID(v *uuid.UUID) *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *AppUserTokenUpsertOne) UpdateUUID() *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateUUID()
	})
}

// SetIP sets the "ip" field.
func (u *AppUserTokenUpsertOne) SetIP(v string) *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AppUserTokenUpsertOne) UpdateIP() *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateIP()
	})
}

// SetExpireTime sets the "expire_time" field.
func (u *AppUserTokenUpsertOne) SetExpireTime(v int64) *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetExpireTime(v)
	})
}

// UpdateExpireTime sets the "expire_time" field to the value that was provided on create.
func (u *AppUserTokenUpsertOne) UpdateExpireTime() *AppUserTokenUpsertOne {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateExpireTime()
	})
}

// Exec executes the query.
func (u *AppUserTokenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppUserTokenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUserTokenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppUserTokenUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppUserTokenUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppUserTokenCreateBulk is the builder for creating many AppUserToken entities in bulk.
type AppUserTokenCreateBulk struct {
	config
	builders []*AppUserTokenCreate
	conflict []sql.ConflictOption
}

// Save creates the AppUserToken entities in the database.
func (autcb *AppUserTokenCreateBulk) Save(ctx context.Context) ([]*AppUserToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(autcb.builders))
	nodes := make([]*AppUserToken, len(autcb.builders))
	mutators := make([]Mutator, len(autcb.builders))
	for i := range autcb.builders {
		func(i int, root context.Context) {
			builder := autcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppUserTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, autcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = autcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, autcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, autcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (autcb *AppUserTokenCreateBulk) SaveX(ctx context.Context) []*AppUserToken {
	v, err := autcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (autcb *AppUserTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := autcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (autcb *AppUserTokenCreateBulk) ExecX(ctx context.Context) {
	if err := autcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppUserToken.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUserTokenUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (autcb *AppUserTokenCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppUserTokenUpsertBulk {
	autcb.conflict = opts
	return &AppUserTokenUpsertBulk{
		create: autcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppUserToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (autcb *AppUserTokenCreateBulk) OnConflictColumns(columns ...string) *AppUserTokenUpsertBulk {
	autcb.conflict = append(autcb.conflict, sql.ConflictColumns(columns...))
	return &AppUserTokenUpsertBulk{
		create: autcb,
	}
}

// AppUserTokenUpsertBulk is the builder for "upsert"-ing
// a bulk of AppUserToken nodes.
type AppUserTokenUpsertBulk struct {
	create *AppUserTokenCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppUserToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appusertoken.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppUserTokenUpsertBulk) UpdateNewValues() *AppUserTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appusertoken.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppUserToken.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppUserTokenUpsertBulk) Ignore() *AppUserTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUserTokenUpsertBulk) DoNothing() *AppUserTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppUserTokenCreateBulk.OnConflict
// documentation for more info.
func (u *AppUserTokenUpsertBulk) Update(set func(*AppUserTokenUpsert)) *AppUserTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUserTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *AppUserTokenUpsertBulk) SetCreateTime(v int64) *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AppUserTokenUpsertBulk) UpdateCreateTime() *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateCreateTime()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppUserTokenUpsertBulk) SetAppID(v uint64) *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserTokenUpsertBulk) UpdateAppID() *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateAppID()
	})
}

// SetAppUserID sets the "app_user_id" field.
func (u *AppUserTokenUpsertBulk) SetAppUserID(v uint64) *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetAppUserID(v)
	})
}

// UpdateAppUserID sets the "app_user_id" field to the value that was provided on create.
func (u *AppUserTokenUpsertBulk) UpdateAppUserID() *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateAppUserID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AppUserTokenUpsertBulk) SetUserID(v uint64) *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserTokenUpsertBulk) UpdateUserID() *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateUserID()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *AppUserTokenUpsertBulk) SetUserAgent(v string) *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *AppUserTokenUpsertBulk) UpdateUserAgent() *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateUserAgent()
	})
}

// SetClientVersion sets the "client_version" field.
func (u *AppUserTokenUpsertBulk) SetClientVersion(v string) *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetClientVersion(v)
	})
}

// UpdateClientVersion sets the "client_version" field to the value that was provided on create.
func (u *AppUserTokenUpsertBulk) UpdateClientVersion() *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateClientVersion()
	})
}

// SetUUID sets the "uuid" field.
func (u *AppUserTokenUpsertBulk) SetUUID(v *uuid.UUID) *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *AppUserTokenUpsertBulk) UpdateUUID() *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateUUID()
	})
}

// SetIP sets the "ip" field.
func (u *AppUserTokenUpsertBulk) SetIP(v string) *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AppUserTokenUpsertBulk) UpdateIP() *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateIP()
	})
}

// SetExpireTime sets the "expire_time" field.
func (u *AppUserTokenUpsertBulk) SetExpireTime(v int64) *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.SetExpireTime(v)
	})
}

// UpdateExpireTime sets the "expire_time" field to the value that was provided on create.
func (u *AppUserTokenUpsertBulk) UpdateExpireTime() *AppUserTokenUpsertBulk {
	return u.Update(func(s *AppUserTokenUpsert) {
		s.UpdateExpireTime()
	})
}

// Exec executes the query.
func (u *AppUserTokenUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppUserTokenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppUserTokenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUserTokenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
