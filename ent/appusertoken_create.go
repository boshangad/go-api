// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/appuser"
	"github.com/boshangad/v1/ent/appusertoken"
	"github.com/boshangad/v1/ent/user"
	"github.com/google/uuid"
)

// AppUserTokenCreate is the builder for creating a AppUserToken entity.
type AppUserTokenCreate struct {
	config
	mutation *AppUserTokenMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (autc *AppUserTokenCreate) SetCreateTime(i int64) *AppUserTokenCreate {
	autc.mutation.SetCreateTime(i)
	return autc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableCreateTime(i *int64) *AppUserTokenCreate {
	if i != nil {
		autc.SetCreateTime(*i)
	}
	return autc
}

// SetAppID sets the "app_id" field.
func (autc *AppUserTokenCreate) SetAppID(u uint64) *AppUserTokenCreate {
	autc.mutation.SetAppID(u)
	return autc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableAppID(u *uint64) *AppUserTokenCreate {
	if u != nil {
		autc.SetAppID(*u)
	}
	return autc
}

// SetAppUserID sets the "app_user_id" field.
func (autc *AppUserTokenCreate) SetAppUserID(u uint64) *AppUserTokenCreate {
	autc.mutation.SetAppUserID(u)
	return autc
}

// SetNillableAppUserID sets the "app_user_id" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableAppUserID(u *uint64) *AppUserTokenCreate {
	if u != nil {
		autc.SetAppUserID(*u)
	}
	return autc
}

// SetUserID sets the "user_id" field.
func (autc *AppUserTokenCreate) SetUserID(u uint64) *AppUserTokenCreate {
	autc.mutation.SetUserID(u)
	return autc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableUserID(u *uint64) *AppUserTokenCreate {
	if u != nil {
		autc.SetUserID(*u)
	}
	return autc
}

// SetClientVersion sets the "client_version" field.
func (autc *AppUserTokenCreate) SetClientVersion(s string) *AppUserTokenCreate {
	autc.mutation.SetClientVersion(s)
	return autc
}

// SetNillableClientVersion sets the "client_version" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableClientVersion(s *string) *AppUserTokenCreate {
	if s != nil {
		autc.SetClientVersion(*s)
	}
	return autc
}

// SetUUID sets the "uuid" field.
func (autc *AppUserTokenCreate) SetUUID(u uuid.UUID) *AppUserTokenCreate {
	autc.mutation.SetUUID(u)
	return autc
}

// SetIP sets the "ip" field.
func (autc *AppUserTokenCreate) SetIP(s string) *AppUserTokenCreate {
	autc.mutation.SetIP(s)
	return autc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableIP(s *string) *AppUserTokenCreate {
	if s != nil {
		autc.SetIP(*s)
	}
	return autc
}

// SetExpireTime sets the "expire_time" field.
func (autc *AppUserTokenCreate) SetExpireTime(u uint64) *AppUserTokenCreate {
	autc.mutation.SetExpireTime(u)
	return autc
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (autc *AppUserTokenCreate) SetNillableExpireTime(u *uint64) *AppUserTokenCreate {
	if u != nil {
		autc.SetExpireTime(*u)
	}
	return autc
}

// SetID sets the "id" field.
func (autc *AppUserTokenCreate) SetID(u uint64) *AppUserTokenCreate {
	autc.mutation.SetID(u)
	return autc
}

// SetApp sets the "app" edge to the App entity.
func (autc *AppUserTokenCreate) SetApp(a *App) *AppUserTokenCreate {
	return autc.SetAppID(a.ID)
}

// SetAppUser sets the "appUser" edge to the AppUser entity.
func (autc *AppUserTokenCreate) SetAppUser(a *AppUser) *AppUserTokenCreate {
	return autc.SetAppUserID(a.ID)
}

// SetUser sets the "user" edge to the User entity.
func (autc *AppUserTokenCreate) SetUser(u *User) *AppUserTokenCreate {
	return autc.SetUserID(u.ID)
}

// Mutation returns the AppUserTokenMutation object of the builder.
func (autc *AppUserTokenCreate) Mutation() *AppUserTokenMutation {
	return autc.mutation
}

// Save creates the AppUserToken in the database.
func (autc *AppUserTokenCreate) Save(ctx context.Context) (*AppUserToken, error) {
	var (
		err  error
		node *AppUserToken
	)
	autc.defaults()
	if len(autc.hooks) == 0 {
		if err = autc.check(); err != nil {
			return nil, err
		}
		node, err = autc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = autc.check(); err != nil {
				return nil, err
			}
			autc.mutation = mutation
			if node, err = autc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(autc.hooks) - 1; i >= 0; i-- {
			if autc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = autc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, autc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (autc *AppUserTokenCreate) SaveX(ctx context.Context) *AppUserToken {
	v, err := autc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (autc *AppUserTokenCreate) Exec(ctx context.Context) error {
	_, err := autc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (autc *AppUserTokenCreate) ExecX(ctx context.Context) {
	if err := autc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (autc *AppUserTokenCreate) defaults() {
	if _, ok := autc.mutation.CreateTime(); !ok {
		v := appusertoken.DefaultCreateTime
		autc.mutation.SetCreateTime(v)
	}
	if _, ok := autc.mutation.AppID(); !ok {
		v := appusertoken.DefaultAppID
		autc.mutation.SetAppID(v)
	}
	if _, ok := autc.mutation.AppUserID(); !ok {
		v := appusertoken.DefaultAppUserID
		autc.mutation.SetAppUserID(v)
	}
	if _, ok := autc.mutation.UserID(); !ok {
		v := appusertoken.DefaultUserID
		autc.mutation.SetUserID(v)
	}
	if _, ok := autc.mutation.ClientVersion(); !ok {
		v := appusertoken.DefaultClientVersion
		autc.mutation.SetClientVersion(v)
	}
	if _, ok := autc.mutation.UUID(); !ok {
		v := appusertoken.DefaultUUID()
		autc.mutation.SetUUID(v)
	}
	if _, ok := autc.mutation.IP(); !ok {
		v := appusertoken.DefaultIP
		autc.mutation.SetIP(v)
	}
	if _, ok := autc.mutation.ExpireTime(); !ok {
		v := appusertoken.DefaultExpireTime
		autc.mutation.SetExpireTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (autc *AppUserTokenCreate) check() error {
	if _, ok := autc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := autc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	if _, ok := autc.mutation.AppUserID(); !ok {
		return &ValidationError{Name: "app_user_id", err: errors.New(`ent: missing required field "app_user_id"`)}
	}
	if _, ok := autc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := autc.mutation.ClientVersion(); !ok {
		return &ValidationError{Name: "client_version", err: errors.New(`ent: missing required field "client_version"`)}
	}
	if v, ok := autc.mutation.ClientVersion(); ok {
		if err := appusertoken.ClientVersionValidator(v); err != nil {
			return &ValidationError{Name: "client_version", err: fmt.Errorf(`ent: validator failed for field "client_version": %w`, err)}
		}
	}
	if _, ok := autc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "uuid"`)}
	}
	if _, ok := autc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "ip"`)}
	}
	if v, ok := autc.mutation.IP(); ok {
		if err := appusertoken.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "ip": %w`, err)}
		}
	}
	if _, ok := autc.mutation.ExpireTime(); !ok {
		return &ValidationError{Name: "expire_time", err: errors.New(`ent: missing required field "expire_time"`)}
	}
	if _, ok := autc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app", err: errors.New("ent: missing required edge \"app\"")}
	}
	if _, ok := autc.mutation.AppUserID(); !ok {
		return &ValidationError{Name: "appUser", err: errors.New("ent: missing required edge \"appUser\"")}
	}
	if _, ok := autc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (autc *AppUserTokenCreate) sqlSave(ctx context.Context) (*AppUserToken, error) {
	_node, _spec := autc.createSpec()
	if err := sqlgraph.CreateNode(ctx, autc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (autc *AppUserTokenCreate) createSpec() (*AppUserToken, *sqlgraph.CreateSpec) {
	var (
		_node = &AppUserToken{config: autc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appusertoken.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: appusertoken.FieldID,
			},
		}
	)
	if id, ok := autc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := autc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appusertoken.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := autc.mutation.ClientVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appusertoken.FieldClientVersion,
		})
		_node.ClientVersion = value
	}
	if value, ok := autc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appusertoken.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := autc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appusertoken.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := autc.mutation.ExpireTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appusertoken.FieldExpireTime,
		})
		_node.ExpireTime = value
	}
	if nodes := autc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.AppTable,
			Columns: []string{appusertoken.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := autc.mutation.AppUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.AppUserTable,
			Columns: []string{appusertoken.AppUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: appuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := autc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appusertoken.UserTable,
			Columns: []string{appusertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppUserTokenCreateBulk is the builder for creating many AppUserToken entities in bulk.
type AppUserTokenCreateBulk struct {
	config
	builders []*AppUserTokenCreate
}

// Save creates the AppUserToken entities in the database.
func (autcb *AppUserTokenCreateBulk) Save(ctx context.Context) ([]*AppUserToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(autcb.builders))
	nodes := make([]*AppUserToken, len(autcb.builders))
	mutators := make([]Mutator, len(autcb.builders))
	for i := range autcb.builders {
		func(i int, root context.Context) {
			builder := autcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppUserTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, autcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, autcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, autcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (autcb *AppUserTokenCreateBulk) SaveX(ctx context.Context) []*AppUserToken {
	v, err := autcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (autcb *AppUserTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := autcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (autcb *AppUserTokenCreateBulk) ExecX(ctx context.Context) {
	if err := autcb.Exec(ctx); err != nil {
		panic(err)
	}
}
