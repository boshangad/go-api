// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/smslog"
)

// SmsLog is the model entity for the SmsLog schema.
type SmsLog struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID uint64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime int64 `json:"create_time,omitempty"`
	// CreateBy holds the value of the "create_by" field.
	// 创建人
	CreateBy uint64 `json:"create_by,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime int64 `json:"update_time,omitempty"`
	// UpdateBy holds the value of the "update_by" field.
	// 更新人
	UpdateBy uint64 `json:"update_by,omitempty"`
	// AppID holds the value of the "app_id" field.
	// 应用
	AppID uint64 `json:"app_id,omitempty"`
	// DialCode holds the value of the "dial_code" field.
	// 拨号区号
	DialCode string `json:"dial_code,omitempty"`
	// Mobile holds the value of the "mobile" field.
	// 拨号区号
	Mobile string `json:"mobile,omitempty"`
	// Scope holds the value of the "scope" field.
	// 范围
	Scope string `json:"scope,omitempty"`
	// TypeID holds the value of the "type_id" field.
	// 类型
	TypeID uint64 `json:"type_id,omitempty"`
	// Gateway holds the value of the "gateway" field.
	// 网关
	Gateway string `json:"gateway,omitempty"`
	// IP holds the value of the "ip" field.
	// IP
	IP string `json:"ip,omitempty"`
	// TemplateID holds the value of the "template_id" field.
	// 短信模板
	TemplateID string `json:"template_id,omitempty"`
	// TemplateText holds the value of the "template_text" field.
	// 模板文案
	TemplateText string `json:"template_text,omitempty"`
	// Content holds the value of the "content" field.
	// 内容
	Content string `json:"content,omitempty"`
	// CheckCount holds the value of the "check_count" field.
	// 检查次数
	CheckCount uint8 `json:"check_count,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status uint `json:"status,omitempty"`
	// ReturnMsg holds the value of the "return_msg" field.
	// 返回内容
	ReturnMsg string `json:"return_msg,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SmsLogQuery when eager-loading is set.
	Edges SmsLogEdges `json:"edges"`
}

// SmsLogEdges holds the relations/edges for other nodes in the graph.
type SmsLogEdges struct {
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SmsLogEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// The edge app was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SmsLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case smslog.FieldID, smslog.FieldCreateTime, smslog.FieldCreateBy, smslog.FieldUpdateTime, smslog.FieldUpdateBy, smslog.FieldAppID, smslog.FieldTypeID, smslog.FieldCheckCount, smslog.FieldStatus:
			values[i] = new(sql.NullInt64)
		case smslog.FieldDialCode, smslog.FieldMobile, smslog.FieldScope, smslog.FieldGateway, smslog.FieldIP, smslog.FieldTemplateID, smslog.FieldTemplateText, smslog.FieldContent, smslog.FieldReturnMsg:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SmsLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SmsLog fields.
func (sl *SmsLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case smslog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sl.ID = uint64(value.Int64)
		case smslog.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sl.CreateTime = value.Int64
			}
		case smslog.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				sl.CreateBy = uint64(value.Int64)
			}
		case smslog.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sl.UpdateTime = value.Int64
			}
		case smslog.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				sl.UpdateBy = uint64(value.Int64)
			}
		case smslog.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				sl.AppID = uint64(value.Int64)
			}
		case smslog.FieldDialCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dial_code", values[i])
			} else if value.Valid {
				sl.DialCode = value.String
			}
		case smslog.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				sl.Mobile = value.String
			}
		case smslog.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				sl.Scope = value.String
			}
		case smslog.FieldTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type_id", values[i])
			} else if value.Valid {
				sl.TypeID = uint64(value.Int64)
			}
		case smslog.FieldGateway:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gateway", values[i])
			} else if value.Valid {
				sl.Gateway = value.String
			}
		case smslog.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				sl.IP = value.String
			}
		case smslog.FieldTemplateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				sl.TemplateID = value.String
			}
		case smslog.FieldTemplateText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_text", values[i])
			} else if value.Valid {
				sl.TemplateText = value.String
			}
		case smslog.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				sl.Content = value.String
			}
		case smslog.FieldCheckCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field check_count", values[i])
			} else if value.Valid {
				sl.CheckCount = uint8(value.Int64)
			}
		case smslog.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sl.Status = uint(value.Int64)
			}
		case smslog.FieldReturnMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field return_msg", values[i])
			} else if value.Valid {
				sl.ReturnMsg = value.String
			}
		}
	}
	return nil
}

// QueryApp queries the "app" edge of the SmsLog entity.
func (sl *SmsLog) QueryApp() *AppQuery {
	return (&SmsLogClient{config: sl.config}).QueryApp(sl)
}

// Update returns a builder for updating this SmsLog.
// Note that you need to call SmsLog.Unwrap() before calling this method if this SmsLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *SmsLog) Update() *SmsLogUpdateOne {
	return (&SmsLogClient{config: sl.config}).UpdateOne(sl)
}

// Unwrap unwraps the SmsLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *SmsLog) Unwrap() *SmsLog {
	tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: SmsLog is not a transactional entity")
	}
	sl.config.driver = tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *SmsLog) String() string {
	var builder strings.Builder
	builder.WriteString("SmsLog(")
	builder.WriteString(fmt.Sprintf("id=%v", sl.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", sl.CreateTime))
	builder.WriteString(", create_by=")
	builder.WriteString(fmt.Sprintf("%v", sl.CreateBy))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", sl.UpdateTime))
	builder.WriteString(", update_by=")
	builder.WriteString(fmt.Sprintf("%v", sl.UpdateBy))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", sl.AppID))
	builder.WriteString(", dial_code=")
	builder.WriteString(sl.DialCode)
	builder.WriteString(", mobile=")
	builder.WriteString(sl.Mobile)
	builder.WriteString(", scope=")
	builder.WriteString(sl.Scope)
	builder.WriteString(", type_id=")
	builder.WriteString(fmt.Sprintf("%v", sl.TypeID))
	builder.WriteString(", gateway=")
	builder.WriteString(sl.Gateway)
	builder.WriteString(", ip=")
	builder.WriteString(sl.IP)
	builder.WriteString(", template_id=")
	builder.WriteString(sl.TemplateID)
	builder.WriteString(", template_text=")
	builder.WriteString(sl.TemplateText)
	builder.WriteString(", content=")
	builder.WriteString(sl.Content)
	builder.WriteString(", check_count=")
	builder.WriteString(fmt.Sprintf("%v", sl.CheckCount))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", sl.Status))
	builder.WriteString(", return_msg=")
	builder.WriteString(sl.ReturnMsg)
	builder.WriteByte(')')
	return builder.String()
}

// SmsLogs is a parsable slice of SmsLog.
type SmsLogs []*SmsLog

func (sl SmsLogs) config(cfg config) {
	for _i := range sl {
		sl[_i].config = cfg
	}
}
