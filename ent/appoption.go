// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/boshangad/v1/ent/app"
	"github.com/boshangad/v1/ent/appoption"
)

// AppOption is the model entity for the AppOption schema.
type AppOption struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID uint64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime int64 `json:"create_time,omitempty"`
	// CreateBy holds the value of the "create_by" field.
	// 创建人
	CreateBy uint64 `json:"create_by,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime int64 `json:"update_time,omitempty"`
	// UpdateBy holds the value of the "update_by" field.
	// 更新人
	UpdateBy uint64 `json:"update_by,omitempty"`
	// AppID holds the value of the "app_id" field.
	// 应用
	AppID uint64 `json:"app_id,omitempty"`
	// Title holds the value of the "title" field.
	// 标题
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	// 描述
	Description string `json:"description,omitempty"`
	// Name holds the value of the "name" field.
	// 键
	Name string `json:"name,omitempty"`
	// Value holds the value of the "value" field.
	// 值
	Value string `json:"value,omitempty"`
	// ExpireTime holds the value of the "expire_time" field.
	// 失效时间
	ExpireTime int64 `json:"expire_time,omitempty"`
	// EditType holds the value of the "edit_type" field.
	// 编辑类型
	EditType uint `json:"edit_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppOptionQuery when eager-loading is set.
	Edges AppOptionEdges `json:"edges"`
}

// AppOptionEdges holds the relations/edges for other nodes in the graph.
type AppOptionEdges struct {
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppOptionEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// The edge app was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppOption) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appoption.FieldID, appoption.FieldCreateTime, appoption.FieldCreateBy, appoption.FieldUpdateTime, appoption.FieldUpdateBy, appoption.FieldAppID, appoption.FieldExpireTime, appoption.FieldEditType:
			values[i] = new(sql.NullInt64)
		case appoption.FieldTitle, appoption.FieldDescription, appoption.FieldName, appoption.FieldValue:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppOption", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppOption fields.
func (ao *AppOption) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appoption.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ao.ID = uint64(value.Int64)
		case appoption.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ao.CreateTime = value.Int64
			}
		case appoption.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				ao.CreateBy = uint64(value.Int64)
			}
		case appoption.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ao.UpdateTime = value.Int64
			}
		case appoption.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				ao.UpdateBy = uint64(value.Int64)
			}
		case appoption.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				ao.AppID = uint64(value.Int64)
			}
		case appoption.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ao.Title = value.String
			}
		case appoption.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ao.Description = value.String
			}
		case appoption.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ao.Name = value.String
			}
		case appoption.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ao.Value = value.String
			}
		case appoption.FieldExpireTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expire_time", values[i])
			} else if value.Valid {
				ao.ExpireTime = value.Int64
			}
		case appoption.FieldEditType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field edit_type", values[i])
			} else if value.Valid {
				ao.EditType = uint(value.Int64)
			}
		}
	}
	return nil
}

// QueryApp queries the "app" edge of the AppOption entity.
func (ao *AppOption) QueryApp() *AppQuery {
	return (&AppOptionClient{config: ao.config}).QueryApp(ao)
}

// Update returns a builder for updating this AppOption.
// Note that you need to call AppOption.Unwrap() before calling this method if this AppOption
// was returned from a transaction, and the transaction was committed or rolled back.
func (ao *AppOption) Update() *AppOptionUpdateOne {
	return (&AppOptionClient{config: ao.config}).UpdateOne(ao)
}

// Unwrap unwraps the AppOption entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ao *AppOption) Unwrap() *AppOption {
	tx, ok := ao.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppOption is not a transactional entity")
	}
	ao.config.driver = tx.drv
	return ao
}

// String implements the fmt.Stringer.
func (ao *AppOption) String() string {
	var builder strings.Builder
	builder.WriteString("AppOption(")
	builder.WriteString(fmt.Sprintf("id=%v", ao.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", ao.CreateTime))
	builder.WriteString(", create_by=")
	builder.WriteString(fmt.Sprintf("%v", ao.CreateBy))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", ao.UpdateTime))
	builder.WriteString(", update_by=")
	builder.WriteString(fmt.Sprintf("%v", ao.UpdateBy))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", ao.AppID))
	builder.WriteString(", title=")
	builder.WriteString(ao.Title)
	builder.WriteString(", description=")
	builder.WriteString(ao.Description)
	builder.WriteString(", name=")
	builder.WriteString(ao.Name)
	builder.WriteString(", value=")
	builder.WriteString(ao.Value)
	builder.WriteString(", expire_time=")
	builder.WriteString(fmt.Sprintf("%v", ao.ExpireTime))
	builder.WriteString(", edit_type=")
	builder.WriteString(fmt.Sprintf("%v", ao.EditType))
	builder.WriteByte(')')
	return builder.String()
}

// AppOptions is a parsable slice of AppOption.
type AppOptions []*AppOption

func (ao AppOptions) config(cfg config) {
	for _i := range ao {
		ao[_i].config = cfg
	}
}
